#!groovy

DOCKER_IMAGE_NAME='dockerregistry.macio.de:5000/backup_archiver:latest'

TEST_SETTINGS="TEST_INDEX_DATABASES=sqlite:intermediate/index.db TEST_LOGIN_NAME=test TEST_PASSWORD=test TEST_BASE_DIR=/home/test TEST_PUBLIC_KEY_SSH=/home/test/.ssh/id_rsa.pub TEST_PRIVATE_KEY_SSH=/home/test/.ssh/id_rsa TEST_IMAGE_OPERATIONS=no"

TEST_STEPS = ["basic",
              "compress",
              "delta_compress",
              "crypt",
              "asymmetric_crypt",
              "signatures",
              "split",
              "convert",
              "storage_file",
              "storage_ftp",
              "storage_scp",
              "storage_sftp",
              "storage_webdav",
              "index",
              "server",
              "arguments",
              "config",
              "misc"
             ];

// tests
def tests()
{
  try
  {
    stage("Build")
    {
      docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
      {
        checkout scm
        script
        {
          // configure
          sh "./download-third-party-packages.sh --local-directory /media/extern"
          sh "./download-third-party-packages.sh"
          sh "./configure"

          // make (Note: avoid race condition in depend by not create dependencies in parallel)
          sh "make depend"
          sh "make -j`nproc --ignore=1`"
        }
      }
    }

    stage("Tests")
    {
      // run tests
      script
      {
        switch (params.BINARY_TYPE)
        {
          case "DEBUG":
            binaryExtension="-debug";
            break;
          case "VALGRIND":
            binaryExtension="-valgrind";
            break;
          case "GCOV":
            binaryExtension="-gcov";
            break;
          case "GPROF":
            binaryExtension="-gprof";
            break;
          default:
            binaryExtension="";
            break;
        }
        sh "echo binaryExtension="+binaryExtension
        switch (params.TEST_TYPE)
        {
          case "SMOKE":
          default:
            docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
            {
              sh "rm -f bar-test.log"
              sh "make test_smoke-"+binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
            }
            break;
          case "FULL":
            docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
            {
              // start services
              sh "sudo /etc/init.d/apache2 start"
              sh "sudo /etc/init.d/ssh start"
              sh "sudo /etc/init.d/vsftpd start"

              sh "rm -f bar-test.log"
              TEST_STEPS.each { step -> sh "make test_${step}"+binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log" }
/*
              sh "make test_basic"           +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_compress"        +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_delta_compress"  +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_crypt"           +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_asymmetric_crypt"+binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_signatures"      +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_split"           +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_convert"         +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_storage_file"    +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_storage_ftp"     +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_storage_scp"     +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_storage_sftp"    +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_storage_webdav"  +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_index"           +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_arguments"       +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_config"          +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_misc"            +binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1' | tee -a bar-test.log"
*/

              // stop services
              sh "sudo /etc/init.d/vsftpd stop || true"
              sh "sudo /etc/init.d/ssh stop || true"
              sh "sudo /etc/init.d/apache2 stop || true"
            }
            break;
        }
      }
    }

    stage("Code coverage")
    {
      script
      {
        if (params.CODE_COVERAGE)
        {
          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          {
            // start services
            sh "sudo /etc/init.d/apache2 start"
            sh "sudo /etc/init.d/ssh start"
            sh "sudo /etc/init.d/vsftpd start"

            sh "make -C bar gcov_clean"
            TEST_STEPS.each { step -> sh "make -C bar gcov_${step}"+" "+TEST_SETTINGS }
  /*
            sh "make -C bar gcov_basic"           +" "+TEST_SETTINGS
            sh "make -C bar gcov_compress"        +" "+TEST_SETTINGS
            sh "make -C bar gcov_delta_compress"  +" "+TEST_SETTINGS
            sh "make -C bar gcov_crypt"           +" "+TEST_SETTINGS
            sh "make -C bar gcov_asymmetric_crypt"+" "+TEST_SETTINGS
            sh "make -C bar gcov_signatures"      +" "+TEST_SETTINGS
            sh "make -C bar gcov_split"           +" "+TEST_SETTINGS
            sh "make -C bar gcov_convert"         +" "+TEST_SETTINGS
            sh "make -C bar gcov_storage_file"    +" "+TEST_SETTINGS
            sh "make -C bar gcov_storage_ftp"     +" "+TEST_SETTINGS
            sh "make -C bar gcov_storage_scp"     +" "+TEST_SETTINGS
            sh "make -C bar gcov_storage_sftp"    +" "+TEST_SETTINGS
            sh "make -C bar gcov_storage_webdav"  +" "+TEST_SETTINGS
            sh "make -C bar gcov_index"           +" "+TEST_SETTINGS
            sh "make -C bar gcov_arguments"       +" "+TEST_SETTINGS
            sh "make -C bar gcov_config"          +" "+TEST_SETTINGS
            sh "make -C bar gcov_misc"            +" "+TEST_SETTINGS
  */
            sh "make -C bar gcov_html"

            // stop services
            sh "sudo /etc/init.d/vsftpd stop || true"
            sh "sudo /etc/init.d/ssh stop || true"
            sh "sudo /etc/init.d/apache2 stop || true"
          }

          publishHTML([allowMissing:          false,
                       alwaysLinkToLastBuild: false,
                       keepAll:               true,
                       reportDir:             'bar/coverage',
                       reportFiles:           'index.html',
                       reportName:            'Code Coverage Report',
                       reportTitles:          'BAR Code Coverage'
                      ]
                     )
        }
      }
    }

    stage("Profiling")
    {
      script
      {
        if (params.PROFILING)
        {
          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          {
            // start services
            sh "sudo /etc/init.d/apache2 start"
            sh "sudo /etc/init.d/ssh start"
            sh "sudo /etc/init.d/vsftpd start"

            sh "make -C bar gprof_clean"
            TEST_STEPS.each { step -> sh "make -C bar gprof_${step}"+" "+TEST_SETTINGS }
  /*
            sh "make -C bar gprof_basic"           +" "+TEST_SETTINGS
            sh "make -C bar gprof_compress"        +" "+TEST_SETTINGS
            sh "make -C bar gprof_delta_compress"  +" "+TEST_SETTINGS
            sh "make -C bar gprof_crypt"           +" "+TEST_SETTINGS
            sh "make -C bar gprof_asymmetric_crypt"+" "+TEST_SETTINGS
            sh "make -C bar gprof_signatures"      +" "+TEST_SETTINGS
            sh "make -C bar gprof_split"           +" "+TEST_SETTINGS
            sh "make -C bar gprof_convert"         +" "+TEST_SETTINGS
            sh "make -C bar gprof_storage_file"    +" "+TEST_SETTINGS
            sh "make -C bar gprof_storage_ftp"     +" "+TEST_SETTINGS
            sh "make -C bar gprof_storage_scp"     +" "+TEST_SETTINGS
            sh "make -C bar gprof_storage_webdav"  +" "+TEST_SETTINGS
            sh "make -C bar gprof_index"           +" "+TEST_SETTINGS
            sh "make -C bar gprof_arguments"       +" "+TEST_SETTINGS
            sh "make -C bar gprof_config"          +" "+TEST_SETTINGS
            sh "make -C bar gprof_misc"            +" "+TEST_SETTINGS
  */

            // stop services
            sh "sudo /etc/init.d/vsftpd stop || true"
            sh "sudo /etc/init.d/ssh stop || true"
            sh "sudo /etc/init.d/apache2 stop || true"
          }
        }
      }
    }
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'bar-test.log, barcontrol-test.log', allowEmptyArchive: true
    }
    cleanWs notFailBuild: true
  }
}

// main
properties([gitLabConnection('GitLab-DMZ'),
            [$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator',
                        artifactDaysToKeepStr: '3',
                        artifactNumToKeepStr: '3',
                        daysToKeepStr: '3',
                        numToKeepStr: '3'
                       ]
            ]
           ]
          )

try
{
  node('docker')
  {
    // build

    // execute tests
    tests()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
