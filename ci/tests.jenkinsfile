#!groovy

DOCKER_IMAGE_NAME='dockerregistry.macio.de:5000/backup_archiver:latest'

// tests
def tests()
{
  try
  {
    stage("Build")
    {
      docker.image(DOCKER_IMAGE_NAME).inside
      {
        checkout scm
        script
        {
          // configure
          sh "sh -x ./download-third-party-packages.sh --local-directory /media/extern"
          sh "sh -x ./download-third-party-packages.sh"
          sh "./configure"

          // make
//TODO
//          sh "make -j`nproc --ignore=1`"
          sh "make"
          sh "make -C bar gcov"
        }
      }
    }

    stage("Tests")
    {
      // run tests
      script
      {
        switch (params.BINARY_TYPE)
        {
          case "DEBUG":
            binaryExtension="-debug";
            break;
          case "VALGRIND":
            binaryExtension="-valgrind";
            break;
          case "GCOV":
            binaryExtension="-gcov";
            break;
          case "GPROF":
            binaryExtension="-gprof";
            break;
          default:
            binaryExtension="";
            break;
        }
        sh "echo binaryExtension="+binaryExtension
        switch (params.TEST_TYPE)
        {
          case "SMOKE":
          default:
            docker.image(DOCKER_IMAGE_NAME).inside
            {
              sh "rm -f bar-test.log"
              sh "make test_smoke-"+binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
            }
            break;
          case "FULL":
            docker.image(DOCKER_IMAGE_NAME).inside
            {
              sh "rm -f bar-test.log"
              sh "make test_basic"           +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_compress"        +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_delta_compress"  +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_crypt"           +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_asymmetric_crypt"+binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_signatures"      +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_split"           +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_convert"         +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_arguments"       +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
              sh "make test_misc"            +binaryExtension+" O='--verbose=1' | tee -a bar-test.log"
            }
            break;
        }
      }
    }
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'bar-test.log, barcontrol-test.log', allowEmptyArchive: true
    }
    cleanWs notFailBuild: true
  }
}

// main
properties([gitLabConnection('GitLab-DMZ'),
            [$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator',
                        artifactDaysToKeepStr: '3',
                        artifactNumToKeepStr: '3',
                        daysToKeepStr: '3',
                        numToKeepStr: '3'
                       ]
            ]
           ]
          )

try
{
  node('docker')
  {
    tests()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
