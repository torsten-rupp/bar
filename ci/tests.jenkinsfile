#!groovy

DOCKER_IMAGE_NAME_HOST='bar'
DOCKER_IMAGE_NAME_WIN32='bar-win32'

TEST_SETTINGS="TEST_INDEX_DATABASES=sqlite:intermediate/index.db \
               TEST_USER=jenkins \
               TEST_LOGIN_NAME=jenkins \
               TEST_PASSWORD=jenkins \
               TEST_BASE_DIR=/home/jenkins \
               TEST_PUBLIC_KEY_SSH=/home/jenkins/.ssh/id_rsa.pub TEST_PRIVATE_KEY_SSH=/home/jenkins/.ssh/id_rsa \
               TEST_MOUNT_OPERATIONS=no \
               TEST_FTP_FILE_PATH=/home/jenkins/intermediate \
               TEST_SCP_FILE_PATH=/home/jenkins/intermediate \
               TEST_WEBDAV_FILE_PATH=/var/www/intermediate \
               TEST_SMB_SHARE=jenkins \
               TEST_SMB_FILE_PATH=/home/jenkins/intermediate \
              "

TEST_STEPS = ["basic",
              "compress",
              "delta_compress",
              "crypt",
              "asymmetric_crypt",
              "signatures",
              "split",
              "convert",
              "image",
              "storage_file",
// TODO: instable
              "storage_ftp",
              "storage_scp",
// TODO: instable
              "storage_sftp",
              "storage_webdav",
              "storage_webdavs",
              "storage_smb",
              "storage_optical",
              "index",
              "server",
              "master_slave",
              "arguments",
              "config",
              "misc"
             ];

// tests
def tests()
{
  try
  {
    timestamps
    {
      stage("Checkout")
      {
        docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
        {
          // checkout sources
          checkout scm
        }
      }

      stage("Build host")
      {
        docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
        {
          script
          {
            sh "install -d host"

            // get external packages
            sh "(cd host; ../download-third-party-packages.sh --patch-directory ../misc --local-directory /media/extern)"
            sh "(cd host; ../download-third-party-packages.sh --patch-directory ../misc)"

            // configure
            sh "(cd host; \
                 ../configure \
                   --host=x86_64-linux \
                   --build=x86_64-linux \
                   --disable-debug-thread-crash-handlers \
                ) \
               "

            // make (Note: avoid race condition by not create dependencies in parallel)
            sh "(cd host; make depend)"
            if (params.PARALLEL_BUILD)
            {
              sh "(cd host; make -j`nproc --ignore=1`)"
            }
            else
            {
              sh "(cd host; make -j1)"
            }
          }
        }
      }

      stage("Build Win32")
      {
        docker.image(DOCKER_IMAGE_NAME_WIN32).inside('')
        {
          script
          {
            if (params.BUILD_WIN32)
            {
              sh "install -d win32"

              // get external packages
              sh "(cd win32; ../download-third-party-packages.sh --patch-directory ../misc --local-directory /media/extern)"
              sh "(cd win32; ../download-third-party-packages.sh --patch-directory ../misc)"

              // configure
              sh "(cd win32; \
                   ../configure \
                     --host=x86_64-w64-mingw32 \
                     --build=x86_64-linux \
                     --enable-link-static \
                     --disable-link-dynamic \
                     --disable-debug-thread-crash-handlers \
                     \
                     --disable-smbclient \
                     --disable-bfd \
                  ) \
                "

              // make (Note: avoid race condition by not create dependencies in parallel)
              sh "(cd win32; make depend)"
              if (params.PARALLEL_BUILD)
              {
                sh "(cd win32; make -j`nproc --ignore=1`)"
              }
              else
              {
                sh "(cd win32; make -j1)"
              }
            }
          }
        }
      }

      stage("Distribution")
      {
        docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
        {
          script
          {
            if (params.DISTRIBUTION)
            {
              sh "(cd host; make distribution)"

              sh "(cd host; tar xf backup-archiver*.tar.bz2)"
              sh "(cd host/backup-archiver*; ./download-third-party-packages.sh --local-directory /media/extern)"
              sh "(cd host/backup-archiver*; ./download-third-party-packages.sh)"
              sh "(cd host/backup-archiver*; ./configure)"
              sh "(cd host/backup-archiver*; make depend)"
              if (params.PARALLEL_BUILD)
              {
                sh "(cd host/backup-archiver*; make -j`nproc --ignore=1`)"
              }
              else
              {
                sh "(cd host/backup-archiver*; make -j1)"
              }
            }
          }
        }
      }

      timeout(time: 240, unit: 'MINUTES')
      {
        stage("Tests")
        {
          // run tests
          script
          {
            if (params.TESTS)
            {
              switch (params.BINARY_TYPE)
              {
                case "DEBUG":
                  binaryExtension="-debug";
                  break;
                case "VALGRIND":
                  binaryExtension="-valgrind";
                  break;
                case "GCOV":
                  binaryExtension="-gcov";
                  break;
                case "GPROF":
                  binaryExtension="-gprof";
                  break;
                default:
                  binaryExtension="";
                  break;
              }
//              unstash "host"
//              unstash "win32"
//sh "wine bin/bar-debug.exe --xhelp"
sh "echo binaryExtension="+binaryExtension
              switch (params.TEST_TYPE)
              {
                case "SMOKE":
                default:
                  docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
                  {
                    // start services
                    sh "sudo -n /etc/init.d/apache2 start"
                    sh "sudo -n /etc/init.d/ssh start"
                    sh "sudo -n /etc/init.d/vsftpd start"
                    sh "sudo -n /etc/init.d/smbd start"

                    // work-around docker bug? Cannot create container with non-root files in it?
                    sh "sudo -n /bin/chown -R jenkins:jenkins /home/jenkins"
                    sh "sudo -n /bin/chown -R test:test /var/www"

                    sh "rm -f bar-test.log"
                    // Note: "sh" is not the system sh. Thus wrap command with bash to enable pipe fail flag.
                    sh "bash -o pipefail -c 'ulimit -c unlimited && (cd host; make tests_smoke-"+binaryExtension+" "+TEST_SETTINGS+" O=\'--verbose=1\') | tee -a bar-test.log'"

                    // stop services
                    sh "sudo -n /etc/init.d/smbd stop || true"
                    sh "sudo -n /etc/init.d/vsftpd stop || true"
                    sh "sudo -n /etc/init.d/ssh stop || true"
                    sh "sudo -n /etc/init.d/apache2 stop || true"
                  }
                  break;
                case "FULL":
                  docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
                  {
                    // start services
                    sh "sudo -n /etc/init.d/apache2 start"
                    sh "sudo -n /etc/init.d/ssh start"
                    sh "sudo -n /etc/init.d/vsftpd start"
                    sh "sudo -n /etc/init.d/smbd start"

                    // work-around docker bug? Cannot create container with non-root files in it?
                    sh "sudo -n /bin/chown -R jenkins:jenkins /home/jenkins"
                    sh "sudo -n /bin/chown -R test:test /var/www"

                    sh "rm -f bar-test.log"
                    // Note: "sh" is not the system sh. Thus wrap command with bash to enable pipe fail flag.
                    TEST_STEPS.each { step -> sh "bash -o pipefail -c 'ulimit -c unlimited && (cd host; make tests_${step}"+binaryExtension+" "+TEST_SETTINGS+" O=\'--verbose=1\') | tee -a bar-test.log'" }

                    // stop services
                    sh "sudo -n /etc/init.d/smbd stop || true"
                    sh "sudo -n /etc/init.d/vsftpd stop || true"
                    sh "sudo -n /etc/init.d/ssh stop || true"
                    sh "sudo -n /etc/init.d/apache2 stop || true"
                  }
                  break;
              }
            }
          }
        }
      }

      timeout(time: 480, unit: 'MINUTES')
      {
        stage("Valgrind")
        {
          // run tests
          script
          {
            if (params.VALGRIND)
            {
              docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
              {
                // start services
                sh "sudo -n /etc/init.d/apache2 start"
                sh "sudo -n /etc/init.d/ssh start"
                sh "sudo -n /etc/init.d/vsftpd start"
                sh "sudo -n /etc/init.d/smbd start"

                // work-around docker bug? Cannot create container with non-root files in it?
                sh "sudo -n /bin/chown -R jenkins:jenkins /home/jenkins"
                sh "sudo -n /bin/chown -R test:test /var/www"

                sh "rm -f bar-test-valgrind.log"
                // Note: "sh" is not the system sh. Thus wrap command with bash to enable pipe fail flag.
                sh "bash -o pipefail -c '(cd host; make tests_smoke-valgrind "+TEST_SETTINGS+" O=\'--verbose=1\') | tee -a bar-test-valgrind.log'"

                // stop services
                sh "sudo -n /etc/init.d/smbd stop || true"
                sh "sudo -n /etc/init.d/vsftpd stop || true"
                sh "sudo -n /etc/init.d/ssh stop || true"
                sh "sudo -n /etc/init.d/apache2 stop || true"
              }
            }
          }
        }
      }

      timeout(time: 300, unit: 'MINUTES')
      {
        stage("Code coverage")
        {
          script
          {
            if (params.CODE_COVERAGE)
            {
              docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
              {
                // start services
                sh "sudo -n /etc/init.d/apache2 start"
                sh "sudo -n /etc/init.d/ssh start"
                sh "sudo -n /etc/init.d/vsftpd start"
                sh "sudo -n /etc/init.d/smbd start"

                // work-around docker bug? Cannot create container with non-root files in it?
                sh "sudo -n /bin/chown -R jenkins:jenkins /home/jenkins"
                sh "sudo -n /bin/chown -R test:test /var/www"

                sh "make -C host/bar gcov_clean"
                TEST_STEPS.each { step -> sh "ulimit -c unlimited && make -C host/bar gcov_${step}"+" "+TEST_SETTINGS }
                sh "make -C host/bar gcov_html"

                // stop services
                sh "sudo -n /etc/init.d/smbd stop || true"
                sh "sudo -n /etc/init.d/vsftpd stop || true"
                sh "sudo -n /etc/init.d/ssh stop || true"
                sh "sudo -n /etc/init.d/apache2 stop || true"
              }

              publishHTML([allowMissing:          false,
                           alwaysLinkToLastBuild: false,
                           keepAll:               true,
                           reportDir:             'host/bar/coverage',
                           reportFiles:           'index.html',
                           reportName:            'Code Coverage Report',
                           reportTitles:          'BAR Code Coverage'
                          ]
                         )
            }
          }
        }
      }

      timeout(time: 240, unit: 'MINUTES')
      {
        stage("Profiling")
        {
          script
          {
            if (params.PROFILING)
            {
              docker.image(DOCKER_IMAGE_NAME_HOST).inside('')
              {
                // start services
                sh "sudo -n /etc/init.d/apache2 start"
                sh "sudo -n /etc/init.d/ssh start"
                sh "sudo -n /etc/init.d/vsftpd start"
                sh "sudo -n /etc/init.d/smbd start"

                // work-around docker bug? Cannot create container with non-root files in it?
                sh "sudo -n /bin/chown -R jenkins:jenkins /home/jenkins"
                sh "sudo -n /bin/chown -R test:test /var/www"

                sh "make -C host/bar gprof_clean"
                TEST_STEPS.each { step -> sh "ulimit -c unlimited && make -C host/bar gprof_${step}"+" "+TEST_SETTINGS }

                // stop services
                sh "sudo -n /etc/init.d/smbd stop || true"
                sh "sudo -n /etc/init.d/vsftpd stop || true"
                sh "sudo -n /etc/init.d/ssh stop || true"
                sh "sudo -n /etc/init.d/apache2 stop || true"
              }
            }
          }
        }
      }
    }
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'bar-test.log, bar-test-valgrind.log, barcontrol-test.log, /var/log/sshd.log, /var/log/vsftpd.log, core*', allowEmptyArchive: true
//      archiveArtifacts artifacts: 'win32/**, bar-test.log, bar-test-valgrind.log, barcontrol-test.log, /var/log/sshd.log, /var/log/vsftpd.log, core*', allowEmptyArchive: true
    }

    cleanWs notFailBuild: true
  }
}

// main
/*
properties([gitLabConnection('GitLab'),
            [$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator',
                        artifactDaysToKeepStr: '3',
                        artifactNumToKeepStr: '3',
                        daysToKeepStr: '3',
                        numToKeepStr: '3'
                       ]
            ]
           ]
          )
*/

try
{
  node('docker')
  {
    // build

    // execute tests
    tests()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
