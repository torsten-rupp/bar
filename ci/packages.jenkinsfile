#!groovy

DOCKER_IMAGE_NAME='bar:build'
DOCKER_IMAGE_NAME_RPM='bar-centos-x86_64:6'
DOCKER_IMAGE_NAME_DEB='bar-debian-x86_64:8'
DOCKER_IMAGE_NAME_WIN32='bar-mingw32'

// build
def build()
{
  try
  {
    stage("Distribution")
    {
      // Note: distribution file has to be created with root ownership
      docker.image(DOCKER_IMAGE_NAME).inside("-u root:root")
      {
      timestamps
      {
        checkout scm
        script
        {
          // configure
          sh "./download-third-party-packages.sh --local-directory /media/extern"
          sh "./download-third-party-packages.sh"
          sh "./configure"

          // make
//TODO
//          sh "make -j`nproc --ignore=1`"
//          sh "make"

          sh "make dist"
        }
      }
      }
    }

    stage("RPM package")
    {
      if (params.PACKAGE_RPM)
      {
        docker.image(DOCKER_IMAGE_NAME_RPM).inside("-u root:root")
        {
          script
          {
            sh "make build_rpm"
          }
        }
      }
    }
    stage("DEB package")
    {
      if (params.PACKAGE_DEB)
      {
        docker.image(DOCKER_IMAGE_NAME_DEB).inside("-u root:root")
        {
          script
          {
            sh "make build_deb"
          }
        }
      }
    }
    stage("Win32 package")
    {
      if (params.PACKAGE_WIN32)
      {
        docker.image(DOCKER_IMAGE_NAME_WIN32).inside("-u root:root")
        {
          script
          {
            // build with prepared wine setup or normal
            sh 'if test -f /wine.tar.bz2; then \
                  wineDir=`mktemp -d /tmp/wine-XXXXXX`; \
                  (cd $wineDir; tar xjf /wine.tar.bz2); \
                  WINEPREFIX=$wineDir/.wine make build_win32; \
                  rm -rf $wineDir; \
                else \
                  make build_win32; \
                fi \
               ';
          }
        }
      }
    }
    stage("GUI package")
    {
      docker.image(DOCKER_IMAGE_NAME).inside("")
      {
        script
        {
          if (params.PACKAGE_GUI)
          {
            sh "make gui"
          }
        }
      }
    }
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'backup-archiver*.tar.bz2, *.rpm, *.deb, *.exe, *.zip', allowEmptyArchive: true
    }
    cleanWs notFailBuild: true
  }
}

// main
/*
properties([gitLabConnection('GitLab-DMZ'),
            [$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator',
                        artifactDaysToKeepStr: '3',
                        artifactNumToKeepStr: '3',
                        daysToKeepStr: '3',
                        numToKeepStr: '3'
                       ]
            ]
           ]
          )
*/
try
{
  node('docker')
  {
    build()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
