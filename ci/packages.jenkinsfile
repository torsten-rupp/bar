#!groovy

DOCKER_IMAGE_NAME='bar'
DOCKER_IMAGE_NAME_RPM='bar-centos-x86_64:7'
DOCKER_IMAGE_NAME_DEB='bar-debian-x86_64:8'
DOCKER_IMAGE_NAME_WIN32='bar-mingw32'

// build
def build()
{
  try
  {
    stage("Distribution")
    {
      checkout scm
      docker.image(DOCKER_IMAGE_NAME).inside
      {
        checkout scm
        script
        {
          // configure
          sh "./download-third-party-packages.sh --local-directory /media/extern"
          sh "./download-third-party-packages.sh"
          sh "./configure"

          // make
//TODO
//            sh "make -j`nproc --ignore=1`"
          sh "make"

          sh "make dist"
        }
      }
    }

    stage("RPM package")
    {
      if (params.PACKAGE_RPM)
      {
        docker.image(DOCKER_IMAGE_NAME_RPM).inside
        {
          script
          {
            sh "make build_rpm"
            if (params.TEST_PACKAGES)
            {
              sh "make install_test_rpm"
            }
          }
        }
      }
    }
    stage("DEB package")
    {
      if (params.PACKAGE_DEB)
      {
        docker.image(DOCKER_IMAGE_NAME_DEB).inside
        {
          script
          {
            sh "make build_deb"
            if (params.TEST_PACKAGES)
            {
              sh "make install_test_deb"
            }
          }
        }
      }
    }
    stage("Win32 package")
    {
      if (params.PACKAGE_WIN32)
      {
        docker.image(DOCKER_IMAGE_NAME_WIN32).inside
        {
          script
          {
            sh "make build_win32";
            if (params.TEST_PACKAGES)
            {
              sh "make install_test_win32"
            }
          }
        }
      }
    }
    stage("GUI package")
    {
      docker.image(DOCKER_IMAGE_NAME).inside
      {
        script
        {
          if (params.PACKAGE_GUI)
          {
            sh "make gui"
          }
        }
      }
    }
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'backup-archiver*.tar.bz2, *.rpm, *.deb, *.exe, *.zip', allowEmptyArchive: true
    }
    cleanWs notFailBuild: true
  }
}

// main
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '',
                                      artifactNumToKeepStr: '',
                                      daysToKeepStr: '3',
                                      numToKeepStr: '3'
                                     )
                          )
           ]
          )

try
{
  node('docker')
  {
    build()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
