#!groovy

DOCKER_IMAGE_NAME='bar'

TEST_SETTINGS="TEST_INDEX_DATABASES=sqlite:intermediate/index.db \
               TEST_USER=jenkins \
               TEST_LOGIN_NAME=test \
               TEST_PASSWORD=test \
               TEST_BASE_DIR=/home/jenkins \
               TEST_PUBLIC_KEY_SSH=/home/test/.ssh/id_rsa.pub TEST_PRIVATE_KEY_SSH=/home/test/.ssh/id_rsa \
               TEST_IMAGE_OPERATIONS=no \
              "

// build
def build()
{
  try
  {
    timestamps
    {
      timeout(time: 120, unit: 'MINUTES')
      {
        stage("Checkout")
        {
          checkout scm
        }

        stage("Configure")
        {
//          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          docker.image(DOCKER_IMAGE_NAME).inside('')
          {
            script
            {
              // configure
              sh "./download-third-party-packages.sh --local-directory /media/extern"
              sh "./download-third-party-packages.sh"
              sh "./configure"
            }
          }
        }

        stage("Build")
        {
          docker.image(DOCKER_IMAGE_NAME).inside('')
          {
            script
            {
              // make (Note: avoid race condition by not creating dependencies in parallel)
              sh "make depend"
              sh "make -j`nproc --ignore=1`"
              if (params.CODE_COVERAGE)
              {
                sh "make -C bar bar-gcov"
              }
              if (params.PROFILING)
              {
                sh "make -C bar bar-gprof"
              }
              sh "make dist"
            }
          }
        }
      }

      switch (params.BINARY_TYPE)
      {
        case "":
          binaryExtension="";
          break;
        case "DEBUG":
          binaryExtension="-debug";
          break;
        case "VALGRIND":
          binaryExtension="-valgrind";
          break;
        case "GCOV":
          binaryExtension="-gcov";
          break;
        case "GPROF":
          binaryExtension="-gprof";
          break;
        default:
          binaryExtension="-debug";
          break;
      }
      timeout(time: 60, unit: 'MINUTES')
      {
        stage("Smoke tests")
        {
          // run tests
          script
          {
            docker.image(DOCKER_IMAGE_NAME).inside('')
            {
              // work-around docker bug? Cannot create container with non-root files in it?
              sh "sudo -n /bin/chown -R jenkins:jenkins /home/jenkins"
              sh "sudo -n /bin/chown -R test:test /var/www"

              sh "make tests_smoke"+binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1'"
            }
          }
        }
      }
    }
  }
  catch (error)
  {
    echo "ERROR: ${error.message}"
    currentBuild.result = 'FAILED'
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'backup-archiver*.tar.bz2, *.rpm, *.deb', allowEmptyArchive: true
    }
    cleanWs notFailBuild: true
  }
}

// main
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '',
                                      artifactNumToKeepStr: '',
                                      daysToKeepStr: '5',
                                      numToKeepStr: '3'
                                     )
                          )
           ]
          )

try
{
  node('docker')
  {
    build()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
