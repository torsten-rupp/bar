#!groovy

DOCKER_IMAGE_NAME='bar:build'
DOCKER_IMAGE_NAME_RPM='bar-centos-x86_64:6'
DOCKER_IMAGE_NAME_DEB='bar-debian-x86_64:8'
DOCKER_IMAGE_NAME_WIN32='bar-mingw32'

TEST_SETTINGS="TEST_INDEX_DATABASES=sqlite:intermediate/index.db TEST_USER=jenkins TEST_LOGIN_NAME=test TEST_PASSWORD=test TEST_BASE_DIR=/home/jenkins TEST_PUBLIC_KEY_SSH=/home/test/.ssh/id_rsa.pub TEST_PRIVATE_KEY_SSH=/home/test/.ssh/id_rsa TEST_IMAGE_OPERATIONS=no"

TEST_STEPS = ["basic",
              "compress",
              "delta_compress",
              "crypt",
              "asymmetric_crypt",
              "signatures",
              "split",
              "convert",
              "storage_file",
// TODO: instable
              "storage_ftp",
              "storage_scp",
              "storage_sftp",
              "storage_webdav",
              "index",
              "server",
              "master_slave",
              "arguments",
              "config",
              "misc"
             ];

// build
def build()
{
  try
  {
    timestamps
    {
      timeout(time: 120, unit: 'MINUTES')
      {
        stage("Build")
        {
//          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          docker.image(DOCKER_IMAGE_NAME).inside('')
          {
            checkout scm
            script
            {
              // configure
              sh "./download-third-party-packages.sh --local-directory /media/extern"
              sh "./download-third-party-packages.sh"
              sh "./configure"

              // make (Note: avoid race condition by not creating dependencies in parallel)
              sh "make depend"
              sh "make -j`nproc --ignore=1`"
              if (params.CODE_COVERAGE)
              {
                sh "make -C bar bar-gcov"
              }
              if (params.PROFILING)
              {
                sh "make -C bar bar-gprof"
              }
              sh "make dist"
            }
          }
        }
      }

      switch (params.BINARY_TYPE)
      {
        case "":
          binaryExtension="";
          break;
        case "DEBUG":
          binaryExtension="-debug";
          break;
        case "VALGRIND":
          binaryExtension="-valgrind";
          break;
        case "GCOV":
          binaryExtension="-gcov";
          break;
        case "GPROF":
          binaryExtension="-gprof";
          break;
        default:
          binaryExtension="-debug";
          break;
      }
      timeout(time: 60, unit: 'MINUTES')
      {
        stage("Smoke tests")
        {
          // run tests
          script
          {
//            docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
            docker.image(DOCKER_IMAGE_NAME).inside('')
            {
              sh "make test_smoke"+binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1'"
            }
          }
        }
      }
    }
  }
  catch (error)
  {
    echo "ERROR: ${error.message}"
    currentBuild.result = 'FAILED'
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'backup-archiver*.tar.bz2, *.rpm, *.deb', allowEmptyArchive: true
    }
    cleanWs notFailBuild: true
  }
}

// main
/*
properties([gitLabConnection('GitLab-DMZ'),
            [$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator',
                        artifactDaysToKeepStr: '3',
                        artifactNumToKeepStr: '3',
                        daysToKeepStr: '3',
                        numToKeepStr: '3'
                       ]
            ]
           ]
          )
*/

try
{
  node('docker')
  {
    build()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
