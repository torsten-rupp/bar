#!groovy

DOCKER_IMAGE_NAME='dockerregistry.macio.de:5000/backup_archiver:latest'
DOCKER_IMAGE_NAME_RPM='dockerregistry.macio.de:5000/backup_archiver_rpm:latest'
DOCKER_IMAGE_NAME_DEB='dockerregistry.macio.de:5000/backup_archiver_deb:latest'
DOCKER_IMAGE_NAME_WIN32='dockerregistry.macio.de:5000/backup_archiver_win32:latest'

TEST_SETTINGS="TEST_INDEX_DATABASES=sqlite:intermediate/index.db TEST_LOGIN_NAME=test TEST_PASSWORD=test TEST_BASE_DIR=/home/test TEST_PUBLIC_KEY_SSH=/home/test/.ssh/id_rsa.pub TEST_PRIVATE_KEY_SSH=/home/test/.ssh/id_rsa TEST_IMAGE_OPERATIONS=no"

TEST_STEPS = ["basic",
              "compress",
              "delta_compress",
              "crypt",
              "asymmetric_crypt",
              "signatures",
              "split",
              "convert",
              "storage_file",
              "storage_ftp",
              "storage_scp",
              "storage_sftp",
              "storage_webdav",
              "index",
              "server",
              "master_slave",
              "arguments",
              "config",
              "misc"
             ];

// build
def build()
{
  try
  {
    stage("Build")
    {
      docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
      {
        checkout scm
        script
        {
          // configure
          sh "./download-third-party-packages.sh --local-directory /media/extern"
          sh "./download-third-party-packages.sh"
          sh "./configure"

          // make (Note: avoid race condition by not creating dependencies in parallel)
          sh "make depend"
          sh "make -j`nproc --ignore=1`"
          if (params.CODE_COVERAGE)
          {
            sh "make -C bar bar-gcov"
          }
          if (params.PROFILING)
          {
            sh "make -C bar bar-gprof"
          }
          sh "make dist"
        }
      }
    }

    switch (params.TEST_TYPE)
    {
      case "SMOKE":
      default:
        stateName="Smoke tests"
        break;
      case "FULL":
        stateName="Tests"
        break;
    }
    stage(stateName)
    {
      // run tests
      script
      {
        if (   params.TESTS
            || (env.BRANCH_NAME == "master")
           )
        {
          switch (params.BINARY_TYPE)
          {
            case "DEBUG":
              binaryExtension="-debug";
              break;
            case "VALGRIND":
              binaryExtension="-valgrind";
              break;
            case "GCOV":
              binaryExtension="-gcov";
              break;
            case "GPROF":
              binaryExtension="-gprof";
              break;
            default:
              binaryExtension="";
              break;
          }
          sh "echo binaryExtension="+binaryExtension
          switch (params.TEST_TYPE)
          {
            case "SMOKE":
            default:
              docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
              {
                sh "make test_smoke"+binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1'"
              }
              break;
            case "FULL":
              docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
              {
                // start services
                sh "sudo /etc/init.d/apache2 start"
                sh "sudo /etc/init.d/ssh start"
                sh "sudo /etc/init.d/vsftpd start"

                TEST_STEPS.each { step -> sh "make test_${steps}"+binaryExtension+" "+TEST_SETTINGS+" O='--verbose=1'" }

                // stop services
                sh "sudo /etc/init.d/vsftpd stop || true"
                sh "sudo /etc/init.d/ssh stop || true"
                sh "sudo /etc/init.d/apache2 stop || true"
              }
              break;
          }
        }
        else
        {
          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          {
            sh "make test_smoke-debug "+TEST_SETTINGS+" O='--verbose=1'"
          }
        }
      }
    }

    stage("Code coverage")
    {
      script
      {
        if (   params.CODE_COVERAGE
            || (env.BRANCH_NAME == "master")
           )
        {
          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          {
            // start services
            sh "sudo /etc/init.d/apache2 start"
            sh "sudo /etc/init.d/ssh start"
            sh "sudo /etc/init.d/vsftpd start"

            sh "make -C bar gcov_clean"
            TEST_STEPS.each { step -> sh "make -C bar gcov_${step}"+" "+TEST_SETTINGS }
            sh "make -C bar gcov_html"

            // stop services
            sh "sudo /etc/init.d/vsftpd stop || true"
            sh "sudo /etc/init.d/ssh stop || true"
            sh "sudo /etc/init.d/apache2 stop || true"
          }

          publishHTML([allowMissing:          false,
                       alwaysLinkToLastBuild: false,
                       keepAll:               true,
                       reportDir:             'bar/coverage',
                       reportFiles:           'index.html',
                       reportName:            'Code Coverage Report',
                       reportTitles:          'BAR Code Coverage'
                      ]
                     )
        }
      }
    }

    stage("Profiling")
    {
      script
      {
        if (   params.PROFILING
            || (env.BRANCH_NAME == "master")
           )
        {
          docker.image(DOCKER_IMAGE_NAME).inside('-u root --privileged')
          {
            // start services
            sh "sudo /etc/init.d/apache2 start"
            sh "sudo /etc/init.d/ssh start"
            sh "sudo /etc/init.d/vsftpd start"

            sh "make -C bar gprof_clean"
            TEST_STEPS.each { step -> sh "make -C bar gprof_${step}"+" "+TEST_SETTINGS }

            // stop services
            sh "sudo /etc/init.d/vsftpd stop || true"
            sh "sudo /etc/init.d/ssh stop || true"
            sh "sudo /etc/init.d/apache2 stop || true"
          }
        }
      }
    }
  }
  catch (error)
  {
    echo "ERROR: ${error.message}"
    currentBuild.result = 'FAILED'
  }
  finally
  {
    script
    {
      archiveArtifacts artifacts: 'backup-archiver*.tar.bz2, *.rpm, *.deb', allowEmptyArchive: true
      if (params.TESTS)
      {
        archiveArtifacts artifacts: 'bar/bar-test.log', allowEmptyArchive: true
      }
      if (params.CODE_COVERAGE)
      {
        archiveArtifacts artifacts: 'bar/coverage/*', allowEmptyArchive: true
      }
      if (params.PROFILING)
      {
//        archiveArtifacts artifacts: '', allowEmptyArchive: true
      }
    }
    cleanWs notFailBuild: true
  }
}

// main
properties([gitLabConnection('GitLab-DMZ'),
            [$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator',
                        artifactDaysToKeepStr: '3',
                        artifactNumToKeepStr: '3',
                        daysToKeepStr: '3',
                        numToKeepStr: '3'
                       ]
            ]
           ]
          )

try
{
  node('docker')
  {
    build()
  }
}
catch (error)
{
  echo "ERROR: ${error.message}"
  currentBuild.result = 'FAILED'
}
