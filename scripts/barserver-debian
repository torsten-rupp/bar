#! /bin/sh
#
#	/etc/rc.d/init.d/barserver
#
#	BAR server start script
#	Copyright 2007-2019 Torsten Rupp
#

### BEGIN INIT INFO
# Provides:          barserver
# Required-Start:    $syslog $local_fs $network $remote_fs
# Required-Stop:     $syslog $local_fs $network $remote_fs
# Should-Start:      $time ypbind sendmail
# Should-Stop:       $time ypbind sendmail
# Default-Start:     3 5
# Default-Stop:      0 1 2 4 6
# Short-Description: BAR server daemon
# Description:       Backup ARchiver server for backup/restore
### END INIT INFO

# Author: Matthias Albert <matthias@linux4experts.de>

PATH=/usr/sbin:/usr/bin:/sbin:/bin
NAME=bar
BAR_BIN=/usr/bin/$NAME
BAR_CONFIG_FILENAME=/etc/bar/bar.cfg
BAR_PID_FILENAME=/run/$NAME.pid
BAR_ARGS="--config $BAR_CONFIG_FILENAME --daemon --pid-file=$BAR_PID_FILENAME --verbose=0 --quiet"
BAR_SCRIPT_FILENAME=/etc/init.d/barserver
DESCRIPTION="barserver"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# check for binaries
if test ! -x $BAR_BIN; then
  echo "$BAR_BIN not installed"
  exit 5
fi

# check for configuration file
if test ! -r $BAR_CONFIG_FILENAME; then
  echo "$BAR_CONFIG_FILENAME cannot be read"
  exit 6
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $BAR_PID_FILENAME --exec $BAR_BIN --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $BAR_PID_FILENAME --exec $BAR_BIN -- \
		$BAR_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $BAR_PID_FILENAME --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $BAR_BIN
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $BAR_PID_FILENAME
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $BAR_PID_FILENAME --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESCRIPTION" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESCRIPTION" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESCRIPTION" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESCRIPTION" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
        status_of_proc -p $BAR_PID_FILENAME $BAR_BIN $NAME && exit 0 || exit $?
        ;;
  *)
	echo "Usage: $BAR_SCRIPT_FILENAME {start|stop|restart|force-reload|status}" >&2
	exit 3
	;;
esac

:
