#
# Contents: Makefile for bar
# Systems: all
#
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM                = @PLATFORM@

VALGRIND_ERROR_EXITCODE = 123
TESTCODE_EXITCODE       = 124

#------------------------------------ paths ----------------------------------

ROOT_DIR               = $(abspath @srcdir@/..)
SOURCE_DIR             = $(abspath @srcdir@)
CONFIG_DIR             = @CONFIG_DIR@
TLS_DIR                = @TLS_DIR@
BUILD_DIR              = $(CURDIR)/..

ifeq ($(DESTDIR),)
INSTALL_DIR            = $(if $(prefix),$(prefix),@INSTALL_DIR@)
INSTALL_BIN_DIR        = $(if $(bindir),$(bindir),@INSTALL_BIN_DIR@)
INSTALL_LOCALE_DIR     = $(if $(datadir),$(datadir)/locale,@LOCALE_DIR@)
INSTALL_ETC_DIR        = $(if $(sysconfdir),$(sysconfdir),/etc)
INSTALL_CONFIG_DIR     = $(if $(sysconfdir),$(sysconfdir)/bar,@CONFIG_DIR@)
INSTALL_MAN_DIR        = $(if $(mandir),$(mandir),@MAN_DIR@)
else
INSTALL_DIR            = @INSTALL_DIR@
INSTALL_BIN_DIR        = @INSTALL_BIN_DIR@
INSTALL_LOCALE_DIR     = @LOCALE_DIR@
INSTALL_ETC_DIR        = /etc
INSTALL_CONFIG_DIR     = @CONFIG_DIR@
INSTALL_MAN_DIR        = @MAN_DIR@
endif
INSTALL_TLS_DIR        = @TLS_DIR@
INSTALL_CONFIG_SUB_DIR = bar

TEST_DATA_DIR          ?= test

WINE_C_DRIVE           = @WINE_C_DRIVE@

#--------------------------------- tool chain --------------------------------

# shell in Makefile must be bash with pipe-fail handling
SHELL                      = bash -o pipefail

CTAGS_FLAGS                =

CPP                        = @CPP@
CC                         = @CC@
#TODO
#CC_FLAGS                   = @CC_FLAGS@ -g -D_FORTIFY_SOURCE=2
CC_FLAGS                   = @CC_FLAGS@ -g
CC_WARN_FLAGS              = @CC_WARN_FLAGS@
CXX                        = @CXX@
#TODO
#CXX_FLAGS                  = @CXX_FLAGS@ -g -D_FORTIFY_SOURCE=2
CXX_FLAGS                  = @CXX_FLAGS@ -std=c++11 -g
CXX_WARN_FLAGS             = @CXX_WARN_FLAGS@
CC_FLAGS_RELEASE           = @CC_FLAGS_RELEASE@
CC_FLAGS_DEBUG             = @CC_FLAGS_DEBUG@ -finstrument-functions
#-fno-sanitize-recover=all -fstack-protector-all -fsanitize=undefined
CC_FLAGS_OPTIMIZE          = @CC_FLAGS_OPTIMIZE@
CC_FLAGS_OPTIMIZE_RELEASE  = @CC_FLAGS_OPTIMIZE_RELEASE@
CC_FLAGS_OPTIMIZE_DEBUG    = @CC_FLAGS_OPTIMIZE_DEBUG@
CC_FLAGS_OPTIMIZE_VALGRIND = @CC_FLAGS_OPTIMIZE_VALGRIND@
CC_FLAGS_GCOV              = @CC_FLAGS_GCOV@ -DGCOV -fprofile-arcs -ftest-coverage -fprofile-update=atomic
CC_FLAGS_GPROF             = @CC_FLAGS_GPROF@ -DGPROF -pg
CC_FLAGS_VALGRIND          = @CC_FLAGS_VALGRIND@ -fno-builtin
CC_DEFINES                 = PLATFORM_$(PLATFORM) @CC_DEFINES@ _GNU_SOURCE _LONG_LONG 'tr(...)=Misc_translate(__VA_ARGS__)'
CC_DEFINES_RELEASE         = @CC_DEFINES_RELEASE@
CC_DEFINES_DEBUG           = @CC_DEFINES_DEBUG@
CC_DEFINES_VALGRIND        = @CC_DEFINES_VALGRIND@ VALGRIND
# -D_LONG_LONG
CC_INCLUDES                = . @CC_INCLUDES@ $(SOURCE_DIR)
ifdef WERROR
  CC_FLAGS   += -Werror
  CC_DEFINES += WERROR
endif

LD                         = $(if @CXX@,@CXX@,@CC@)
LD_FLAGS                   = @LD_FLAGS@
LD_FLAGS_RELEASE           = @LD_FLAGS_RELEASE@
LD_FLAGS_DEBUG             = @LD_FLAGS_DEBUG@ -Wl,-wrap,pthread_create
ifneq (@HEAPVIEW_DIR@,)
LD_FLAGS_DEBUG             += -Wl,-wrap,malloc -Wl,-wrap,calloc -Wl,-wrap,realloc -Wl,-wrap,free
else
LD_FLAGS_DEBUG             +=
endif
LD_FLAGS_GCOV              = @LD_FLAGS_GCOV@ -Wl,-wrap,pthread_create -fprofile-arcs
LD_FLAGS_GPROF             = @LD_FLAGS_GCOV@ -Wl,-wrap,pthread_create -pg
LD_FLAGS_VALGRIND          = @LD_FLAGS_VALGRIND@
LD_LIBRARY_PATHS           = @LIBRARY_PATHS@
ifneq (@HEAPVIEW_DIR@,)
  LD_LIBRARY_PATHS += @HEAPVIEW_DIR@
endif
LD_LIBRARIES               = @LIBRARIES@
LD_STATIC_LIBRARIES        = @STATIC_LIBRARIES@
ifneq (@HEAPVIEW_DIR@,)
  LD_STATIC_LIBRARIES += HeapView
endif
LD_STATIC_PREFIX           = -Wl,-Bstatic
LD_DYNAMIC_PREFIX          = -Wl,-Bdynamic

WINDOWS_DLLS               = /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libgcc_s_*.dll \
                             /usr/lib/gcc/x86_64-w64-mingw32/*-win32/libstdc++-6.dll \
                             /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll
ifeq (@HAVE_POSTGRESQL@,1)
WINDOWS_DLLS               += $(BUILD_DIR)/extern/lib/libpq.dll
endif

ifneq ($(SANITIZER),)
  CC_FLAGS_DEBUG += -fno-sanitize-recover=all -fstack-protector-all
  ifeq ($(SANITIZER),address)
    CC_FLAGS_DEBUG += -fsanitize=address
    LD_FLAGS       += -static-libasan
    LD_LIBRARIES   += asan
  else ifeq ($(SANITIZER),leak)
    CC_FLAGS_DEBUG += -fsanitize=leak
    LD_FLAGS       += -static-liblsan
    LD_LIBRARIES   += lsan
  else ifeq ($(SANITIZER),thread)
    CC_FLAGS_DEBUG += -fsanitize=thread
    LD_FLAGS       += -static-libtsan
    LD_LIBRARIES   += tsan
  else ifeq ($(SANITIZER),undefined)
    CC_FLAGS_DEBUG += -fsanitize=undefined
    LD_FLAGS       += -static-libubsan
    LD_LIBRARIES   += ubsan
  else ifeq ($(SANITIZER),help)
    $(error available sanitizers: address, leak, thread, undefined)
  else
    $(warning available sanitizers: address, leak, thread, undefined)
    $(error ERROR: unknown sanitizer function '$(SANITIZER)')
  endif
endif

STRIP                      = @STRIP@
OBJDUMP                    = @OBJDUMP@
OBJCOPY                    = @OBJCOPY@

XGETTEXT                   = @XGETTEXT@
XGETTEXT_FLAGS             = -L C -k -ktr
MSGMERGE                   = @MSGMERGE@
MSGFMT                     = @MSGFMT@

DUMP_SYMS                  = @DUMP_SYMS@

#---------------------------------- commands----------------------------------

ATTR            = @ATTR@
BC              = bc
BZIP2           = bzip2
CAT             = cat
CD              = cd
CHATTR          = chattr
CHMOD           = chmod
CP              = cp
CTAGS           = ctags
CUT             = cut
DD              = dd
DDD             = ddd
DIFF            = diff
ECHO            = echo
ECHO_NO_LF      = echo -n
FIND            = find
GIT             = @GIT@
GDB             = gdb
GREP            = grep
GETFATTR        = @GETFATTR@
INSTALL         = @INSTALL@
KILL            = kill
KILLALL         = killall
LN              = ln
LS              = ls
MKDIR           = mkdir
MKFIFO          = mkfifo
MKTEMP          = mktemp
NETCAT          = netcat
PERL            = @PERL@
READLINK        = readlink
RMDIR           = rmdir
RMF             = rm -f
RMRF            = rm -rf
SCP             = scp
SED             = sed
SETFATTR        = @SETFATTR@
SLEEP           = sleep
SSH             = ssh
SSHPASS         = sshpass
SORT            = sort
STAT            = stat
SUDO            = sudo
TAIL            = tail
TAR             = tar
TIME            = @TIME@
TIMEOUT         = timeout
TOUCH           = touch
ULIMIT          = ulimit
WINE            = @WINE@
XARGS           = xargs

LCOV            = @LCOV@
GENHTML         = @GENHTML@

VALGRIND        = valgrind
VALGRIND_FLAGS  = --gen-suppressions=no --num-callers=32 --track-fds=yes --track-origins=yes --suppressions=$(ROOT_DIR)/bar/valgrind.supp --error-exitcode=$(VALGRIND_ERROR_EXITCODE)
CALLGRIND_FLAGS = -v

#------------------------ specific variables/settings ------------------------

# special constants
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)
COMMA := ,

# major, minor version number, repository hash
VERSION_MAJOR    := $(shell $(CAT) $(ROOT_DIR)/version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR    := $(shell $(CAT) $(ROOT_DIR)/version|$(GREP) MINOR|$(SED) 's/MINOR=//g')
VERSION_PATCH    := $(shell $(CAT) $(ROOT_DIR)/version|$(GREP) PATCH|$(SED) 's/PATCH=//g')
VERSION          := $(VERSION_MAJOR).$(VERSION_MINOR)$(VERSION_PATCH)
VERSION_REPOSITORY = $(shell $(CAT) $(ROOT_DIR)/version|$(GREP) RELEASE=|$(SED) 's/RELEASE=//g')
ifneq   ($(wildcard ../.git),)
  ifneq ($(GIT),)
    VERSION_REPOSITORY = $(shell ($(CAT) $(ROOT_DIR)/version|$(GREP) RELEASE= || $(GIT) rev-parse HEAD 2>/dev/null)|$(SED) 's/RELEASE=//g')
  else
    VERSION_REPOSITORY = $(shell $(CAT) $(ROOT_DIR)/version|$(GREP) RELEASE=|$(SED) 's/RELEASE=//g')
  endif
endif

# supported min. compress algorithms
ifeq ($(MIN_COMPRESS_NAMES),)
  MIN_COMPRESS_NAMES = none
  MIN_COMPRESS_NAMES += zip1
  ifeq (@HAVE_BZ2@,1)
    MIN_COMPRESS_NAMES += bzip1
  endif
  ifeq (@HAVE_LZMA@,1)
    MIN_COMPRESS_NAMES += lzma1
  endif
  ifeq (@HAVE_LZO@,1)
    MIN_COMPRESS_NAMES += lzo1
  endif
  ifeq (@HAVE_LZ4@,1)
    MIN_COMPRESS_NAMES += lz4-1
  endif
  ifeq (@HAVE_ZSTD@,1)
    MIN_COMPRESS_NAMES += zstd1
  endif
endif

# supported min. crypt algorithms
MIN_CRYPT_NAMES  = none
ifeq (@HAVE_GCRYPT@,1)
  MIN_CRYPT_NAMES  += 3DES CAST5 BLOWFISH AES256 TWOFISH256 SERPENT256 CAMELLIA256
endif

# SQLite flags
SQLITE_FLAGS         = $(if @HAVE_USLEEP@,-DHAVE_USLEEP=1) -DSQLITE_DEFAULT_FILE_PERMISSIONS=0600 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT $(if @HAVE_ICU@,-DSQLITE_ENABLE_ICU) -DSQLITE_ENABLE_UNLOCK_NOTIFY
SQLITE_FLAGS_RELEASE =
SQLITE_FLAGS_DEBUG   = -DSQLITE_DEBUG
#-DSQLITE_LOCK_TRACE

# xdelta3 flags
XDELTA3_FLAGS =

# additional options
OPTIONS ?= $(O)

SERVER_PORT                      = 39909
SERVER_TLS_PORT                  = 39910
SERVER_CONFIG                    = bar.cfg
SERVER_PID_FILE                  = barserver.pid
SERVER_JOBS                      = jobs
SERVER_DATABASE                  = sqlite3:index.db
SERVER_DATABASE2                 = sqlite3:index2.db
SERVER_CONTINUOUS_DATABASE       = sqlite3:continuous.db
SERVER_CONTINUOUS_DATABASE2      = sqlite3:continuous2.db
SERVER_LOG_FILE                  = bar.log

SERVER_SLAVE_HOST                =
SERVER_SLAVE_PORT                = 39911
SERVER_SLAVE_TLS_PORT            = 39912
SERVER_SLAVE_USERNAME            ?= test
SERVER_SLAVE_PASSWORD            ?= test
SERVER_SLAVE_CONFIG              = bar-slave.cfg
SERVER_SLAVE_PID_FILE            = barserver-slave.pid
SERVER_SLAVE_JOBS                = jobs-slave
SERVER_SLAVE_DATABASE            = sqlite3:index-slave.db
SERVER_SLAVE_CONTINUOUS_DATABASE = sqlite3:continuous-slave.db
SERVER_SLAVE_LOG_FILE            = bar-slave.log

# languages
LANGUAGES = de jp

#---------------------------------- rules ------------------------------------

# source search paths
vpath %.c   $(BUILD_DIR)/bar:$(SOURCE_DIR)
vpath %.cpp $(BUILD_DIR)/bar:$(SOURCE_DIR)

# disable implicit rule for *.y -> *.c
%.c: %.y

# compile C source
release/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o release/$*.o
release/%.o: %.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o release/$*.o

debug/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o debug/$*.o
debug/%.o: %.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o debug/$*.o

gcov/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gcov/$*.o
gcov/%.o: %.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o gcov/$*.o

gprof/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gprof/$*.o
gprof/%.o: %.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o gprof/$*.o

valgrind/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_VALGRIND) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_VALGRIND),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o valgrind/$*.o
valgrind/%.o: %.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_VALGRIND) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_VALGRIND),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o valgrind/$*.o

common/%.o: $(SOURCE_DIR)/common/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/common/$*.c -o common/$*.o

%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $*.o
%.o: %.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o $*.o

release/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o release/$*.o

debug/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o debug/$*.o

gcov/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gcov/$*.o

gprof/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gprof/$*.o

valgrind/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_VALGRIND) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_VALGRIND),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o valgrind/$*.o

%.o: %.c
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $*.o

# compile C++ source
release/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o release/$*.o

debug/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o debug/$*.o

gcov/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o gcov/$*.o

gprof/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o gprof/$*.o

valgrind/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_VALGRIND) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_VALGRIND),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o valgrind/$*.o

common/%.o: common/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c common/$*.cpp -o common/$*.o

%.o: %.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.cpp -o $*.o

%.o: %.cc
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" $(if $(VERSION_MINOR),-DVERSION_MINOR="$(VERSION_MINOR)") $(if $(VERSION_PATCH),-DVERSION_PATCH="$(VERSION_PATCH)") -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.cc -o $*.o

# unknown source
%.o:
	$(error Unkown object file '$*.o': do not know how to create it)

#--------------------------------- objects -----------------------------------

BAR_SOURCES                 = bar.c \
                              bar_common.c \
                              configuration.c \
                              commands_create.c \
                              commands_list.c \
                              commands_test.c \
                              commands_compare.c \
                              commands_restore.c \
                              commands_convert.c \
                              archives.c \
                              chunks.c \
                              entrylists.c \
                              compress.c \
                              deltasources.c \
                              deltasourcelists.c \
                              crypt.c \
                              storage.c \
                              index/index.c \
                              index/index_uuids.c \
                              index/index_entities.c \
                              index/index_entries.c \
                              index/index_storages.c \
                              index/index_history.c \
                              index/index_assign.c \
                              index/index_common.c \
                              jobs.c \
                              continuous.c \
                              server.c \
                              server_io.c \
                              connector.c \
                              par2.cpp \

BAR_SOURCES_OTHER           = forward.h \
                              \
                              compress_zip.c \
                              compress_bz2.c \
                              compress_lzma.c \
                              compress_lzo.c \
                              compress_lz4.c \
                              compress_zstd.c \
                              compress_xd3.c \
                              \
                              storage_file.c \
                              storage_ftp.c \
                              storage_scp.c \
                              storage_sftp.c \
                              storage_webdav.c \
                              storage_smb.c \
                              storage_optical.c \
                              storage_device.c \
                              storage_master.c \
                              \
                              index/index_version5.c \
                              index/index_version6.c \
                              index/index_version7.c \
                              index/index_version8.c \
                              \
                              archive_format.pl \
                              archive_format.def \
                              index/index_definition.pl \
                              index/index_common.def \
                              index/index_sqlite3.def \
                              index/index_mariadb.def \
                              index/index_postgresql.def \
                              valgrind.supp \
                              bar.cfg \
                              bar-keygen.in \
                              \
                              common/filesystems_ext.c \
                              common/filesystems_fat.c \
                              common/filesystems_reiserfs.c \

BAR_SOURCES_FILTER          = $(if @HAVE_BFD@,,common/stacktraces.c) \

BAR_HEADERS                 = $(patsubst %.c,  %.h,$(filter %.c,  $(BAR_SOURCES))) \
                              $(patsubst %.cpp,%.h,$(filter %.cpp,$(BAR_SOURCES))) \
                              bar_common.h \

BAR_OBJECTS                 = $(foreach z,$(filter %.c,  $(filter-out $(BAR_SOURCES_FILTER),$(BAR_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                              $(foreach z,$(filter %.cpp,$(filter-out $(BAR_SOURCES_FILTER),$(BAR_SOURCES))),$(patsubst %.cpp,%.o,$z)) \
                              errors.o \
                              archive_format.o \
                              index_definition.o \
                              $(foreach z,$(filter %.c,  $(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                              $(foreach z,$(filter %.cpp,$(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.cpp,%.o,$z)) \

BAR_OBJECTS_RELEASE         = $(addprefix release/,$(BAR_OBJECTS))

BAR_OBJECTS_DEBUG           = $(addprefix debug/,$(BAR_OBJECTS))

BAR_OBJECTS_GCOV            = $(addprefix gcov/,$(BAR_OBJECTS))

BAR_OBJECTS_GPROF           = $(addprefix gprof/,$(BAR_OBJECTS))

BAR_OBJECTS_VALGRIND        = $(addprefix valgrind/,$(BAR_OBJECTS))

BAR_PO                      = po/german.po \
                              po/japanese.po

BAR_MO                      = $(foreach z,$(LANGUAGES),po/$z/LC_MESSAGES/bar.mo)

COMMON_SOURCES              = common/arrays.c \
                              common/autofree.c \
                              common/cmdoptions.c \
                              common/configvalues.c \
                              common/cstrings.c \
                              common/database.c \
                              common/devices.c \
                              common/dictionaries.c \
                              common/files.c \
                              common/filesystems.c \
                              common/fragmentlists.c \
                              common/global.c \
                              common/hashtables.c \
                              common/lists.c \
                              common/misc.c \
                              common/msgqueues.c \
                              common/network.c \
                              common/patternlists.c \
                              common/patterns.c \
                              common/passwords.c \
                              common/progressinfo.c \
                              common/ringbuffers.c \
                              common/semaphores.c \
                              common/stacktraces.c \
                              common/stringlists.c \
                              common/stringmaps.c \
                              common/strings.c \
                              common/threads.c \
                              common/threadpools.c \

COMMON_SOURCES_OTHER        = common/filesystems_ext.c \
                              common/filesystems_ext.h \
                              common/filesystems_fat.c \
                              common/filesystems_fat.h \
                              common/filesystems_reiserfs.c \
                              common/filesystems_reiserfs.h \

COMMON_SOURCES_FILTER       = \

COMMON_HEADERS              = $(patsubst %.c,  %.h,$(filter %.c,  $(COMMON_SOURCES))) \
                              $(patsubst %.cpp,%.h,$(filter %.cpp,$(COMMON_SOURCES))) \

SQLITE3_SOURCES             = $(if $(wildcard $(BUILD_DIR)/extern/sources/sqlite3.c),$(BUILD_DIR)/extern/sources/sqlite3.c,$(SOURCE_DIR)/sqlite3.c)

SQLITE3_HEADERS             = $(if $(wildcard $(BUILD_DIR)/extern/include/sqlite3.h),$(BUILD_DIR)/extern/include/sqlite3.h,$(SOURCE_DIR)/sqlite3.h)

SQLITE3_OBJECTS             = sqlite3.o

XDELTA3_SOURCES             = $(BUILD_DIR)/extern/sources/xdelta3.c

XDELTA3_HEADERS             = $(BUILD_DIR)/extern/include/xdelta3.h

XDELTA3_OBJECTS             = xdelta3.o

EXTERN_SOURCES              = $(SQLITE3_SOURCES) \

EXTERN_HEADERS              = $(SQLITE3_HEADERS) \

EXTERN_OBJECTS              = $(SQLITE3_OBJECTS) \
                              $(if @HAVE_XDELTA3@,xdelta3.o) \

EXTERN_OBJECTS_RELEASE      = $(addprefix release/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_DEBUG        = $(addprefix debug/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_GCOV         = $(addprefix gcov/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_GPROF        = $(addprefix gprof/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_VALGRIND     = $(addprefix valgrind/,$(EXTERN_OBJECTS))

DESTROYER_SOURCES           = destroyer.c \

DESTROYER_HEADERS           = $(patsubst %.c,%.h,$(DESTROYER_SOURCES)) \

DESTROYER_OBJECTS           = $(foreach z,$(filter %.c,  $(DESTROYER_SOURCES)),$(patsubst %.c,  %.o,$z)) \
                              $(foreach z,$(filter %.cpp,$(DESTROYER_SOURCES)),$(patsubst %.cpp,%.o,$z)) \
                              errors.o \
                              $(foreach z,$(filter %.c,  $(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                              $(foreach z,$(filter %.cpp,$(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.cpp,%.o,$z)) \

BAR_INDEX_SOURCES           = bar-index.c \
                              bar_common.c \

BAR_INDEX_HEADERS           = $(patsubst %.c,%.h,$(filter-out bar-index.c,$(BAR_INDEX_SOURCES))) \

BAR_INDEX_SOURCES_COMMON    = common/arrays.c \
                              common/autofree.c \
                              common/cmdoptions.c \
                              common/database.c \
                              common/configvalues.c \
                              common/cstrings.c \
                              common/devices.c \
                              common/dictionaries.c \
                              common/files.c \
                              common/global.c \
                              common/hashtables.c \
                              common/lists.c \
                              common/misc.c \
                              common/passwords.c \
                              common/progressinfo.c \
                              common/semaphores.c \
                              common/stacktraces.c \
                              common/stringlists.c \
                              common/strings.c \
                              common/threads.c \

BAR_INDEX_HEADERS_COMMON    = \

BAR_INDEX_SOURCES_OTHER     = index/index_definition.pl \
                              index/index_common.def \
                              index/index_sqlite3.def \
                              index/index_mariadb.def \
                              index/index_postgresql.def \
                              \
                              index/index_version6.c \
                              index/index_version7.c \
                              index/index_version8.c \

BAR_INDEX_OBJECTS           = $(foreach z,$(BAR_INDEX_SOURCES),$(patsubst %.c,%.o,$z)) \
                              $(SQLITE3_OBJECTS) \
                              index_definition.o \
                              errors.o \
                              $(foreach z,$(filter %.c,  $(filter-out $(COMMON_SOURCES_FILTER),$(BAR_INDEX_SOURCES_COMMON))),$(patsubst %.c,  %.o,$z)) \
                              $(foreach z,$(filter %.cpp,$(filter-out $(COMMON_SOURCES_FILTER),$(BAR_INDEX_SOURCES_COMMON))),$(patsubst %.cpp,%.o,$z)) \

BAR_INDEX_OBJECTS_RELEASE   = $(addprefix release/,$(BAR_INDEX_OBJECTS))

BAR_INDEX_OBJECTS_DEBUG     = $(addprefix debug/,$(BAR_INDEX_OBJECTS))

BAR_INDEX_OBJECTS_GCOV      = $(addprefix gcov/,$(BAR_INDEX_OBJECTS))

BAR_INDEX_OBJECTS_GPROF     = $(addprefix grof/,$(BAR_INDEX_OBJECTS))

BAR_INDEX_OBJECTS_VALGRIND  = $(addprefix valgrind/,$(BAR_INDEX_OBJECTS))

SHOWCHUNKS_SOURCES          = showchunks.c \

SHOWCHUNKS_OBJECTS          = $(addprefix release/,$(foreach z,$(SHOWCHUNKS_SOURCES),$(patsubst %.c,%.o,$z))) \
                              release/errors.o \

INTERMEDIATE_SOURCES        = errors.c \
                              archive_format.c \
                              index_definition.c \

INTERMEDIATE_HEADERS        = errors.h \
                              archive_format.h \
                              archive_format_const.h \
                              index_definition.h \

DEPEND_FILTER_FILES =         $(SOURCE_DIR)/errors.h \
                              errors.h \
                              $(SOURCE_DIR)/archive_format.h \
                              archive_format.h \
                              $(SOURCE_DIR)/archive_format_const.h \
                              archive_format_const.h \
                              $(SOURCE_DIR)/index_definition.h \
                              index_definition.h

ALL_SOURCES                 = $(BAR_SOURCES) \
                              $(BAR_HEADERS) \
                              $(BAR_SOURCES_OTHER) \
                              $(DESTROYER_SOURCES) \
                              $(DESTROYER_HEADERS) \
                              $(BAR_MINIDUMP_SOURCES) \
                              $(BAR_MINIDUMP_SOURCES_COMMON) \
                              $(BAR_MINIDUMP_HEADERS) \
                              $(BAR_INDEX_SOURCES) \
                              $(BAR_INDEX_SOURCES_COMMON) \
                              $(BAR_INDEX_HEADERS) \
                              $(BAR_INDEX_HEADERS_COMMON) \
                              $(BAR_INDEX_SOURCES_OTHER) \
                              $(COMMON_SOURCES) \
                              $(COMMON_HEADERS) \
                              $(COMMON_SOURCES_OTHER) \

TARGETS_INSTALL             = bar@EXEEXT@ bar.sym \
                              bar-debug@EXEEXT@ bar-debug.sym \
                              $(foreach z,$(LANGUAGES),po/$z/LC_MESSAGES/bar.mo) \
                              bar-keygen@SHELLEXT@ \
                              bar-index@EXEEXT@ \
                              bar-index-debug@EXEEXT@ \
                              $(BAR_MO) \

TARGETS                     = $(TARGETS_INSTALL) \
                              bar-gcov@EXEEXT@ \
                              bar-gprof@EXEEXT@ \
                              bar-valgrind@EXEEXT@ \
                              bar-index-debug@EXEEXT@ \
                              destroyer@EXEEXT@ \

#------------------------------ dependencies ---------------------------------

# default target
.PHONY: all clean distclean depend
all: $(TARGETS)

# clean
clean: \
  gcov_clean \
  tests_clean
	$(RMF) bar.tags
	$(RMF) $(BAR_OBJECTS_RELEASE)
	$(RMF) $(BAR_OBJECTS_DEBUG)
	$(RMF) $(BAR_OBJECTS_GCOV)
	$(RMF) $(BAR_OBJECTS_GPROF)
	$(RMF) $(BAR_OBJECTS_VALGRIND)
	$(RMF) $(BAR_INDEX_OBJECTS)
	$(RMF) $(EXTERN_OBJECTS_RELEASE)
	$(RMF) $(EXTERN_OBJECTS_DEBUG)
	$(RMF) $(EXTERN_OBJECTS_GCOV)
	$(RMF) $(EXTERN_OBJECTS_VALGRIND)
	$(RMF) $(DESTROYER_OBJECTS)
	$(RMF) $(BAR_MINIDUMP_OBJECTS)
	$(RMF) $(INTERMEDIATE_SOURCES) $(INTERMEDIATE_HEADERS)
	$(RMF) /tmp/bar.cfg /tmp/bar-slave.cfg /tmp/bar.log /tmp/bar-slave.log /tmp/pairing
	$(RMF) bar-gcov.info gmon.out
	$(RMF) $(TARGETS)

distclean: \
  clean \
  tests_distclean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h
	$(RMRF) release debug valgrind

# help
.PHONY: help
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(ECHO) "  bar"
	@$(ECHO) "  bar-debug [SANITIZER=<sanitizer>]"
	@$(ECHO) "  bar-valgrind"
	@$(ECHO) "  bar-gcov"
	@$(ECHO) ""
	@$(ECHO) "  po"
	@$(ECHO) ""
	@$(ECHO) "  run                                       run server"
	@$(ECHO) "  run_slave                                 run server slave"
	@$(ECHO) "  run_en"
	@$(ECHO) "  run_de"
	@$(ECHO) "  run_jp"
	@$(ECHO) "  run_ssl                                   run server with SSL"
	@$(ECHO) ""
	@$(ECHO) "  rundev [SERVER_DATABASE=<...>]            run server"
	@$(ECHO) "  rundevd, rundevd1 [SERVER_DATABASE=<...>] run development server (debug version)"
	@$(ECHO) "  rundevd2 [SERVER_DATABASE=<...>]          run development server 2 (debug version)"
	@$(ECHO) "  rundevgdb [SERVER_DATABASE=<...>]         run development server with GDB"
	@$(ECHO) "  rundevddd [SERVER_DATABASE=<...>]         run development server with DDD"
	@$(ECHO) "  rundevgcov                                run development server with gcov"
	@$(ECHO) "  rundevgprof                               run development server with gprof"
	@$(ECHO) "  rundevvalgrind                            run development server with valgrind"
	@$(ECHO) "  rundevcallgrind                           run development server with callgrind"
	@$(ECHO) "  rundev_slave                              run development server slave"
	@$(ECHO) "  rundevd_slave                             run development server slave (debug version)"
	@$(ECHO) "  rundevgdb_slave                           run development server slave with GDB"
	@$(ECHO) "  rundev_wine                               run server with wine"
	@$(ECHO) "  rundevd_wine                              run development server with wine"
	@$(ECHO) "  rundevd_slave_wine                        run development server slave with wine"
	@$(ECHO) "  rundev_en"
	@$(ECHO) "  rundev_de"
	@$(ECHO) "  rundev_jp"
	@$(ECHO) "  rundev_ssl"
	@$(ECHO) "  rundev_test"
	@$(ECHO) ""
	@$(MAKE) -C tests -j1 --no-print-directory -s help_output
	@$(ECHO) ""
	@$(ECHO) "  show_debug_test_code"
	@$(ECHO) "  run_debug_test_code"
	@$(ECHO) ""
	@$(ECHO) "  gcov [CHECK=1|2|3|4|5|6|7|8]"
	@$(ECHO) "  gcov_clean"
	@$(ECHO) "  gcov_zero                                 reset gcov data"
	@$(ECHO) "  gcov<1|2|3|4|5|6|7|8>"
	@$(ECHO) "  gcov_html                                 re-generate gcov HTML report"
	@$(ECHO) ""
	@$(ECHO) "  gprof<1|2|3|4|5|6|7|8>"
	@$(ECHO) ""
	@$(ECHO) "  memcheck [CHECK=1|2|2a|2b|2c|2d|2e|3|4|5|6|7]"
	@$(ECHO) "  memcheck_extended [CHECK=1|2|2a|2b|2c|2d|2e|3|4|5|6|7]"
	@$(ECHO) "  memcheck<1|2|2a|2b|2c|2d|2e|3|4|5|6|7>"
	@$(ECHO) ""
	@$(ECHO) "  testcode_init                             init test code name"
	@$(ECHO) "  testcode_all                              run all test code"
	@$(ECHO) "  testcode_list                             list test code names"
	@$(ECHO) "  testcode [TESTCODE=<name>]                run test code or test code <name>"
	@$(ECHO) ""
	@$(ECHO) "  performance"
	@$(ECHO) "  performance1, performance_none"
	@$(ECHO) "  performance2, performance_zip_compress"
	@$(ECHO) "  performance3, performance_bzip2_compress"
	@$(ECHO) "  performance4, performance_lzma_compress"
	@$(ECHO) "  performance5, performance_lzo_compress"
	@$(ECHO) "  performance6, performance_lz4_compress"
	@$(ECHO) "  performance7, performance_zstd_compress"
	@$(ECHO) "  performance8, performance_delta_compress"
	@$(ECHO) ""
	@$(ECHO) "  crashdump MINIDUMP=<file name>"
	@$(ECHO) ""
	@$(ECHO) "  dist"

# create dependencies
.PHONY: depend
depend: Makefile.depend

Makefile.depend: $(SOURCE_DIR)/Makefile.in
	$(MAKE) NO_DEPEND=1 $(INTERMEDIATE_SOURCES) $(INTERMEDIATE_HEADERS)
	$(ECHO) >Makefile.depend
	for source in $(addprefix $(SOURCE_DIR)/,$(BAR_SOURCES) $(DESTROYER_SOURCES) $(BAR_MINIDUMP_SOURCES) $(BAR_INDEX_SOURCES)) $(EXTERN_SOURCES); do \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|release/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|debug/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|gcov/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|gprof/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|valgrind/\1|g' | \
            $(CAT) >> Makefile.depend; \
        done;
	for source in $(addprefix $(SOURCE_DIR)/,$(COMMON_SOURCES)); do \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|release/common/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|debug/common/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|gcov/common/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|gprof/common/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(CC_WARN_FLAGS) $(foreach i,$(CC_INCLUDES),-I$i) -MM $$source 2>/dev/null | \
            $(foreach i,$(DEPEND_FILTER_FILES),$(SED) 's| $i | |g' |) \
            $(SED) 's|\(.*\.o:\)|valgrind/common/\1|g' | \
            $(CAT) >> Makefile.depend; \
        done;

# create tags file
bar.tags: \
  $(addprefix $(SOURCE_DIR)/,$(BAR_SOURCES) \
                             $(BAR_SOURCES_OTHER) \
                             $(COMMON_SOURCES) \
                             $(COMMON_SOURCES_OTHER) \
                             $(DESTROYER_SOURCES) \
                             $(BAR_INDEX_SOURCES) \
                             $(BAR_INDEX_SOURCES_OTHER) \
                             $(BAR_INDEX_SOURCES_COMMON) \
                             $(BAR_MINIDUMP_SOURCES) \
                             $(BAR_MINIDUMP_SOURCES_COMMON) \
   ) \
  $(EXTERN_SOURCES)
	$(CTAGS) $(CTAGS_FLAGS) -f $@ $(addprefix $(SOURCE_DIR)/,$^)

# ----------------------------------------------------------------------------

# compile SQLite, xdelta C source without warning flags
release/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(SQLITE_FLAGS)                       $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
debug/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
gcov/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
gprof/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
valgrind/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@

ifeq (@HAVE_XDELTA3@,1)
release/xdelta3.o: $(XDELTA3_SOURCES) $(XDELTA3_HEADERS) ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H $(XDELTA3_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
debug/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H $(XDELTA3_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
gcov/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H $(XDELTA3_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
gprof/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H $(XDELTA3_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
valgrind/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H $(XDELTA3_FLAGS) $(foreach i,$(CC_DEFINES),-D$i) $(foreach i,$(CC_INCLUDES),-I$i) -c $< -o $@
endif

# create BAR
bar@EXEEXT@: \
  $(BAR_OBJECTS_RELEASE) \
  $(EXTERN_OBJECTS_RELEASE)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar.sym: bar@EXEEXT@
	$(OBJCOPY) --only-keep-debug bar@EXEEXT@ $@

bar-debug@EXEEXT@: \
  $(BAR_OBJECTS_DEBUG) \
  $(EXTERN_OBJECTS_DEBUG)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_DEBUG) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar-debug.sym: bar-debug@EXEEXT@
	$(OBJCOPY) --only-keep-debug bar-debug@EXEEXT@ $@

bar-gcov@EXEEXT@: \
  $(BAR_OBJECTS_GCOV) \
  $(EXTERN_OBJECTS_GCOV)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GCOV) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar-gprof@EXEEXT@: \
  $(BAR_OBJECTS_GPROF) \
  $(EXTERN_OBJECTS_GPROF)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GPROF) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

# Note: a special valgrind version is needed because of a bug in valgrind
#       reporting false positives when gcc builtin-functions are used.
#       See: https://bugs.launchpad.net/ubuntu/+source/valgrind/+bug/852760
bar-valgrind@EXEEXT@: \
  $(BAR_OBJECTS_VALGRIND) \
  $(EXTERN_OBJECTS_VALGRIND)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_VALGRIND) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

# create bar-keygen script
bar-keygen@SHELLEXT@: $(SOURCE_DIR)/bar-keygen.in
	$(CAT) $(SOURCE_DIR)/bar-keygen.in | \
        ( \
          while IFS="" read -r line; do \
            if   test "$$line" = "@CERTTOOL/CA.TEMPL@"; then \
              $(CAT) $(ROOT_DIR)/ssl/certtool/ca.tmpl; \
            elif test "$$line" = "@CERTTOOL/SERVER.TEMPL@"; then \
              $(CAT) $(ROOT_DIR)/ssl/certtool/server.tmpl; \
            elif test "$$line" = "@OPENSSL/CA.TEMPL@"; then \
              $(CAT) $(ROOT_DIR)/ssl/openssl/ca.tmpl; \
            elif test "$$line" = "@OPENSSL/SERVER.TEMPL@"; then \
              $(CAT) $(ROOT_DIR)/ssl/openssl/server.tmpl; \
            else \
              line=`$(ECHO) "$$line"|$(SED) 's|\@TLS_DIR\@|$(DESTDIR)$(TLS_DIR)|g'`; \
              line=`$(ECHO) "$$line"|$(SED) 's|\@CONFIG_DIR\@|$(DESTDIR)$(CONFIG_DIR)|g'`; \
              $(ECHO) "$$line"; \
            fi; \
          done; \
        ) >$@
	$(CHMOD) 775 $@

# error definition
errors.h: \
  $(ROOT_DIR)/errors.def \
  $(ROOT_DIR)/errors.pl
	$(PERL) $(ROOT_DIR)/errors.pl < $(ROOT_DIR)/errors.def -h $@
errors.c: \
  $(ROOT_DIR)/errors.def \
  $(ROOT_DIR)/errors.pl
	$(PERL) $(ROOT_DIR)/errors.pl < $(ROOT_DIR)/errors.def -c $@
release/errors.o: | errors.c errors.h
debug/errors.o: | errors.c errors.h
gcov/errors.o: | errors.c errors.h
gprof/errors.o: | errors.c errors.h
valgrind/errors.o: | errors.c errors.h

# archive format definition
archive_format.h: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -h $@
archive_format_const.h: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -n $@
archive_format.c: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -c $@ -i archives.h -i archive_format.h
release/archive_format.o: | archive_format.c archive_format.h
debug/archive_format.o: | archive_format.c archive_format.h
gcov/archive_format.o: | archive_format.c archive_format.h
gprof/archive_format.o: | archive_format.c archive_format.h
valgrind/archive_format.o: | archive_format.c archive_format.h

# index database definition
index_definition.c index_definition.h: \
  $(SOURCE_DIR)/index/index_definition.pl \
  $(SOURCE_DIR)/index/index_common.def \
  $(SOURCE_DIR)/index/index_sqlite3.def \
  $(SOURCE_DIR)/index/index_mariadb.def \
  $(SOURCE_DIR)/index/index_postgresql.def
	$(PERL) $(SOURCE_DIR)/index/index_definition.pl \
	  --common $(SOURCE_DIR)/index/index_common.def \
	  --sqlite $(SOURCE_DIR)/index/index_sqlite3.def \
	  --mariadb $(SOURCE_DIR)/index/index_mariadb.def \
	  --postgresql $(SOURCE_DIR)/index/index_postgresql.def \
	  --source index_definition.c \
	  --header index_definition.h
release/index_definition.o: index_definition.c index_definition.h
debug/index_definition.o: index_definition.c index_definition.h
gcov/index_definition.o: index_definition.c index_definition.h
gprof/index_definition.o: index_definition.c index_definition.h
valgrind/index_definition.o: index_definition.c index_definition.h

# create destroyer (for testing only!)
destroyer@EXEEXT@: \
  $(DESTROYER_OBJECTS) \
  $(EXTERN_OBJECTS_RELEASE)
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

# create show chunks program
showchunks@EXEEXT@: \
  $(SHOWCHUNKS_OBJECTS)
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

# create bar-index
bar-index@EXEEXT@: \
  $(BAR_INDEX_OBJECTS_RELEASE)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar-index-debug@EXEEXT@: \
  $(BAR_INDEX_OBJECTS_DEBUG)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_DEBUG) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar-index-gcov@EXEEXT@: \
  $(BAR_INDEX_OBJECTS_GCOV)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GCOV) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar-index-gprof@EXEEXT@: \
  $(BAR_INDEX_OBJECTS_GPROF)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GPROF) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

bar-index-valgrind@EXEEXT@: \
  $(BAR_INDEX_OBJECTS_VALGRIND)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_VALGRIND) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) .
endif

# i18n
.PHONY: i18n po
i18n po: \
  $(SOURCE_DIR)/po/german.po \
  $(SOURCE_DIR)/po/japanese.po

$(SOURCE_DIR)/po/bar.pot: $(SOURCE_DIR)/*.c
	$(INSTALL) -d $(@D)
	$(XGETTEXT) $(XGETTEXT_FLAGS) -o $@ $(SOURCE_DIR)/*.c

$(SOURCE_DIR)/po/german.po: $(SOURCE_DIR)/po/bar.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ $(SOURCE_DIR)/po/bar.pot
	$(TOUCH) $@

$(SOURCE_DIR)/po/japanese.po: $(SOURCE_DIR)/po/bar.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ $(SOURCE_DIR)/po/bar.pot
	$(TOUCH) $@

po/de/LC_MESSAGES/bar.mo: $(SOURCE_DIR)/po/german.po
	$(INSTALL) -d $(@D)
	$(MSGFMT) -o $@ $(SOURCE_DIR)/po/german.po

po/jp/LC_MESSAGES/bar.mo: $(SOURCE_DIR)/po/japanese.po
	$(INSTALL) -d $(@D)
	$(MSGFMT) -o $@ $(SOURCE_DIR)/po/japanese.po

# ----------------------------------------------------------------------------

/tmp/bar.cfg: $(SOURCE_DIR)/bar.cfg
	$(INSTALL) -m 600 $(SOURCE_DIR)/bar.cfg $@

/tmp/bar-slave.cfg: $(SOURCE_DIR)/bar.cfg
	$(INSTALL) -m 600 $(SOURCE_DIR)/bar.cfg $@

../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem:
	$(MAKE) -C .. keys

# run server
.PHONY: run runserver rund runserverd run_ssl runserver_ssl
.PHONY: run_slave runserver_slave rund_slave runserverd_slave
run runserver: bar@EXEEXT@
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          $(OPTIONS)

rund runserverd: bar-debug@EXEEXT@
	$(INSTALL) -d jobs
	nice ./bar-debug@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          $(OPTIONS)

run_ssl runserver_ssl: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          $(OPTIONS)

.PHONY: run_slave runserver_slave rund_slave runserverd_slave
run_slave runserver_slave: bar@EXEEXT@
	$(INSTALL) -d jobs-slave
	touch /tmp/pairing
	nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --pairing-master-file=/tmp/pairing \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rund_slave runserverd_slave: bar-debug@EXEEXT@
	$(INSTALL) -d jobs-slave
	touch /tmp/pairing
	nice ./bar-debug@EXEEXT@ --daemon -D \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs-slave \
          --incremental-data-directory=/tmp \
          --pairing-master-file=/tmp/pairing \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

.PHONY: run_en runserver_en run_de runserver_de run_ssl runserver_ssl
run_en runserver_en: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=en_US nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          $(OPTIONS)

run_de runserver_de: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=de_DE nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          $(OPTIONS)

run_jp runserver_jp: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=ja_JP nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          $(OPTIONS)

.PHONY: rundev rundevd rundevd1 rundevd2 rundevgdb rundevddd rundevvalgrind rundevcallgrind rundevgcov rundevgprof rundev_en rundev_de rundev_jp rundev_ssl runserver runserver_ssl rundev_test
.PHONY: rundev_slave rundevd_slave rundevgdb_slave rundevddd_slave
rundev: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev1 rundevd: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundevd2: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs2
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE2) --index-database=$(SERVER_DATABASE2) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs2 \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=0 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar2.log --log=all --debug-server \
          $(OPTIONS)

rundevgdb: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(GDB) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundevddd: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(DDD) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundevgcov: bar-gcov@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	./bar-gcov@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all --debug-server \
          $(OPTIONS)

rundevgprof: bar-gprof@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	./bar-gprof@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all --debug-server \
          $(OPTIONS)

rundevvalgrind: bar-valgrind@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full ./bar-valgrind@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all --debug-server \
          $(OPTIONS)

rundevcallgrind: bar-valgrind@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(VALGRIND) --tool=callgrind $(CALLGRIND_FLAGS) ./bar-valgrind@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_CONTINUOUS_DATABASE) --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all --debug-server \
          $(OPTIONS)

.PHONY: rundevd_wine rundevd_slave_wine
rundevd_wine:
	$(INSTALL) -d jobs
	nice $(WINE) ./bar-debug.exe --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=C:/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --pairing-master-file=C:/tmp/pairing \
          --log-file=C:/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevd_slave_wine:
	$(INSTALL) -d jobs
	nice $(WINE) ./bar-debug.exe --daemon -D \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=C:/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --pairing-master-file=C:/tmp/pairing \
          --log-file=C:/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundev_slave: bar@EXEEXT@ /tmp/bar-slave.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs-slave
	touch /tmp/pairing
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar-slave.cfg \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_SLAVE_CONTINUOUS_DATABASE) --index-database=$(SERVER_SLAVE_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_SLAVE_PORT) --server-tls-port=$(SERVER_SLAVE_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevd_slave: bar-debug@EXEEXT@ /tmp/bar-slave.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs-slave
	touch /tmp/pairing
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar-slave.cfg \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_SLAVE_CONTINUOUS_DATABASE) --index-database=$(SERVER_SLAVE_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_SLAVE_PORT) --server-tls-port=$(SERVER_SLAVE_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevgdb_slave: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs-slave
	touch /tmp/pairing
	$(GDB) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_SLAVE_CONTINUOUS_DATABASE) --index-database=$(SERVER_SLAVE_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_SLAVE_PORT) --server-tls-port=$(SERVER_SLAVE_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevddd_slave: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs-slave
	touch /tmp/pairing
	$(DDD) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=slave \
          --pid-file=/tmp/bar.pid \
          --continuous-database=$(SERVER_SLAVE_CONTINUOUS_DATABASE) --index-database=$(SERVER_SLAVE_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_SLAVE_PORT) --server-tls-port=$(SERVER_SLAVE_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all --debug-server \
          $(OPTIONS)

rundev_en: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=en_US nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_de: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=de_DE nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_jp: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=ja_JP nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_ssl: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=$(SERVER_DATABASE) --index-database-keep-time=365days \
          --jobs-directory=$(SOURCE_DIR)/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_test: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d intermediate/jobs
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --pid-file=/tmp/bar.pid \
          --index-database=intermediate/index.db \
          --jobs-directory=intermediate/jobs \
          --incremental-data-directory=/tmp \
          --server-port=$(SERVER_PORT) --server-tls-port=$(SERVER_TLS_PORT) \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          $(OPTIONS)

# ----------------------------------------------------------------------------

# tests (Note: tests must be executed sequential)
.PHONY: tests_smoke* tests_min* tests*
tests_smoke: \
  bar@EXEEXT@ \
  bar-debug@EXEEXT@ \
  bar-gcov@EXEEXT@ \
  bar-gprof@EXEEXT@ \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 tests_smoke TEST_EMULATION=1 </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_smoke-debug: \
  bar-debug@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 tests_smoke-debug TEST_EMULATION=1 </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_smoke-gcov: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 tests_smoke-gcov TEST_EMULATION=1 </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_smoke-gprof: \
  bar-gprof@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 tests_smoke-gprof TEST_EMULATION=1 </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_smoke-valgrind: \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 tests_smoke-valgrind TEST_EMULATION=1 </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'

tests_min: \
  bar@EXEEXT@ \
  bar-debug@EXEEXT@ \
  bar-gcov@EXEEXT@ \
  bar-gprof@EXEEXT@ \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 test TEST_EMULATION=1 COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" CRYPT_NAMES="$(MIN_CRYPT_NAMES)" IMAGE_FILESYSTEM_NAMES=raw </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_min-debug: \
  bar-debug@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 test-debug TEST_EMULATION=1 COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" CRYPT_NAMES="$(MIN_CRYPT_NAMES)" IMAGE_FILESYSTEM_NAMES=raw </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_min-gcov: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 test-gcov TEST_EMULATION=1 COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" CRYPT_NAMES="$(MIN_CRYPT_NAMES)" IMAGE_FILESYSTEM_NAMES=raw </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_min-gprof: \
  bar-gprof@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 test-gprof TEST_EMULATION=1 COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" CRYPT_NAMES="$(MIN_CRYPT_NAMES)" IMAGE_FILESYSTEM_NAMES=raw </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
tests_min-valgrind: \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 test-valgrind TEST_EMULATION=1 COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" CRYPT_NAMES="$(MIN_CRYPT_NAMES)" IMAGE_FILESYSTEM_NAMES=raw </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'

.PHONY: tests test test*
tests test: \
  bar@EXEEXT@ \
  bar-debug@EXEEXT@ \
  bar-gcov@EXEEXT@ \
  bar-gprof@EXEEXT@ \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 $@ TEST_EMULATION=1 </dev/null | $(SED) 's/....\x08\x08\x08\x08//g'
test% tests%: \
  bar@EXEEXT@ \
  bar-debug@EXEEXT@ \
  bar-gcov@EXEEXT@ \
  bar-gprof@EXEEXT@ \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 $@
test%-debug tests%-debug: \
  bar-debug@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 $@
test%-gcov test%-gcov: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 $@
test%-gprof tests%-gprof: \
  bar-gprof@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 $@
test%-valgrind tests%-valgrind: \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C tests -j1 $@

.PHONY: tests_clean tests_distclean
tests_clean:
	@$(MAKE) -C tests clean

tests_distclean:
	@$(MAKE) -C tests distclean

# ----------------------------------------------------------------------------

# helper function to check valid exitcode
# call functionTestCheckExitcode,<min. valid exitcode>,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $3 2>/dev/null; if test $$? -lt $1 -o $$? -gt $2; then false; fi

# bar executables
BAR_GCOV     = ./bar-gcov@EXEEXT@
BAR_VALGRIND = ./bar-valgrind@EXEEXT@

# test environment variables
TEST_ENVIRONMENT = DISPLAY= SSH_ASKPASS=

run_debug_tests_code:
	$(call functionTestCheckExitcode,125,125,initAll1=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll2=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll3=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll4=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll5=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll6=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll7=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll8=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll9=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll10=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll11=1 $(TEST_BAR))

# helper function to check if parameter exists
# call functionVerifyParameter,<name>[,message]
functionVerifyParameter = \
  if test -z "$($1)"; then \
    if test -n "$2"; then \
      $(ECHO) >&2 "ERROR: $2"; \
    else \
      $(ECHO) >&2 "ERROR: parameter '$1' not set"; \
    fi; \
    exit 1; \
  fi

# code coverage analysis
.PHONY: gcov coverage
.PHONY: gcov_clean
.PHONY: gcov_zero
.PHONY: gcov_html
gcov coverage: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
ifneq ($(LCOV),)
	@$(MAKE) gcov_basic \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_compress \
          COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_delta_compress \
          COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_crypt \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="$(MIN_CRYPT_NAMES)" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_asymmetric_crypt \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_signatures \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_split \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_convert \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_image \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          IMAGE_COMPRESS_NAMES=none \
          EXT_BLOCK_SIZES=default \
          QUIET=1
	@$(MAKE) gcov_storage_file \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
ifneq ($(TEST_PASSWORD_FTP),)
	@$(MAKE) gcov_storage_ftp \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
ifneq ($(TEST_PASSWORD_SSH),)
	@$(MAKE) gcov_storage_scp \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_storage_sftp \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
ifneq ($(TEST_PASSWORD_WEBDAV),)
	@$(MAKE) gcov_storage_webdav \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
ifneq ($(TEST_PASSWORD_SMB),)
	@$(MAKE) gcov_storage_smb \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
	@$(MAKE) gcov_optical \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          OPTIONS="--cd-blank-command=true --cd-write-command=true --cd-write-image-command=true --dvd-blank-command=true --dvd-write-command=true --dvd-write-image-command=true --bd-blank-command=true --bd-write-command=true --bd-write-image-command=true" \
          TEST_OPTICAL_SLEEP_TIME=0 \
          TEST_OPTICAL_EMULATION=1 \
          QUIET=1
	@$(MAKE) gcov_device \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          OPTIONS="--cd-blank-command=true --cd-write-command=true --cd-write-image-command=true --dvd-blank-command=true --dvd-write-command=true --dvd-write-image-command=true --bd-blank-command=true --bd-write-command=true --bd-write-image-command=true" \
          TEST_DEVICE_SLEEP_TIME=0 \
          TEST_DEVICE_EMULATION=1 \
          QUIET=1
	@$(MAKE) gcov_index \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_server \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_combined \
          COMBINED_COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" \
          COMBINED_CRYPT_NAMES="none $(if @HAVE_GCRYPT@,AES256)" \
          QUIET=1
	@$(MAKE) gcov_arguments \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_misc \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_html
ifeq ($(TEST_PASSWORD_FTP),)
	@$(ECHO) Warning: no FTP password - skipped ftp test
endif
ifeq ($(TEST_PASSWORD_SSH),)
	@$(ECHO) Warning: no SSH password - skipped scp/sftp test
endif
ifeq ($(TEST_PASSWORD_WEBDAV),)
	@$(ECHO) Warning: no WebDAV password - skipped WebDAV test
endif
ifeq ($(TEST_PASSWORD_SMB),)
	@$(ECHO) Warning: no SMB/CIFS password - skipped SMB/CIFS test
endif
else
	@$(ECHO) "ERROR: no 'lcov' command - cannot run coverage analysis"
endif

gcov%: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
	$(MAKE) \
    -C tests \
    -j1 \
    TEST_BAR=$(BUILD_DIR)/bar/bar-gcov@EXEEXT@ \
    COMPRESS_NAMES="`if test -z "$(COMPRESS_NAMES)"; then $(ECHO) $(COMPRESS_NAMES); else $(ECHO) $(MIN_COMPRESS_NAMES); fi`" \
    CRYPT_NAMES="`if test -z "$(CRYPT_NAMES)"; then $(ECHO) $(CRYPT_NAMES); else $(ECHO) $(MIN_CRYPT_NAMES); fi`" \
    $(subst gcov,tests,$@)

gcov_clean:
	$(INSTALL) -d gcov
	$(FIND) gcov -type f -name '*.gcda'|$(XARGS) $(RMF)
	$(RMRF) coverage

gcov_zero:
	$(LCOV) --base-directory . --directory . --zerocounters

gcov_html:
ifneq ($(GENHTML),)
	$(LCOV) \
    --base-directory . \
    --directory . \
    --capture \
    --output-file bar-gcov.info
	$(INSTALL) -d coverage
	$(GENHTML) -o coverage bar-gcov.info --legend --ignore-errors source --synthesize-missing
	# work-around for bug in genhtml?
	$(LN) -sfT coverage/gcov.css gcov.css
else
	@$(ECHO) "ERROR: no 'lcov' command - cannot run coverage analysis"
endif

.PHONY: gprof_clean
gprof_clean:

gprof%: \
  bar-gprof@EXEEXT@ \
  bar-keygen@SHELLEXT@
	$(MAKE) \
    -C tests \
    -j1 \
    TEST_BAR=$(BUILD_DIR)/bar/bar-gprof@EXEEXT@ \
    COMPRESS_NAMES="`if test -z "$(COMPRESS_NAMES)"; then $(ECHO) $(COMPRESS_NAMES); else $(ECHO) $(MIN_COMPRESS_NAMES); fi`" \
    CRYPT_NAMES="`if test -z "$(CRYPT_NAMES)"; then $(ECHO) $(CRYPT_NAMES); else $(ECHO) $(MIN_CRYPT_NAMES); fi`" \
    $(subst gprof,tests,$@)

# ----------------------------------------------------------------------------

DEVICE_ZERO    = /dev/zero
DEVICE_RANDOM  = /dev/urandom

# different performance files
PERFORMANCE_FILES = \
  $(TEST_DATA_DIR)/data/zero100M.dat \
  $(TEST_DATA_DIR)/data/random100M.dat \
  $(TEST_DATA_DIR)/data/delta1/test100M.dat \
  $(TEST_DATA_DIR)/data/delta2/test100M.dat \

# temporary performance files
PERFORMANCE_FILES_CLEAN = \
  intermediate/*.bar \
  intermediate/new \
  intermediate/restore \
  intermediate/*.image

# test bar exeuctable
PERFORMANCE_BAR = ./bar@EXEEXT@

$(TEST_DATA_DIR)/data/zero100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=100 2>/dev/null
$(TEST_DATA_DIR)/data/random100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=100 2>/dev/null
$(TEST_DATA_DIR)/data/delta1/test100M.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1M count=100 2>/dev/null; \
        ) >$@
$(TEST_DATA_DIR)/data/delta2/test100M.dat: $(TEST_DATA_DIR)/data/delta1/test100M.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test100M.dat skip=0 bs=1M count=50 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1M count=1 2>/dev/null; \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test100M.dat skip=256 bs=1M count=49 2>/dev/null; \
        ) >$@

# performance tests
.PHONY: performance
performance:
	@$(MAKE) \
          $(if $(CHECK),\
            performance$(CHECK),\
            performance_none performance_zip_compress performance_bzip2_compress performance_lzma_compress performance_lzo_compress performance_lz4_compress performance_zstd_compress performance_delta_compress \
           )

.PHONY: performance1 performance_none
performance1 performance_none: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "none (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance2 performance_zip_compress
performance2 performance_zip_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "zip (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=zip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance3 performance_bzip2_compress
performance3 performance_bzip2_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "bzip2 (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=bzip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance4 performance_lzma_compress
performance4 performance_lzma_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "lzma (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=lzma9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance5 performance_lzo_compress
performance5 performance_lzo_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "lyo (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=lzo5 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance6 performance_lz4_compress
performance6 performance_lz4_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "lz4 (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=lz4-16 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance7 performance_zstd_compress
performance7 performance_zstd_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "zstd (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=zstd19 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance8 performance_delta_compress
performance8 performance_delta_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
ifeq (@HAVE_XDELTA3@,1)
	@$(ECHO) "delta (100M random):"
	@($(CD) $(TEST_DATA_DIR)/data/delta1; ../../../$(PERFORMANCE_BAR) -c ../../test-A.bar test100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null)
	@$(ECHO_NO_LF) "  Create : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -c ../../test-B.bar test100M.dat --overwrite-archive-files --compress-algorithm=xdelta9+lzma9 --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Test   : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -t ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Diff   : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -d ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Extract: "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -x ../../test-B.bar --delta-source=../../test-A.bar --destination=../../restore --overwrite-files 1>/dev/null 2>/dev/null")
endif

# ----------------------------------------------------------------------------
# install/uninstall
# Note: prefix is used for temporary installations

.PHONY: install uninstall

install: \
  $(TARGETS_INSTALL)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-debug@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) -m 644 bar.sym bar-debug.sym "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-keygen@SHELLEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-index@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-index-debug@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(WINDOWS_DLLS) "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)"
	if test ! -f "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)/bar.cfg"; then \
          $(INSTALL) -m 600 $(SOURCE_DIR)/bar.cfg "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)"; \
        else \
          echo "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)/bar.cfg NOT installed - file already exists!"; \
        fi
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)/jobs"
	for language in $(LANGUAGES); do \
          $(INSTALL) -d "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES"; \
          $(INSTALL) po/$$language/LC_MESSAGES/bar.mo "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES/bar.mo"; \
        done

# uninstall all
uninstall:
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-keygen@SHELLEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-index@EXEEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-index-debug@EXEEXT@"
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
        )
	$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)/bar.cfg"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-ca.pem"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-server-cert.pem"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/private/bar-server-key.pem"
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)/bar.jks" \
        )
	$(RMF) "$(DESTDIR)$(INSTALL_ETC_DIR)/init.d/barserver"
	$(RMF) "$(DESTDIR)$(INSTALL_MAN_DIR)/man7/bar.7"
	$(RMDIR) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/$(INSTALL_CONFIG_SUB_DIR)/jobs"
	for language in $(LANGUAGES); do \
          $(RMF) "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES/bar.mo"; \
        done

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist:
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/bar
	$(INSTALL) -d $(addprefix $(DIRECTORY)/bar/, \
	                 $(sort $(dir $(ALL_SOURCES)) \
	                 ) \
	              )
	$(foreach name,Makefile.in \
                       config.h.in \
                       $(sort $(ALL_SOURCES)), \
                       $(INSTALL) -m 664 -t $(DIRECTORY)/bar/$(dir $(name)) $(SOURCE_DIR)/$(name); \
        )
	$(INSTALL) -d $(DIRECTORY)/bar/po
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/bar/po \
                   $(sort $(SOURCE_DIR)/po/Makefile.in \
                          $(SOURCE_DIR)/po/*.pot \
                          $(SOURCE_DIR)/po/*.po \
                   )
	$(MAKE) -C tests dist DIRECTORY=../$(DIRECTORY)
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

# ----------------------------------------------------------------------------

ifeq ($(NO_DEPEND),)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include Makefile.depend
endif
endif
endif

# end of file
