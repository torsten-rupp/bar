# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/Makefile.in,v $
# $Revision: 1.17 $
# $Author: torsten $
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#------------------------------------ paths ----------------------------------

INSTALL_DIR     = @INSTALL_DIR@
INSTALL_BIN_DIR = @INSTALL_BIN_DIR@
CONFIG_DIR      = @CONFIG_DIR@
TLS_DIR         = @TLS_DIR@

#--------------------------------- tool chain --------------------------------

CC                  = @CC@
CC_FLAGS            = @CC_FLAGS@ -g
CC_WARN_FLAGS       = -Wall -Wpointer-arith -Wunused-label -Wunused-parameter -Wunused-variable -Wmissing-prototypes -Wmissing-declarations
CC_OPTIMIZE         = @CC_OPTIMIZE@
CC_DEFINES          = @CC_DEFINES@ _LONG_LONG
# -D_LONG_LONG
CC_INCLUDES         = @CC_INCLUDES@

LD                  = @CC@
LD_FLAGS            = @LD_FLAGS@
LD_LIBRARY_PATHS    = @LIBRARY_PATHS@
LD_LIBRARIES        = c m pthread @LIBRARIES@
LD_STATIC_LIBRARIES = @STATIC_LIBRARIES@


#---------------------------------- commands----------------------------------

CP         = cp
DIFF       = diff
ECHO       = echo
ECHO_NO_LF = echo -n
INSTALL    = @INSTALL@
MKDIR      = mkdir
PERL       = @PERL@
RMF        = rm -f
RMRF       = rm -rf
TAR        = tar

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR = 0
VERSION_MINOR = 04

CRYPT_NAMES    = none 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9 bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9

CRYPT=none
COMPRESS=none

TEST_PASSWORD=Franz_Kafka:Die_Verwandlung

DISTRIBUTION_NAME = bar-$(VERSION_MAJOR).$(VERSION_MINOR)

#---------------------------------- rules ------------------------------------

# disable implicit rule for *.y -> *.c
%.c:%.y

%.o:%.c
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR=$(VERSION_MAJOR) -DVERSION_MINOR=$(VERSION_MINOR) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(for z,$(CC_INCLUDES),-I$z) -c $*.c -o $*.o

%:%.o
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(foreach z,$(LD_LIBRARIES),-l$z) $(foreach z,$(LD_LIBRARIES),-l$z) \
          $(foreach z,$(LD_STATIC_LIBRARIES),-Wl,-static -l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z)

#--------------------------------- objects -----------------------------------

BAR_SOURCES          = bar.c \
                       errors.c \
                       commands_create.c \
                       commands_list.c \
                       commands_test.c \
                       commands_compare.c \
                       commands_restore.c \
                       files.c \
                       archive.c \
                       archive_format.c \
                       chunks.c \
                       patterns.c \
                       compress.c \
                       crypt.c \
                       passwords.c \
                       misc.c \
                       storage.c \
                       network.c \
                       server.c \
                       \
                       global.c \
                       cmdoptions.c \
                       configvalues.c \
                       lists.c \
                       strings.c \
                       stringlists.c \
                       threads.c \
                       msgqueues.c \
                       semaphores.c \
                       filefragmentlists.c \
                       arrays.c \
                       dictionaries.c \

BAR_OBJECTS          = $(foreach z,$(BAR_SOURCES),$(subst .c,.o,$z)) \
                       errors.o \
                       archive_format.o

DESTROYER_SOURCES    = destroyer.c \
                       global.c \
                       cmdoptions.c \
                       lists.c \
                       strings.c \

DESTROYER_OBJECTS    = $(foreach z,$(DESTROYER_SOURCES),$(subst .c,.o,$z)) \

OTHER_SOURCES        = errors.pl \
                       errors.def \
                       archive_format.pl \
                       archive_format.def \
                       barcontrol.tcl \
                       bar.cfg \

INTERMEDIATE         = errors.c \
                       errors.h \
                       archive_format.c \
                       archive_format.h \

TLS_FILES            = bar-key.pem \
                       bar-ca.pem \
                       bar-server-key.pem \
                       bar-server-cert.pem \

TARGETS              = bar \
                       destroyer \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean depend
all: $(TARGETS) cert barcontrol.tcl

clean:
	$(RMF) $(BAR_OBJECTS)
	$(RMF) $(DESTROYER_OBJECTS)
	$(RMF) $(INTERMEDIATE)
	$(RMF) $(TARGETS)
	$(RMF) $(TLS_FILES)
	$(RMRF) $(DISTRIBUTION_NAME)
	$(RMF) $(DISTRIBUTION_NAME).tgz
	$(MAKE) -C tcl/scanx clean

distclean: clean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h
	$(RMF) config.status
	$(RMF) config.log
	$(MAKE) -C tcl/scanx distclean

depend: Makefile.depend

# create dependencies
Makefile.depend: $(BAR_SOURCES) $(DESTROYER_SOURCES) $(INTERMEDIATE)
	$(ECHO) > Makefile.depend
	for z in $(BAR_SOURCES) $(DESTROYER_SOURCES); do \
          $(CC) -MM >> Makefile.depend $$z; \
        done;

# create BAR
bar@EXEEXT@: $(BAR_OBJECTS)

# error definition
errors.h: errors.def
	$(PERL) errors.pl < $^ -h $@
errors.c: errors.def
	$(PERL) errors.pl < $^ -c $@

# archive format definition
archive_format.h: archive_format.def
	$(PERL) archive_format.pl < $^ -h $@
archive_format.c: archive_format.def
	$(PERL) archive_format.pl < $^ -c $@

# create SSL certificates
.PHONY: cert clean_cert
cert: $(TLS_FILES)

clean_cert:
	$(RMF) $(TLS_FILES)

bar-key.pem:
	certtool \
          --generate-privkey \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-ca.pem: bar-key.pem
	certtool \
          --generate-self-signed \
          --template ssl/ca.tmpl \
          --load-privkey bar-key.pem \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-server-key.pem:
	certtool \
          --generate-privkey \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-server-cert.pem: bar-server-key.pem
	certtool \
          --generate-certificate \
          --template ssl/server.tmpl \
          --load-privkey bar-server-key.pem \
          --load-ca-certificate bar-ca.pem \
          --load-ca-privkey bar-key.pem \
          --outfile $@ \
          1>/dev/null 2>/dev/null

# create destroyer (for testing only!)
destroyer@EXEEXT@: $(DESTROYER_OBJECTS) 
	$(LD) $(LD_FLAGS) -o $@ $^ -lc -lpthread

# create BAR frontend
barcontrol.tcl: tcl/scanx/libscanx.so tcl/scanx/pkgIndex.tcl

tcl/scanx/libscanx.so: tcl/scanx/scanx.c
	$(MAKE) -C tcl/scanx $(@F)
tcl/scanx/pkgIndex.tcl:
	$(MAKE) -C tcl/scanx $(@F)

# install/uninstall
.PHONY: install uninstall
install:
	if test ! -d "$(DESTDIR)$(INSTALL_DIR)"; then $(INSTALL) -d "$(DESTDIR)$(INSTALL_DIR)"; fi
	if test ! -d "$(DESTDIR)$(INSTALL_BIN_DIR)"; then $(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"; fi
	$(INSTALL) bar@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	if test ! -d "$(DESTDIR)$(CONFIG_DIR)"; then $(INSTALL) -d "$(DESTDIR)$(CONFIG_DIR)"; fi
	if test ! -f "$(DESTDIR)$(CONFIG_DIR)/bar.cfg"; then $(INSTALL) -m 600 bar.cfg "$(DESTDIR)$(CONFIG_DIR)"; else echo "$(DESTDIR)$(CONFIG_DIR)/bar.cfg NOT installed - file already exists!"; fi
	if test ! -d "$(DESTDIR)$(TLS_DIR)"; then $(INSTALL) -d "$(DESTDIR)$(TLS_DIR)"; fi
	if test ! -d "$(DESTDIR)$(TLS_DIR)/certs"; then $(INSTALL) -d "$(DESTDIR)$(TLS_DIR)/certs"; fi
	$(INSTALL) -m 644 bar-ca.pem "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-server-cert.pem "$(DESTDIR)$(TLS_DIR)/certs"
	if test ! -d "$(DESTDIR)$(TLS_DIR)/private"; then $(INSTALL) -d -m 700 "$(DESTDIR)$(TLS_DIR)/private"; fi
	$(INSTALL) -m 600 bar-server-key.pem "$(DESTDIR)$(TLS_DIR)/private"
	$(MAKE) -C tcl/scanx install
	$(MAKE) -C tcl/mclistbox install

uinstall:
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"
	$(RMF) "$(DESTDIR)$(CONFIG_DIR)/bar.cfg"
	$(RMF) "$(DESTDIR)$(TLS_DIR)/certs/bar-ca.pem"
	$(RMF) "$(DESTDIR)$(TLS_DIR)/certs/bar-server-cert.pem"
	$(RMF) "$(DESTDIR)$(TLS_DIR)/private/bar-server-key.pem"

# run server
.PHONY: barserver barserver_ssl
barserver: bar
	nice ./bar --daemon

barserver_ssl: bar $(TLS_FILES)
	nice ./bar --daemon --server-ca-file=bar-ca.pem --server-cert-file=bar-server-cert.pem --server-key-file=bar-server-key.pem

# do test
.PHONY: test test1 test2 test3 test4 test_all
test:
	@$(MAKE) QUIET=1 -s test1 test2 test3 test4 test_all

test1: bar
	@$(ECHO_NO_LF) "Test 1: basic..."
	$(MAKE) BAR_FILE="test" OPTIONS="--compress-algorithm=none --crypt-algorithm=none" standard_test
	@$(ECHO) "ok"

test2 test_compress: bar
	@$(ECHO_NO_LF) "Test 2: compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) BAR_FILE="test" OPTIONS="--compress-algorithm=$$compress" standard_test; \
        done
	@$(ECHO) "ok"

test3 test_crypt: bar
	@$(ECHO_NO_LF) "Test 3: crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) BAR_FILE="test-###" OPTIONS="--crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD)" standard_test; \
        done
	@$(ECHO) "ok"

test4 test_split: bar
	@$(ECHO_NO_LF) "Test 4: split..."
	$(MAKE) BAR_FILE="test-###" OPTIONS="-s 100000" standard_test
	@$(ECHO) "ok"

test_all: bar
	@$(ECHO_NO_LF) "Test all..."
	for compress in $(COMPRESS_NAMES); do \
          for crypt in $(CRYPT_NAMES); do \
            $(MAKE) BAR_FILE=test-### OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) -s 100000" standard_test; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit 1; \
            fi; \
          done; \
        done
	@$(ECHO) "ok"

.PHONY: standard_test
standard_test: bar
	$(RMRF) test/*.bar test/*.bid test/new test/restore
	./bar -c test/$(BAR_FILE).bar test/data $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	./bar -l test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -t test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -d test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -x test/test*.bar $(OPTIONS) --directory test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.txt -x circular-link.dat test/data test/restore/test/data
	#
	$(RMRF) test/*.bar test/*.bid test/new test/restore
	./bar -c test/$(BAR_FILE)-full.bar --full --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	$(MKDIR) test/new; $(CP) test/data/random1024.dat test/new/random1024-new.dat
	./bar -c test/$(BAR_FILE)-incremental.bar --incremental --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	./bar -d test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -x test/test*.bar $(OPTIONS) --directory test/restore $(if $(QUIET),1>/dev/null)

.PHONY: standard_test_destroy
standard_test_destroy: bar destroyer
	$(RMRF) test/*.bar test/*.bid test/restore
	./bar -c test/$(BAR_FILE).bar test/data/zero1024.dat $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	./destroyer test/test.bar m:0 > test/test.bar_destroyed
	./bar -l test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -t test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -d test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -x test/test.bar_destroyed $(OPTIONS) --directory test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.txt test/data test/restore/test/data

.PHONY: dist $(DISTRIBUTION_NAME).tar.bz2
dist: $(DISTRIBUTION_NAME).tar.bz2

$(DISTRIBUTION_NAME).tar.bz2:
	$(INSTALL) -d $(DISTRIBUTION_NAME)
	$(CP) \
          $(sort $(BAR_SOURCES) \
                 $(patsubst %.c,%.h,$(BAR_SOURCES)) \
                 $(DESTROYER_SOURCES) \
                 $(patsubst %.c,%.h,$(DESTROYER_SOURCES)) \
                 $(OTHER_SOURCES) \
                 barcontrol.tcl \
                 configure \
                 configure.in \
                 Makefile.in \
                 config.h.in \
                 bar.cfg \
                 barcontrol.cfg \
                 ToDo \
                 README \
                 ChangeLog \
          ) \
          $(DISTRIBUTION_NAME)
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/bin
	$(INSTALL) bin/config.guess bin/config.sub bin/install-sh $(DISTRIBUTION_NAME)/bin
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/bitmaps
	$(INSTALL) bitmaps/*.gif $(DISTRIBUTION_NAME)/bitmaps
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/ssl
	$(INSTALL) ssl/*.tmpl $(DISTRIBUTION_NAME)/ssl
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/tcl/scanx
	$(INSTALL) tcl/scanx/*.in tcl/scanx/*.m4 tcl/scanx/*.c tcl/scanx/*.tcl tcl/scanx/configure tcl/scanx/install-sh $(DISTRIBUTION_NAME)/tcl/scanx
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/tcl/mclistbox
	$(INSTALL) tcl/mclistbox/*.tcl tcl/mclistbox/mclistbox-*.tar.gz tcl/mclistbox/Makefile $(DISTRIBUTION_NAME)/tcl/mclistbox
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/misc
	$(INSTALL) misc/*.patch $(DISTRIBUTION_NAME)/misc
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/doc
	$(INSTALL) doc/*.txt $(DISTRIBUTION_NAME)/doc
	#
	$(TAR) cjf $@ $(DISTRIBUTION_NAME)
	$(RMRF) $(DISTRIBUTION_NAME)

-include Makefile.depend

# end of file
