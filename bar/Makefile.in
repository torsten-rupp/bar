# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/Makefile.in,v $
# $Revision: 1.69 $
# $Author: torsten $
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

ENABLE_DEBUG    = @ENABLE_DEBUG@
ENABLE_GUI      = @ENABLE_GUI@

PLATFORM        = @PLATFORM@

#------------------------------------ paths ----------------------------------

# Note: prefix is used for temporary installations
INSTALL_DIR     = @INSTALL_DIR@
INSTALL_BIN_DIR = @INSTALL_BIN_DIR@
ETC_DIR         = /etc
CONFIG_DIR      = @CONFIG_DIR@
TLS_DIR         = @TLS_DIR@
MAN_DIR         = @MAN_DIR@

#--------------------------------- tool chain --------------------------------

CERTTOOL = @CERTTOOL@
OPENSSL  = @OPENSSL@
KEYTOOL  = @KEYTOOL@

UNOCONV  = @UNOCONV@
TXT2MAN  = @TXT2MAN@

#---------------------------------- commands----------------------------------

CAT        = cat
CD         = cd
CHMOD      = chmod
CP         = cp
DIFF       = diff
ECHO       = echo
ECHO_NO_LF = echo -n
EPM        = @EPM@
GREP       = grep
INSTALL    = @INSTALL@
LN         = ln
MD5SUM     = @MD5SUM@
MKDIR      = mkdir
MV         = mv
PERL       = @PERL@
RMDIR      = rmdir
RMF        = rm -f
RMRF       = rm -rf
SED        = sed
TAR        = tar
ZIP        = zip

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR := $(shell $(CAT) version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) version|$(GREP) MINOR|$(SED) 's/MINOR=//g')

CRYPT_NAMES    = none 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9 bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9

CRYPT=none
COMPRESS=none

TEST_PASSWORD=Franz_Kafka:Die_Verwandlung

DISTRIBUTION_NAME = bar-$(VERSION_MAJOR).$(VERSION_MINOR)

#---------------------------------- rules ------------------------------------

#--------------------------------- objects -----------------------------------

TARGETS              = bar/bar \
                       bar/bar-keygen \
                       $(if $(findstring $(ENABLE_GUI),yes),\
                         barcontrol/barcontrol \
                         barcontrol/barcontrol.bat \
                       ) \

MAN                  = doc/bar.7 \
                       doc/bar.pdf \

OTHER_SOURCES        = errors.pl \
                       errors.def \

KEY_FILES            = bar-key.pem \
                       bar-ca.pem \
                       bar-server-key.pem \
                       bar-server-cert.pem \
                       bar.jks \

SCRIPTS              = scripts/barserver-SuSE \
                       scripts/barserver-debian \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean

all: \
  $(TARGETS) \
  $(MAN)\
  $(KEY_FILES)

clean: \
  clean_keys \
  clean_doc \
  clean_rpm \
  clean_deb \
  clean_debian_package
	-$(MAKE) -C bar clean
ifeq ($(ENABLE_GUI),yes)
	-$(MAKE) -C barcontrol clean
endif
	$(RMRF) $(DISTRIBUTION_NAME)
	$(RMF) $(DISTRIBUTION_NAME).tar.bz2
	$(RMRF) tmp

distclean: clean
	-$(MAKE) -C bar distclean
ifeq ($(ENABLE_GUI),yes)
	-$(MAKE) -C barcontrol distclean
endif
	$(RMF) Makefile
	$(RMF) src/Config.java
	$(RMF) epm.list
	$(RMF) config.status
	$(RMF) config.log

# ----------------------------------------------------------------------------

# --- create main

# create bar
.PHONY: bar

bar bar/bar:
	$(MAKE) -C bar bar

# create bar-keygen
.PHONY: bar-keygen

bar-keygen bar/bar-keygen:
	$(MAKE) -C bar bar-keygen

# create barcontrol
.PHONY: barcontrol

barcontrol barcontrol/barcontrol:
ifeq ($(ENABLE_GUI),yes)
	$(MAKE) -C barcontrol barcontrol
else
	@$(ECHO) "ERROR: GUI components not configured - cannot be build."
endif

barcontrol/barcontrol.bat:
ifeq ($(ENABLE_GUI),yes)
	$(MAKE) -C barcontrol barcontrol.bat
else
	@$(ECHO) "ERROR: GUI components not configured - cannot be build."
endif

barcontrol/barcontrol%.jar:
ifeq ($(ENABLE_GUI),yes)
	$(MAKE) -C barcontrol barcontrol%.jar
else
	@$(ECHO) "ERROR: GUI components not configured - cannot be build."
endif

# ----------------------------------------------------------------------------

# --- create SSL keys and certificates

.PHONY: keys clean_keys

keys: \
  $(KEY_FILES)

clean_keys:
	$(RMF) $(KEY_FILES)

$(KEY_FILES):
	$(MAKE) -C bar bar-keygen
	bar/bar-keygen \
          --private-directory=. \
          --certs-directory=. \
          --java-private-directory=. \
          $(if $(findstring $(KEYTOOL),certtool),--certtool) \
          $(if $(findstring $(KEYTOOL),openssl),--openssl) \
          --force \

# ----------------------------------------------------------------------------

# --- create documentation

.PHONY: doc clean_doc man clean_man showman

doc: \
  doc/bar.7 \
  doc/bar.pdf

clean_doc:
ifneq ($(TXT2MAN),)
	$(RMF) doc/bar.7
endif
ifneq ($(UNOCONV),)
	$(RMF) doc/bar.pdf
endif

# create man-page

man: \
  doc/bar.7

clean_man:
	$(RMF) doc/bar.7

doc/bar.7: \
  doc/bar.txt
ifneq ($(TXT2MAN),)
	$(CAT) doc/bar.txt | $(TXT2MAN) -t bar -r $(VERSION_MAJOR).$(VERSION_MINOR) -s 7 -v "Linux User's Manual" > $@
else
	@$(ECHO) "ERROR: no 'txt2man' tool available! Cannot create man page."
endif

showman:
ifneq ($(TXT2MAN),)
	$(CAT) doc/bar.txt | $(TXT2MAN) -t bar -r $(VERSION_MAJOR).$(VERSION_MINOR) -s 7 -v "Linux User's Manual" -T
else
	@$(ECHO) "ERROR: no 'txt2man' tool available! Cannot create man page."
endif

# create manual

doc/bar.pdf: \
  doc/bar.odt
ifneq ($(UNOCONV),)
	$(UNOCONV) -f pdf doc/bar.odt
else
	@$(ECHO) "ERROR: no 'unoconv' tool available! Cannot create PDF manual."
endif


# ----------------------------------------------------------------------------

# --- install/uninstall

.PHONY: install install_base install_man install_keys uninstall

install: \
  install_base \
  install_man \
  install_keys

# install base files
install_base: \
  $(TARGETS) \
  $(if $(findstring $(ENABLE_GUI),yes),$(if $(findstring $(PLATFORM),Linux),barcontrol/barcontrol barcontrol/barcontrol-linux.jar) \
                                       $(if $(findstring $(PLATFORM),Windows),$(if $(LAUNCH4J),barcontrol/barcontrol.exe,barcontrol/barcontrol.bat barcontrol/barcontrol-windows.jar)) \
  ) \
  $(KEY_FILES) \
  $(SCRIPTS) \
  $(MAN)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar/bar@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
ifeq ($(ENABLE_GUI),yes)
ifeq ($(PLATFORM),Linux)
	$(INSTALL) barcontrol/barcontrol \
                   barcontrol/barcontrol-linux.jar \
                   "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
ifeq ($(PLATFORM),Windows)
	$(INSTALL) $(if $(LAUNCH4J),barcontrol/barcontrol.exe,\
                                    barcontrol/barcontrol.bat barcontrol/barcontrol-windows.jar \
                    ) \
                   "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
endif
	$(INSTALL) -d "$(DESTDIR)$(CONFIG_DIR)"
	if test ! -f "$(DESTDIR)$(CONFIG_DIR)/bar.cfg"; then \
          $(INSTALL) -m 600 bar/bar.cfg "$(DESTDIR)$(CONFIG_DIR)"; \
        else \
          echo "$(DESTDIR)$(CONFIG_DIR)/bar.cfg NOT installed - file already exists!"; \
        fi
	$(INSTALL) -d "$(DESTDIR)$(CONFIG_DIR)/jobs"
	if test ! -f $(DESTDIR)$(ETC_DIR)/init.d/barserver; then \
          $(INSTALL) -d "$(DESTDIR)$(ETC_DIR)/init.d"; \
          if test -f $(ETC_DIR)/SuSE-release; then \
            $(INSTALL) -m 600 scripts/barserver-SuSE "$(DESTDIR)$(ETC_DIR)/init.d/barserver"; \
          else \
            $(INSTALL) -m 600 scripts/barserver-debian "$(DESTDIR)$(ETC_DIR)/init.d/barserver"; \
          fi; \
        else \
          echo "$(ETC_DIR)/init.d/barserver NOT installed - file already exists!"; \
        fi

# install man-page
install_man: \
  doc/bar.7
	$(INSTALL) -d "$(DESTDIR)$(MAN_DIR)/7"
	$(INSTALL) -m 644 doc/bar.7 "$(DESTDIR)$(MAN_DIR)/man7"

# install keys
install_keys: \
  $(KEY_FILES)
	$(INSTALL) -d "$(DESTDIR)$(TLS_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-ca.pem "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-server-cert.pem "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -d -m 700 "$(DESTDIR)$(TLS_DIR)/private"
	$(INSTALL) -m 600 bar-server-key.pem "$(DESTDIR)$(TLS_DIR)/private"
ifeq ($(ENABLE_GUI),yes)
	$(INSTALL) bar.jks "$(DESTDIR)$(CONFIG_DIR)"
endif

# uninstall all
uninstall:
	@read -n 1 -p "Really uninstall? [y/N] " s; \
        if test "$s" = "y" -o "$s" = "Y"; then \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"; \
          $(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol" \
                                                      "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar" \
                                                      "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
          ) \
          $(RMF) "$(DESTDIR)$(CONFIG_DIR)/bar.cfg"; \
          $(RMF) "$(DESTDIR)$(TLS_DIR)/certs/bar-ca.pem"; \
          $(RMF) "$(DESTDIR)$(TLS_DIR)/certs/bar-server-cert.pem"; \
          $(RMF) "$(DESTDIR)$(TLS_DIR)/private/bar-server-key.pem"; \
          $(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(CONFIG_DIR)/bar.jks"; \
          ) \
          $(RMF) "$(DESTDIR)$(ETC_DIR)/init.d/barserver"; \
          $(RMF) "$(DESTDIR)$(MAN_DIR)/man7/bar.7"; \
        fi

# ----------------------------------------------------------------------------

# --- tests

# run server
.PHONY: barserver barserver_ssl
barserver:
	@$(MAKE) -C bar barserver

barserver_ssl:
	@$(MAKE) -C bar barserver_ssl

# do tests
.PHONY: test test1 test2 test3 test4 test5 testall
test:
	@$(MAKE) -C bar test
test1:
	@$(MAKE) -C bar test1
test2:
	@$(MAKE) -C bar test2
test3:
	@$(MAKE) -C bar test3
test4:
	@$(MAKE) -C bar test4
test5:
	@$(MAKE) -C bar test5
test_all:
	@$(MAKE) -C bar test_all

# memory checks
.PHONY: memcheck memcheck1 memcheck_extended
memcheck:
	@$(MAKE) -C bar memcheck

memcheck_extended:
	@$(MAKE) -C bar memcheck_extended

# ----------------------------------------------------------------------------

# --- distribution
.PHONY: dist $(DISTRIBUTION_NAME).tar.bz2

dist: \
  $(DISTRIBUTION_NAME).tar.bz2

# create distribution
$(DISTRIBUTION_NAME).tar.bz2: \
  $(TARGETS) \
  \
  configure \
  configure.in \
  Makefile.in \
  epm.list.in \
  version \
  ToDo \
  ChangeLog \
  \
  download-third-party-packages.sh \
  $(OTHER_SOURCES) \
  \
  bin/config.guess \
  bin/config.sub \
  bin/install-sh \
  bin/config.guess \
  bin/config.sub bin/install-sh \
  \
  ssl/certtool/*.tmpl \
  ssl/openssl/*.tmpl \
  \
  $(SCRIPTS) \
  \
  misc/*.patch \
  \
  doc/README \
  doc/COPYING \
  doc/bar.odt \
  doc/*.txt \
  $(MAN)
	$(INSTALL) -d $(DISTRIBUTION_NAME)
	$(INSTALL) -m 775 \
                   configure \
                   download-third-party-packages.sh \
                   $(OTHER_SOURCES) \
                   $(DISTRIBUTION_NAME)
	$(INSTALL) -m 664 \
                   configure.in \
                   Makefile.in \
                   epm.list.in \
                   version \
                   ToDo \
                   ChangeLog \
                   $(DISTRIBUTION_NAME)
	$(INSTALL) -d $(DISTRIBUTION_NAME)/bin
	$(INSTALL) -m 664 \
                   bin/config.guess \
                   bin/config.sub \
                   bin/install-sh \
                   $(DISTRIBUTION_NAME)/bin
	$(MAKE) -C bar dist DIRECTORY="../$(DISTRIBUTION_NAME)"
	$(MAKE) -C barcontrol dist DIRECTORY="../$(DISTRIBUTION_NAME)"
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/bin
	$(INSTALL) -m 664 \
                   bin/config.guess \
                   bin/config.sub bin/install-sh \
                   $(DISTRIBUTION_NAME)/bin
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/ssl
	$(INSTALL) -d $(DISTRIBUTION_NAME)/ssl/certtool
	$(INSTALL) -m 664 \
                   ssl/certtool/*.tmpl \
                   $(DISTRIBUTION_NAME)/ssl/certtool
	$(INSTALL) -d $(DISTRIBUTION_NAME)/ssl/openssl
	$(INSTALL) -m 664 \
                   ssl/openssl/*.tmpl \
                   $(DISTRIBUTION_NAME)/ssl/openssl
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/scripts
	$(INSTALL) -m 664 \
                   $(SCRIPTS) \
                   $(DISTRIBUTION_NAME)/scripts
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/misc
	$(INSTALL) -m 664 \
                   misc/*.patch \
                   $(DISTRIBUTION_NAME)/misc
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/doc
	$(INSTALL) -m 664 \
                   doc/README \
                   doc/COPYING \
                   doc/bar.odt \
                   doc/bar.pdf \
                   doc/*.txt \
                   doc/bar.7 \
                   $(DISTRIBUTION_NAME)/doc
	#
	$(TAR) cjf $@ $(DISTRIBUTION_NAME)
	$(RMRF) $(DISTRIBUTION_NAME)
	#
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif

# ----------------------------------------------------------------------------

# packages

# --- create RPM
.PHONY: rpm clean_rpm

rpm: \
  bar-$(VERSION_MAJOR).$(VERSION_MINOR).rpm

clean_rpm:
	$(RMF) bar-$(VERSION_MAJOR).$(VERSION_MINOR).rpm

bar-$(VERSION_MAJOR).$(VERSION_MINOR).rpm: \
  epm.list
ifneq ($(EPM),)
	$(INSTALL) -d tmp/package
	$(EPM) \
          -f rpm \
          --output-dir tmp/package \
          PACKAGE_CMD=1 \
          PACKAGE_GUI=1 \
          bar \
          epm.list
	$(MV) tmp/package/*rpm $@
	$(RMRF) tmp/package
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif
else
	@$(ECHO) "No EPM installed. Cannot create RPM package."
endif

# create DEB
.PHONY: deb clean_deb

deb: \
  bar-$(VERSION_MAJOR).$(VERSION_MINOR).deb \
  bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).deb

clean_deb:
	$(RMF) bar-$(VERSION_MAJOR).$(VERSION_MINOR).deb
	$(RMF) bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).deb

bar-$(VERSION_MAJOR).$(VERSION_MINOR).deb: epm.list
ifneq ($(EPM),)
	$(INSTALL) -d tmp/package
	$(EPM) \
          -f deb \
          --output-dir tmp/package \
          PACKAGE_CMD=1 \
          bar \
          epm.list
	$(MV) tmp/package/*deb $@
	$(RMRF) tmp/package
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif
else
	@$(ECHO) "No EPM installed. Cannot create DEB package."
endif
bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).deb: epm.list
ifneq ($(EPM),)
	$(INSTALL) -d tmp/package
	$(EPM) \
          -f deb \
          --output-dir tmp/package \
          PACKAGE_GUI=1 \
          bar-gui \
          epm.list
	$(MV) tmp/package/*deb $@
	$(RMRF) tmp/package
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif
else
	@$(ECHO) "No EPM installed. Cannot create DEB package."
endif

# create x86 Debian FTP archive package
.PHONY: debian_package clean_debian_package debian_package_install debian_package_install_gui

debian_package: \
  $(DISTRIBUTION_NAME).tar.bz2
	$(INSTALL) -d tmp/debian_package
	($(CD) tmp/debian_package; tar xjf ../../$(DISTRIBUTION_NAME).tar.bz2)
	($(CD) tmp/debian_package/$(DISTRIBUTION_NAME); $(LN) -s -f ../../../debian)
	($(CD) tmp/debian_package/$(DISTRIBUTION_NAME); dpkg-buildpackage -rfakeroot)
        #
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.dsc .
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.changes .
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.deb .
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.tar.gz .
	$(MV) tmp/debian_package/bar-gui_$(VERSION_MAJOR).$(VERSION_MINOR)-1_all.deb .

clean_debian_package:
	$(RMRF) tmp/debian_package
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.dsc
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.changes.dsc
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.deb
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.tar.gz
	$(RMF) bar-gui_$(VERSION_MAJOR).$(VERSION_MINOR)-1_all.deb

# temporary debian install
.PHONY: debian_install
debian_package_install: \
  $(TARGETS) \
  $(if $(findstring $(ENABLE_GUI),yes),$(if $(findstring $(PLATFORM),Linux),barcontrol/barcontrol barcontrol/barcontrol-linux.jar) \
                                       $(if $(findstring $(PLATFORM),Windows),$(if $(LAUNCH4J),barcontrol/barcontrol.exe,barcontrol/barcontrol.bat barcontrol/barcontrol-windows.jar)) \
  ) \
  $(SCRIPTS)
	$(INSTALL) -d "$(prefix)/$(INSTALL_DIR)"
	$(INSTALL) -d "$(prefix)/$(INSTALL_BIN_DIR)"
	$(INSTALL) bar/bar@EXEEXT@ "$(prefix)/$(INSTALL_BIN_DIR)"
	$(INSTALL) -d "$(prefix)/$(CONFIG_DIR)"
	$(INSTALL) -m 600 bar/bar.cfg "$(prefix)/$(CONFIG_DIR)"
	$(INSTALL) -d "$(prefix)/$(CONFIG_DIR)/jobs"
	$(INSTALL) -d "$(prefix)/$(ETC_DIR)/init.d"
	$(INSTALL) -m 600 scripts/barserver-debian "$(prefix)/$(ETC_DIR)/init.d/barserver"

# temporary debian install for GUI tools
.PHONY: debian_install_gui
debian_package_install_gui: \
  $(TARGETS) \
  $(if $(findstring $(ENABLE_GUI),yes),$(if $(findstring $(PLATFORM),Linux),barcontrol/barcontrol barcontrol/barcontrol-linux.jar) \
                                       $(if $(findstring $(PLATFORM),Windows),$(if $(LAUNCH4J),barcontrol/barcontrol.exe,barcontrol/barcontrol.bat barcontrol/barcontrol-windows.jar)) \
  ) \
  $(SCRIPTS)
	$(INSTALL) -d "$(prefix)/$(INSTALL_BIN_DIR)"
ifeq ($(ENABLE_GUI),yes)
ifeq ($(PLATFORM),Linux)
	$(INSTALL) barcontrol/barcontrol \
                   barcontrol/barcontrol-linux.jar \
                   "$(prefix)/$(INSTALL_BIN_DIR)"
endif
ifeq ($(PLATFORM),Windows)
	$(INSTALL) $(if $(LAUNCH4J),barcontrol/barcontrol.exe,\
                                    barcontrol/barcontrol.bat barcontrol/barcontrol-windows.jar \
                    ) \
                   "$(prefix)/$(INSTALL_BIN_DIR)"
endif
endif

# --- create GUI package
.PHONY: gui clean_gui

gui: \
  bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).zip

clean_gui:
	$(RMF) bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).zip

bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).zip: \
  barcontrol/barcontrol \
  barcontrol/barcontrol-linux.jar \
  barcontrol/barcontrol-linux_64.jar \
  barcontrol/barcontrol.bat \
  barcontrol/barcontrol-windows.jar \
  barcontrol/barcontrol-windows_64.jar \
  barcontrol/barcontrol-solaris.jar \
  barcontrol/barcontrol-macosx.jar \
  barcontrol/barcontrol-macosx_64.jar
	$(INSTALL) -d tmp/gui/linux
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol \
                   tmp/gui/linux
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-linux.jar \
                   barcontrol/barcontrol-linux_64.jar \
                   tmp/gui/linux
	
	$(INSTALL) -d tmp/gui/windows
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol.bat \
                   tmp/gui/windows
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-windows.jar \
                   barcontrol/barcontrol-windows_64.jar \
                   tmp/gui/windows
	
	$(INSTALL) -d tmp/gui/solaris
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol \
                   tmp/gui/solaris
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-solaris.jar \
                   tmp/gui/solaris
	
	$(INSTALL) -d tmp/gui/macosx
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol \
                   tmp/gui/macosx
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-macosx.jar \
                   barcontrol/barcontrol-macosx_64.jar \
                   tmp/gui/macosx
	
	($(CD) tmp/gui; $(ZIP) -r ../../$@ linux windows solaris macosx)
	$(RMRF) tmp/gui
        
# end of file
