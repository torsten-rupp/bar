# ----------------------------------------------------------------------------
#
# aicas GmbH, Karlsruhe
#
# $Source: /home/torsten/cvs/bar/Makefile.in,v $
# $Revision: 1.6 $
# $Author: torsten $
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#--------------------------------- tool chain --------------------------------

CC                  = @CC@
CC_FLAGS            = @CC_FLAGS@ -g
CC_WARN_FLAGS       = -Wall -Wpointer-arith -Wunused-label -Wunused-parameter -Wunused-variable -Wmissing-prototypes -Wmissing-declarations
CC_OPTIMIZE         = @CC_OPTIMIZE@
CC_DEFINES          = @CC_DEFINES@ _LONG_LONG
# -D_LONG_LONG
CC_INCLUDES         = @CC_INCLUDES@

LD                  = @CC@
LD_FLAGS            = @LD_FLAGS@
LD_LIBRARY_PATHS    = @LIBRARY_PATHS@
LD_LIBRARIES        = c m pthread @LIBRARIES@
LD_STATIC_LIBRARIES = @STATIC_LIBRARIES@

#---------------------------------- commands----------------------------------

ECHO       = echo
ECHO_NO_LF = echo -n
RMF        = rm -f
RMRF       = rm -rf
PERL       = @PERL@
DIFF       = diff

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR = 0
VERSION_MINOR = 01

CRYPT_NAMES    = none 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9 bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9

CRYPT=none
COMPRESS=none

TEST_PASSWORD=franz_kafka

DISTRIBUTION_NAME = bar-$(VERSION_MAJOR).$(VERSION_MINOR)

#---------------------------------- rules ------------------------------------

%.o:%.c
	$(CC) $(CC_FLAGS) -DVERSION_MAJOR=$(VERSION_MAJOR) -DVERSION_MINOR=$(VERSION_MINOR) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(for z,$(CC_INCLUDES),-I$z) -c $*.c -o $*.o

%:%.o
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(foreach z,$(LD_LIBRARIES),-l$z) $(foreach z,$(LD_LIBRARIES),-l$z) \
          $(foreach z,$(LD_STATIC_LIBRARIES),-Wl,-static -l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z)

#--------------------------------- objects -----------------------------------

BAR_SOURCES        = bar.c \
                     commands_create.c \
                     commands_list.c \
                     commands_restore.c \
                     commands_test.c \
                     files.c \
                     archive.c \
                     chunks.c \
                     patterns.c \
                     compress.c \
                     crypt.c \
                     passwords.c \
                     storage.c \
                     network.c \
                     server.c \
                     \
                     global.c \
                     cmdoptions.c \
                     lists.c \
                     strings.c \
                     stringlists.c \
                     msgqueues.c \
                     semaphores.c \
                     filefragmentlists.c \
                     arrays.c \

BAR_OBJECTS        = $(foreach z,$(BAR_SOURCES),$(subst .c,.o,$z)) \
                     errors.o \
                     archive_format.o

DESTROYER_SOURCES  = destroyer.c \
                     global.c \
                     cmdoptions.c \
                     lists.c \
                     strings.c \

DESTROYER_OBJECTS  = $(foreach z,$(DESTROYER_SOURCES),$(subst .c,.o,$z)) \

OTHER_SOURCES      = archive_format.def \
                     barcontrol.tcl \

INTERMEDIATE       = errors.h \
                     errors.c \
                     archive_format.c \
                     archive_format.h \

TLS_FILES          = bar-key.pem \
                     bar-ca.pem \
                     bar-server-key.pem \
                     bar-server-cert.pem \

TARGETS            = bar \
                     destroyer \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean depend
all:		$(TARGETS)

clean:
		$(RMF) $(BAR_OBJECTS)
		$(RMF) $(DESTROYER_OBJECTS)
		$(RMF) $(INTERMEDIATE)
		$(RMF) $(TLS_FILES)
		$(RMF) $(TARGETS)

distclean: clean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h
	$(RMF) config.status
	$(RMF) config.log

depend: Makefile.depend

# create dependencies
Makefile.depend: $(BAR_SOURCES) $(DESTROYER_SOURCES) $(INTERMEDIATE)
	$(ECHO) > Makefile.depend
	for z in $(BAR_SOURCES) $(DESTROYER_SOURCES) archive_format.c; do \
          $(CC) -MM >> Makefile.depend $$z; \
        done;

# create Backup Archiver
bar: $(BAR_OBJECTS)

# create destroyer (for testing only!)
destroyer: $(DESTROYER_OBJECTS) 
	$(LD) $(LD_FLAGS) -o $@ $^ -lc -lpthread

errors.h: errors.def
	$(PERL) errors.pl < $^ -h $@
errors.c: errors.def
	$(PERL) errors.pl < $^ -c $@

archive_format.h: archive_format.def
	$(PERL) archive_format.pl < $^ -h $@
archive_format.c: archive_format.def
	$(PERL) archive_format.pl < $^ -c $@

# create SSL certificates
.PHONY: cert clean_cert
cert: bar-ca.pem bar-key.pem bar-server-cert.pem bar-server-key.pem

clean_cert:
	$(RMF) $(TLS_FILES)

bar-key.pem:
	certtool \
          --generate-privkey \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-ca.pem: bar-key.pem
	certtool \
          --generate-self-signed \
          --template ssl/ca.tmpl \
          --load-privkey bar-key.pem \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-server-key.pem:
	certtool \
          --generate-privkey \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-server-cert.pem: bar-server-key.pem
	certtool \
          --generate-certificate \
          --template ssl/server.tmpl \
          --load-privkey bar-server-key.pem \
          --load-ca-certificate bar-ca.pem \
          --load-ca-privkey bar-key.pem \
          --outfile $@ \
          1>/dev/null 2>/dev/null

# run server
.PHONY: barserver barserver_ssl
barserver: bar
	./bar --daemon

barserver_ssl: bar $(TLS_FILES)
	./bar --daemon --server-ca-file=bar-ca.pem --server-cert-file=bar-server-cert.pem --server-key-file=bar-server-key.pem --verbose=0

# do test
.PHONY: test test1 test2 test3 test4 test_all
test:
	@$(MAKE) QUIET=1 -s test1 test2 test3 test4 test_all

test1: bar
	@$(ECHO_NO_LF) "Test 1: basic..."
	$(MAKE) BAR_FILE="test.bar" OPTIONS="--compress-algorithm=none --crypt-algorithm=none" standard_test
	@$(ECHO) "ok"

test2 test_compress: bar
	@$(ECHO_NO_LF) "Test 2: compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) BAR_FILE="test.bar" OPTIONS="--compress-algorithm=$$compress" standard_test; \
        done
	@$(ECHO) "ok"

test3 test_crypt: bar
	@$(ECHO_NO_LF) "Test 3: crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) BAR_FILE="test-###.bar" OPTIONS="--crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD)" standard_test; \
        done
	@$(ECHO) "ok"

test4 test_split: bar
	@$(ECHO_NO_LF) "Test 4: split..."
	$(MAKE) BAR_FILE="test-###.bar" OPTIONS="-s 100000" standard_test
	@$(ECHO) "ok"

test_all: bar
	@$(ECHO_NO_LF) "Test all..."
	for compress in $(COMPRESS_NAMES); do \
          for crypt in $(CRYPT_NAMES); do \
            $(MAKE) BAR_FILE=test-###.bar OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) -s 100000" standard_test; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit 1; \
            fi; \
          done; \
        done
	@$(ECHO) "ok"

.PHONY: standard_test
standard_test: bar
	$(RMRF) test/test*.bar test/restore
	./bar -c test/$(BAR_FILE) test/data $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -l test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -t test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -x test/test*.bar $(OPTIONS) --directory test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.txt test/data test/restore/test/data

.PHONY: standard_test_destroy
standard_test_destroy: bar destroyer
	$(RMRF) test/test*.bar test/restore
	./bar -c test/$(BAR_FILE) test/data/zero1024.dat $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./destroyer test/test.bar m:0 > test/test.bar_destroyed
	./bar -l test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -t test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	./bar -x test/test.bar_destroyed $(OPTIONS) --directory test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.txt test/data test/restore/test/data

.PHONY: dist
dist: $(DISTRIBUTION_NAME).tgz

$(DISTRIBUTION_NAME).tgz:
	$(TAR) cjf $@ \
          $(BAR_SOURCES) \
          $(DESTROYER_SOURCES) \
          $(OTHER_SOURCES) \
          configure \
          configure.in \
          Makefile.in \
          config.h.in \
          bitmaps \
          ssl \
          tcl \
          ToDo \
          README \

-include Makefile.depend

# --------------------------------------------------

.PHONY: p0 pack0 l0 list0 r0 restore0 t0 c0 compare0
p0 pack0: bar
	./bar -c data/data.bar demo/1.dat --compress-algorithm=$(COMPRESS) --crypt-algorithm=$(CRYPT) --crypt-password=test

l0 list0: bar
	./bar -l data/data.bar --crypt-password=test

r0 restore0: bar
	./bar --directory data/restore -x data/data.bar --crypt-password=test

t0 c0 compare0: bar
	./bar -t data/data.bar --crypt-password=test

.PHONY: p1 pack1 l1 list1 r1 restore1 t1 c1 compare1
p1 pack1: bar
	./bar -c data/data.bar demo --compress-algorithm=$(COMPRESS) --crypt-algorithm=$(CRYPT) --crypt-password=test

l1 list1: bar
	./bar -l data/data.bar --crypt-password=test

r1 restore1: bar
	./bar  -x data/data.bar --directory data/restore --crypt-password=test

t1 c1 compare1: bar
	./bar -t data/data.bar --crypt-password=test

.PHONY: p2 pack2 l2 list2 r2 restore2
p2 pack2: bar
	./bar -c -s 1000000 data/data.bar demo --compress-algorithm=$(COMPRESS) --crypt-algorithm=$(CRYPT) --crypt-password=test

l2 list2: bar
	./bar -l data/data.bar.* --crypt-password=test

r2 restore2:
	./bar --directory data/restore -x data/data.bar.* --crypt-password=test

t2 c2 compare2: bar
	./bar -t data/data.bar.* --crypt-password=test

.PHONY: p3 pack3
p3 pack3: bar
	./bar -a data/data.bar -c "demo/abc*.dat"

clean_data:
	$(RMF) test/test.bar*
	$(RMRF) test/restore

.PHONY: backup-home
backup-tooru: bar
	./bar \
          -c scp:torsten@tooru.dyndns.org:backup-torsten-###.bar \
          --ssh-port=49856 \
          --compress-algorithm=bzip9 \
          --crypt-algorithm=aes256 \
          --crypt-password=franz \
          -s 128M \
          --max-tmp-size=256M \
          --skip-unreadable \
          -! /home/torsten/tmp \
          -! /home/torsten/aicas \
          -! /home/torsten/public \
          -! /home/torsten/trash \
          -! /home/torsten/other \
          -! /home/torsten/Mail/trash \
          -! "*.mov" -! "*.avi" \
          /home/torsten

backup-itzo: bar
	./bar \
          -c scp:torsten@it-zo.de:backup/backup-torsten-###.bar \
          --ssh-port=2222 \
          --compress-algorithm=bzip9 \
          --crypt-algorithm=aes256 \
          --crypt-password=franz \
          -s 128M \
          --max-tmp-size=256M \
          --skip-unreadable \
          --verbose=1 \
          -! /home/torsten/tmp \
          -! /home/torsten/aicas \
          -! /home/torsten/public \
          -! /home/torsten/trash \
          -! /home/torsten/other \
          -! /home/torsten/Mail/trash \
          -! "*.mov" -! "*.avi" \
          /home/torsten
