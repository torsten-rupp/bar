# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/Makefile.in,v $
# $Revision: 1.32 $
# $Author: torsten $
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#------------------------------------ paths ----------------------------------

PLATFORM        = @PLATFORM@
INSTALL_DIR     = @INSTALL_DIR@
INSTALL_BIN_DIR = @INSTALL_BIN_DIR@
CONFIG_DIR      = @CONFIG_DIR@
TLS_DIR         = @TLS_DIR@

#--------------------------------- tool chain --------------------------------

#---------------------------------- commands----------------------------------

CAT        = cat
CHMOD      = chmod
CP         = cp
DIFF       = diff
ECHO       = echo
ECHO_NO_LF = echo -n
INSTALL    = @INSTALL@
MKDIR      = mkdir
PERL       = @PERL@
RMDIR      = rmdir
RMF        = rm -f
RMRF       = rm -rf
TAR        = tar

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR = 0
VERSION_MINOR = 09

CRYPT_NAMES    = none 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9 bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9

CRYPT=none
COMPRESS=none

TEST_PASSWORD=Franz_Kafka:Die_Verwandlung

DISTRIBUTION_NAME = bar-$(VERSION_MAJOR).$(VERSION_MINOR)

#---------------------------------- rules ------------------------------------

#--------------------------------- objects -----------------------------------

TARGETS              = bar/bar \
                       bar/bar-keygen \
                       barcontrol/barcontrol

KEY_FILES            = bar-key.pem \
                       bar-ca.pem \
                       bar-server-key.pem \
                       bar-server-cert.pem \
                       bar.jks \

SCRIPTS              = scripts/barserver \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean
all: $(TARGETS) keys

clean:
	$(MAKE) -C bar clean
	$(MAKE) -C barcontrol clean
	$(RMRF) $(DISTRIBUTION_NAME)
	$(RMF) $(DISTRIBUTION_NAME).tgz

distclean: clean
	$(MAKE) -C bar distclean
	$(MAKE) -C barcontrol distclean
	$(RMF) config.status
	$(RMF) config.log

# create bar
bar/bar:
	$(MAKE) -C bar bar

# create bar-keygen
bar/bar-keygen:
	$(MAKE) -C bar bar-keygen

# create barcontrol
barcontrol/barcontrol:
	$(MAKE) -C barcontrol barcontrol

# create SSL certificates
.PHONY: keys clean_keys
keys: $(KEY_FILES)

clean_keys:
	$(RMF) $(KEY_FILES)

bar-key.pem:
	certtool \
          --generate-privkey \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-ca.pem: bar-key.pem
	certtool \
          --generate-self-signed \
          --template ssl/ca.tmpl \
          --load-privkey bar-key.pem \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-server-key.pem:
	certtool \
          --generate-privkey \
          --outfile $@ \
          1>/dev/null 2>/dev/null

bar-server-cert.pem: bar-server-key.pem
	certtool \
          --generate-certificate \
          --template ssl/server.tmpl \
          --load-privkey bar-server-key.pem \
          --load-ca-certificate bar-ca.pem \
          --load-ca-privkey bar-key.pem \
          --outfile $@ \
          1>/dev/null 2>/dev/null

# create Java SSL key
bar.jks: bar-key.pem
	$(RMF) $@
	keytool \
          -import \
          -trustcacerts \
          -keypass not_needed \
          -storepass not_needed \
          -noprompt \
          -file bar-ca.pem \
          -keystore $@

# create documentation
.PHONY: doc
doc: doc/bar.7

# install/uninstall
.PHONY: install uninstall
install: \
  bar/bar \
  $(if $(findstring $(PLATFORM),Linux),barcontrol/barcontrol barcontrol/barcontrol-linux.jar) \
  $(if $(findstring $(PLATFORM),Windows),$(if $(LAUNCH4J),barcontrol/barcontrol.exe,barcontrol.bat barcontrol-windows.jar)) \
  $(KEY_FILES) \
  $(SCRIPTS)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) $(if $(findstring $(PLATFORM),Linux),\
                        barcontrol/barcontrol \
                        barcontrol-linux.jar \
                    ) "$(DESTDIR)$(INSTALL_BIN_DIR)" \
	$(INSTALL) $(if $(findstring $(PLATFORM),Windows),\
                        $(if $(LAUNCH4J),barcontrol/barcontrol.exe,\
                                         barcontrol.bat barcontrol-windows.jar \
                         ) \
                    ) "$(DESTDIR)$(INSTALL_BIN_DIR)" \
	$(INSTALL) -d "$(DESTDIR)$(CONFIG_DIR)"
	if test ! -f "$(DESTDIR)$(CONFIG_DIR)/bar.cfg"; then $(INSTALL) -m 600 bar.cfg "$(DESTDIR)$(CONFIG_DIR)"; else echo "$(DESTDIR)$(CONFIG_DIR)/bar.cfg NOT installed - file already exists\!"; fi
	$(INSTALL) bar.jks "$(DESTDIR)$(CONFIG_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(CONFIG_DIR)/jobs"
	$(INSTALL) -d "$(DESTDIR)$(TLS_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-ca.pem "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-server-cert.pem "$(DESTDIR)$(TLS_DIR)/certs"
	$(INSTALL) -d -m 700 "$(DESTDIR)$(TLS_DIR)/private"
	$(INSTALL) -m 600 bar-server-key.pem "$(DESTDIR)$(TLS_DIR)/private"
	if test ! -f /etc/init.d/barserver; then $(INSTALL) -m 600 scripts/barserver /etc/init.d/barserver; else echo "/etc/init.d/barserver NOT installed - file already exists\!"; fi

uninstall:
	@read -n 1 -p "Really uninstall? [y/N] " s; \
        if test "$s" = "y" -o "$s" = "Y"; then \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"; \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol"; \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar"; \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
          $(RMF) "$(DESTDIR)$(CONFIG_DIR)/bar.cfg"; \
          $(RMF) "$(DESTDIR)$(TLS_DIR)/certs/bar-ca.pem"; \
          $(RMF) "$(DESTDIR)$(TLS_DIR)/certs/bar-server-cert.pem"; \
          $(RMF) "$(DESTDIR)$(TLS_DIR)/private/bar-server-key.pem"; \
          $(RMF) "$(DESTDIR)$(CONFIG_DIR)/bar.jks"; \
          $(RMF) "/etc/init.d/barserver"; \
        fi

# run server
.PHONY: barserver barserver_ssl
barserver:
	@$(MAKE) -C bar barserver

barserver_ssl:
	@$(MAKE) -C bar barserver_ssl

# do test
.PHONY: test
test:
	@$(MAKE) -C bar test

.PHONY: memcheck memcheck1
memcheck:
	@$(MAKE) -C bar memcheck

.PHONY: memcheck_extended
memcheck_extended:
	@$(MAKE) -C bar memcheck_extended

# create distribution
.PHONY: dist $(DISTRIBUTION_NAME).tar.bz2
dist: $(DISTRIBUTION_NAME).tar.bz2

$(DISTRIBUTION_NAME).tar.bz2:
	$(INSTALL) -d $(DISTRIBUTION_NAME)
	$(INSTALL) -m 775 \
                   configure \
                   $(DISTRIBUTION_NAME)
	$(INSTALL) -m 664 \
                   configure.in \
                   Makefile.in \
                   ToDo \
                   README \
                   ChangeLog \
                   $(DISTRIBUTION_NAME)
	$(MAKE) -C bar dist DIRECTORY="../$(DISTRIBUTION_NAME)"
	$(MAKE) -C barcontrol dist DIRECTORY="../$(DISTRIBUTION_NAME)"
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/bin
	$(INSTALL) -m 664 \
                   bin/config.guess \
                   bin/config.sub bin/install-sh \
                   $(DISTRIBUTION_NAME)/bin
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/ssl
	$(INSTALL) -m 664 \
                   ssl/*.tmpl \
                   $(DISTRIBUTION_NAME)/ssl
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/scripts
	$(INSTALL) -m 664 \
                   $(SCRIPTS) \
                   $(DISTRIBUTION_NAME)/scripts
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/misc
	$(INSTALL) -m 664 \
                   misc/*.patch \
                   $(DISTRIBUTION_NAME)/misc
	#
	$(INSTALL) -d $(DISTRIBUTION_NAME)/doc
	$(INSTALL) -m 664 \
                   doc/*.txt \
                   $(DISTRIBUTION_NAME)/doc
	#
	$(TAR) cjf $@ $(DISTRIBUTION_NAME)
	$(RMRF) $(DISTRIBUTION_NAME)

# end of file
