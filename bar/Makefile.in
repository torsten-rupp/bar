# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/Makefile.in,v $
# $Revision$
# $Author$
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#----------------------------- external variables ----------------------------
#
# DESTDIR=<path>    install destination directory
# DIST=1            install for creating distribution packages

#---------------------------------- settings ---------------------------------

ENABLE_DEBUG    = @ENABLE_DEBUG@
ENABLE_GUI      = @ENABLE_GUI@

PLATFORM        = @PLATFORM@

#------------------------------------ paths ----------------------------------

SOURCE_DIR             = @srcdir@

ETC_DIR                = /etc

ifeq ($(DESTDIR),)
INSTALL_DIR            = $(if $(prefix),$(prefix),@INSTALL_DIR@)
INSTALL_BIN_DIR        = $(if $(bindir),$(bindir),@INSTALL_BIN_DIR@)
INSTALL_LIB_DIR        = $(if $(libdir),$(libdir),/usr/lib)
INSTALL_LOCALE_DIR     = $(if $(datadir),$(datadir)/locale,@LOCALE_DIR@)
INSTALL_ETC_DIR        = $(if $(sysconfdir),$(sysconfdir),$(ETC_DIR))
#INSTALL_INITD_DIR      = $(INSTALL_ETC_DIR)/$(if $(wildcard $(ETC_DIR)/rc.d),rc.d/init.d,init.d)
INSTALL_INITD_DIR      = $(INSTALL_ETC_DIR)/init.d
INSTALL_LOGROTATED_DIR = $(INSTALL_ETC_DIR)/logrotate.d
INSTALL_CONFIG_DIR     = $(if $(sysconfdir),$(sysconfdir)/bar,@CONFIG_DIR@)
INSTALL_MAN_DIR        = $(if $(mandir),$(mandir),@MAN_DIR@)
else
INSTALL_DIR            = @INSTALL_DIR@
INSTALL_BIN_DIR        = @INSTALL_BIN_DIR@
INSTALL_LIB_DIR        = /usr/lib
INSTALL_LOCALE_DIR     = @LOCALE_DIR@
INSTALL_ETC_DIR        = $(ETC_DIR)
#INSTALL_INITD_DIR      = $(INSTALL_ETC_DIR)/$(if $(wildcard $(ETC_DIR)/rc.d),rc.d/init.d,init.d)
INSTALL_INITD_DIR      = $(INSTALL_ETC_DIR)/init.d
INSTALL_LOGROTATED_DIR = $(INSTALL_ETC_DIR)/logrotate.d
INSTALL_CONFIG_DIR     = @CONFIG_DIR@
INSTALL_MAN_DIR        = @MAN_DIR@
endif
INSTALL_TLS_DIR        = @TLS_DIR@

#--------------------------------- tool chain --------------------------------

CERTTOOL   = @CERTTOOL@
OPENSSL    = @OPENSSL@
KEYTOOL    = @KEYTOOL@

TXT2MAN    = @TXT2MAN@
UNOCONV    = @UNOCONV@

SVNVERSION = svnversion

#---------------------------------- commands----------------------------------

CAT        = cat
CD         = cd
CHMOD      = chmod
CONVERT    = convert
CP         = cp
DIFF       = diff
ECHO       = echo
ECHO_NO_LF = echo -n
EPM        = @EPM@
GREP       = grep
INSTALL    = @INSTALL@
LN         = ln
MD5SUM     = @MD5SUM@
MKDIR      = mkdir
MV         = mv
NROFF      = nroff
PERL       = @PERL@
RMDIR      = rmdir
RMF        = rm -f
RMRF       = rm -rf
SED        = sed
TAR        = tar
ZIP        = zip

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR := $(shell $(CAT) $(SOURCE_DIR)/version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) $(SOURCE_DIR)/version|$(GREP) MINOR|$(SED) 's/MINOR=//g')

CRYPT_NAMES    = none 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9 bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9

CRYPT    = none
COMPRESS = none

DISTRIBUTION_NAME = bar-$(VERSION_MAJOR).$(VERSION_MINOR)

#---------------------------------- rules ------------------------------------

# convert images
doc/images/%.png: doc/images/%.xcf
	$(CONVERT) $^ -layers flatten $@

doc/images/%-small.png: doc/images/%.xcf
	$(CONVERT) $^ -delete 1--1 -resize 200x200 $@

doc/images/%-large.png: doc/images/%.xcf
	$(CONVERT) $^ -delete 1--1 $@

#--------------------------------- objects -----------------------------------

TARGETS              = bar/bar@EXEEXT@ \
                       bar/bar-debug@EXEEXT@ \
                       bar/bar-keygen@SHELLEXT@ \
                       $(if $(findstring $(ENABLE_GUI),yes),\
                         barcontrol/barcontrol@SHELLEXT@ \
                         barcontrol/barcontrol.cmd \
                       ) \

DOC                  = $(if $(TXT2MAN),doc/bar.7) \
                       $(if $(UNOCONV),doc/bar.pdf) \

DOC_IMAGES           = doc/images/archivename-editor.png \
                       doc/images/entries.png \
                       doc/images/images.png \
                       doc/images/filters+mounts.png \
                       doc/images/restore-dialog.png \
                       doc/images/restore.png \
                       doc/images/schedule.png \
                       doc/images/scripts.png \
                       doc/images/server-commands.png \
                       doc/images/server-general.png \
                       doc/images/server-servers.png \
                       doc/images/server-verbosity+log.png \
                       doc/images/status.png \
                       doc/images/storage.png \

DOC_IMAGES_SMALL     = $(foreach z,$(patsubst %.png,%,$(DOC_IMAGES)),$z-small.png)
DOC_IMAGES_LARGE     = $(foreach z,$(patsubst %.png,%,$(DOC_IMAGES)),$z-large.png)

OTHER_SOURCES        = errors.pl \
                       errors.def \

KEY_FILES            = bar-key.pem \
                       bar-ca.pem \
                       bar-server-key.pem \
                       bar-server-cert.pem \
                       bar.jks \

SCRIPTS              = scripts/barserver-SuSE \
                       scripts/barserver-Fedora \
                       scripts/barserver-RedHat \
                       scripts/barserver-Mandrake \
                       scripts/barserver-debian \
                       scripts/barserver-CentOS \
                       scripts/barserver.service \
                       scripts/logrotate.conf \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean

all: \
  $(TARGETS) \
  $(DOC) \
  $(DOC_IMAGES) \
  $(DOC_IMAGES_SMALL) \
  $(DOC_IMAGES_LARGE) \

clean: \
  clean_keys \
  clean_doc \
  clean_rpm \
  clean_deb \
  clean_debian_package
	-$(MAKE) -C bar clean
ifeq ($(ENABLE_GUI),yes)
	-$(MAKE) -C barcontrol clean
endif
	$(RMRF) $(DISTRIBUTION_NAME)
	$(RMF) $(DISTRIBUTION_NAME).tar.bz2 $(DISTRIBUTION_NAME).orig.tar.gz
	$(RMRF) tmp

distclean: clean
	-$(MAKE) -C bar distclean
ifeq ($(ENABLE_GUI),yes)
	-$(MAKE) -C barcontrol distclean
endif
	$(RMF) Makefile
	$(RMF) src/Config.java
	$(RMF) epm.list
	$(RMF) config.status
	$(RMF) config.log

# help
.PHONY: help
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(ECHO) "  bar"
	@$(ECHO) "  bar-keygen"
	@$(ECHO) "  barcontrol"
	@$(ECHO) ""
	@$(ECHO) "  keys"
	@$(ECHO) ""
	@$(ECHO) "  doc"
	@$(ECHO) "  man"
	@$(ECHO) "  showman"
	@$(ECHO) ""
	@$(ECHO) "  install"
	@$(ECHO) ""
	@$(ECHO) "  test"
	@$(ECHO) "  test1[-debug|-valgrind], test_basic"
	@$(ECHO) "  test2[-debug|-valgrind], test_compress"
	@$(ECHO) "  test3[-debug|-valgrind], test_crypt"
	@$(ECHO) "  test4[-debug|-valgrind], test_asymmetric_crypt"
	@$(ECHO) "  test5[-debug|-valgrind], test_signatures"
	@$(ECHO) "  test6[-debug|-valgrind], test_split"
	@$(ECHO) "  test7[-debug|-valgrind], test_image"
	@$(ECHO) "  test8[-debug|-valgrind], test_storage"
	@$(ECHO) "  test9[-debug|-valgrind], test_largefile"
	@$(ECHO) "  test10[-debug|-valgrind], test_dvd"
	@$(ECHO) "  test_parameters"
	@$(ECHO) "  test_combined"
	@$(ECHO) "  test_misc"
	@$(ECHO) ""
	@$(ECHO) "  memcheck"
	@$(ECHO) "  memcheck_extended"
	@$(ECHO) ""
	@$(ECHO) "  dist"
	@$(ECHO) "  clean_dist"
	@$(ECHO) "  debian_dist"
	@$(ECHO) "  clean_debian_dist"
	@$(ECHO) ""
	@$(ECHO) "  rpm"
	@$(ECHO) "  clean_rpm"
	@$(ECHO) "  deb"
	@$(ECHO) "  clean_deb"
	@$(ECHO) "  debian_package"
	@$(ECHO) "  clean_debian_package"
	@$(ECHO) "  gui"
	@$(ECHO) "  clean_gui"

# ----------------------------------------------------------------------------
# create main

.PHONY: all
all: \
  bar \
  bar-debug \
  bar-keygen \
  barcontrol

# create bar
.PHONY: bar bar-debug

bar bar/bar@EXEEXT@:
	$(MAKE) -C bar bar@EXEEXT@

bar-debug bar/bar-debug@EXEEXT@:
	$(MAKE) -C bar bar-debug@EXEEXT@

# create bar-keygen
.PHONY: bar-keygen

bar-keygen bar/bar-keygen@SHELLEXT@:
	$(MAKE) -C bar bar-keygen@SHELLEXT@

# create barcontrol
.PHONY: barcontrol

barcontrol barcontrol/barcontrol:
ifeq ($(ENABLE_GUI),yes)
	$(MAKE) -C barcontrol barcontrol@SHELLEXT@
else
	@$(ECHO) "ERROR: GUI components not configured - cannot be build."
endif

barcontrol/barcontrol.cmd:
ifeq ($(ENABLE_GUI),yes)
	$(MAKE) -C barcontrol barcontrol.cmd
else
	@$(ECHO) "ERROR: GUI components not configured - cannot be build."
endif

barcontrol/barcontrol%.jar:
ifeq ($(ENABLE_GUI),yes)
	$(MAKE) -C barcontrol barcontrol$*.jar
else
	@$(ECHO) "ERROR: GUI components not configured - cannot be build."
endif

# ----------------------------------------------------------------------------
# create SSL keys and certificates

.PHONY: keys clean_keys

keys: \
  $(KEY_FILES)

clean_keys:
	$(RMF) $(KEY_FILES)

$(KEY_FILES):
	$(MAKE) -C bar bar-keygen@SHELLEXT@
	($(CD) bar; \
         ./bar-keygen@SHELLEXT@ \
           --tls-directory=.. \
           --private-directory=.. \
           --certs-directory=.. \
           --java-private-directory=.. \
           $(if $(CERTTOOL),--certtool) \
           $(if $(OPENSSL),--openssl) \
           --force \
        )

# ----------------------------------------------------------------------------
# create documentation

.PHONY: doc clean_doc

doc: \
  $(DOC) \
  $(DOC_IMAGES) \
  $(DOC_IMAGES_SMALL) \
  $(DOC_IMAGES_LARGE)

clean_doc:
	$(RMF) $(DOC)
	$(RMF) $(DOC_IMAGES)
	$(RMF) $(DOC_IMAGES_SMALL)
	$(RMF) $(DOC_IMAGES_LARGE)

# create man-page

.PHONY: man clean_man showman

man: \
  doc/bar.7

clean_man:
	$(RMF) doc/bar.7

doc/bar.7: \
  $(SOURCE_DIR)/doc/bar.txt
ifneq ($(TXT2MAN),)
	$(INSTALL) -d $(@D)
	$(CAT) $(SOURCE_DIR)/doc/bar.txt | $(TXT2MAN) -t bar -r $(VERSION_MAJOR).$(VERSION_MINOR) -s 7 -v "Linux User's Manual" > $@
else
	@$(ECHO) "ERROR: no 'txt2man' tool available! Cannot create man page."
endif

showman: doc/bar.7
	$(NROFF) -man doc/bar.7

# create manual

doc/bar.pdf: \
  $(SOURCE_DIR)/doc/bar.odt \
  $(DOC_IMAGES)
ifneq ($(UNOCONV),)
	$(INSTALL) -d $(@D)
	($(UNOCONV) -f pdf --stdout $(SOURCE_DIR)/doc/bar.odt > $@; if test $$? -ne 0; then $(RMF) $@; fi)
else
	@$(ECHO) "ERROR: no 'unoconv' tool available! Cannot create PDF manual."
endif

# ----------------------------------------------------------------------------
# install/uninstall
# Note: prefix DESTDIR is used for temporary installations

.PHONY: install install_bar install_barcontrol install_scripts install_man install_keys uninstall install_dist

install: \
  install_bar \
  install_barcontrol \
  install_scripts \
  install_man \
  $(if $(DIST),,install_keys)

install_bar:
	echo $(MAKE) -C bar install \
          prefix=$(prefix) \
          bindir=$(bindir) \
          libdir=$(libdir) \
          datadir=$(datadir) \
          sysconfdir=$(sysconfdir) \
          mandir=$(mandir) \
          DESTDIR=$(DESTDIR)
	$(MAKE) -C bar install \
          prefix=$(prefix) \
          bindir=$(bindir) \
          datadir=$(datadir) \
          sysconfdir=$(sysconfdir) \
          mandir=$(mandir) \
          DESTDIR=$(DESTDIR)

install_barcontrol:
	echo $(MAKE) -C barcontrol install \
          prefix=$(prefix) \
          bindir=$(bindir) \
          libdir=$(libdir) \
          datadir=$(datadir) \
          sysconfdir=$(sysconfdir) \
          mandir=$(mandir) \
          DESTDIR=$(DESTDIR)
	$(MAKE) -C barcontrol install \
          prefix=$(prefix) \
          bindir=$(bindir) \
          libdir=$(libdir) \
          datadir=$(datadir) \
          sysconfdir=$(sysconfdir) \
          mandir=$(mandir) \
          DESTDIR=$(DESTDIR)

# install script files
install_scripts: \
  $(SCRIPTS)
	if test "$(SYSTEM_INIT)" = "systemd" -o -d /usr/lib/systemd; then \
          if test ! -f "$(DESTDIR)/usr/lib/systemd/system/barserver.service"; then \
            $(INSTALL) -d "$(DESTDIR)/usr/lib/systemd/system"; \
            $(INSTALL) -m 644 scripts/barserver.service "$(DESTDIR)/usr/lib/systemd/system/barserver.service"; \
          else \
            echo "$(DESTDIR)/usr/lib/systemd/system/barserver.service NOT installed - file already exists!"; \
          fi; \
        else \
	  if test ! -f "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; then \
            $(INSTALL) -d "$(DESTDIR)$(INSTALL_INITD_DIR)"; \
            if   test "$(SYSTEM)" = "SuSE"   -o -f $(ETC_DIR)/SuSE-release -o -d $(INSTALL_ETC_DIR)/SuSEconfig; then \
              $(INSTALL) -m 755 scripts/barserver-SuSE "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            elif test "$(SYSTEM)" = "Fedora" -o -f $(ETC_DIR)/fedora-release; then \
              $(INSTALL) -m 755 scripts/barserver-Fedora "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            elif test "$(SYSTEM)" = "RedHat" -o \( -f $(ETC_DIR)/redhat-release -a -n "`grep 'Red Hat' $(ETC_DIR)/redhat-release 2>/dev/null`" \); then \
              $(INSTALL) -m 755 scripts/barserver-RedHat "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            elif test "$(SYSTEM)" = "CentOS" -o \( -f $(ETC_DIR)/redhat-release -a -n "`grep 'CentOS' $(ETC_DIR)/redhat-release 2>/dev/null`" \); then \
              $(INSTALL) -m 755 scripts/barserver-CentOS "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            elif test "$(SYSTEM)" = "Mandrake" -o -f $(ETC_DIR)/mandrake-release; then \
              $(INSTALL) -m 755 scripts/barserver-Mandrake "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            elif test "$(SYSTEM)" = "Ubuntu" -o -f $(ETC_DIR)/lsb-release; then \
              $(INSTALL) -m 755 scripts/barserver-debian "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            elif test "$(SYSTEM)" = "Debian" -o -f $(ETC_DIR)/debian_release; then \
              $(INSTALL) -m 755 scripts/barserver-debian "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
            else \
              $(INSTALL) -m 755 scripts/barserver-debian "$(DESTDIR)$(INSTALL_ETC_DIR)/barserver"; \
            fi; \
          else \
            echo "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver NOT installed - file already exists!"; \
          fi; \
        fi
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_LOGROTATED_DIR)"; \
	$(INSTALL) -m 644 scripts/logrotate.conf "$(DESTDIR)$(INSTALL_LOGROTATED_DIR)/bar"; \

# install man-page
install_man: \
  doc/bar.7
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_MAN_DIR)/man7"
	$(INSTALL) -m 644 doc/bar.7 "$(DESTDIR)$(INSTALL_MAN_DIR)/man7"

# install keys
# Note: prefix is used for temporary installations
install_keys: \
  $(KEY_FILES)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_TLS_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-ca.pem "$(DESTDIR)$(INSTALL_TLS_DIR)/certs"
	$(INSTALL) -m 644 bar-server-cert.pem "$(DESTDIR)$(INSTALL_TLS_DIR)/certs"
	$(INSTALL) -d -m 700 "$(DESTDIR)$(INSTALL_TLS_DIR)/private"
	$(INSTALL) -m 600 bar-server-key.pem "$(DESTDIR)$(INSTALL_TLS_DIR)/private"
ifeq ($(ENABLE_GUI),yes)
	$(INSTALL) bar.jks "$(DESTDIR)$(INSTALL_CONFIG_DIR)"
endif

# uninstall all
uninstall:
	@read -n 1 -p "Really uninstall? [y/N] " s; \
        if test "$s" = "y" -o "$s" = "Y"; then \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"; \
          $(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-keygen@SHELLEXT@"; \
          $(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol" \
                                                      "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar" \
                                                      "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
          ) \
          $(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg"; \
          $(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-ca.pem"; \
          $(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-server-cert.pem"; \
          $(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/private/bar-server-key.pem"; \
          $(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.jks"; \
          ) \
          $(RMF) "$(DESTDIR)$(INSTALL_INITD_DIR)/barserver"; \
          $(RMF) "$(DESTDIR)$(INSTALL_LOGROTATED_DIR)/bar"; \
          $(RMF) "$(DESTDIR)$(INSTALL_MAN_DIR)/man7/bar.7"; \
        fi

# ----------------------------------------------------------------------------
# tests

# run server
.PHONY: barserver barserver_ssl
barserver:
	@$(MAKE) -C bar barserver

barserver_ssl:
	@$(MAKE) -C bar barserver_ssl

# do tests
.PHONY: test test1 test2 test3 test4 test5 test6 test7 test8 test9 test10
.PHONY: test-debug test1-debug test2-debug test3-debug test4-debug test5-debug test6-debug test7-debug test8-debug test9-debug test10-debug
.PHONY: test-valgrind test1-valgrind test2-valgrind test3-valgrind test4-valgrind test5-valgrind test6-valgrind test7-valgrind test8-valgrind test9-valgrind test10-valgrind
.PHONY: test_basic test_compress test_crypt test_asymmetric_crypt test_split test_image test_dvd test_parameters test_combined
test:
	@$(MAKE) -C bar test
test-debug:
	@$(MAKE) -C bar test-debug
test-valgrind:
	@$(MAKE) -C bar test-valgrind
test1-debug test_basic-debug:
	@$(MAKE) -C bar test1-debug
test1 test_basic:
	@$(MAKE) -C bar test1
test1-valgrind test_basic-valgrind:
	@$(MAKE) -C bar test1-valgrind
test2-debug test_compress-debug:
	@$(MAKE) -C bar test2-debug
test2 test_compress:
	@$(MAKE) -C bar test2
test2-valgrind test_compress-valgrind:
	@$(MAKE) -C bar test2-valgrind
test3 test_crypt:
	@$(MAKE) -C bar test3
test3-debug test_crypt-debug:
	@$(MAKE) -C bar test3-debug
test3-valgrind test_crypt-valgrind:
	@$(MAKE) -C bar test3-valgrind
test4 test_asymmetric_crypt:
	@$(MAKE) -C bar test4
test4-debug test_asymmetric_crypt-debug:
	@$(MAKE) -C bar test4-debug
test4-valgrind test_asymmetric_crypt-valgrind:
	@$(MAKE) -C bar test4-valgrind
test5 test_signatures:
	@$(MAKE) -C bar test5
test5-debug test_signatures-debug:
	@$(MAKE) -C bar test5-debug
test5-valgrind test_signatures-valgrind:
	@$(MAKE) -C bar test5-valgrind
test6 test_split:
	@$(MAKE) -C bar test6
test6-debug test_split-debug:
	@$(MAKE) -C bar test6-debug
test6-valgrind test_split-valgrind:
	@$(MAKE) -C bar test6-valgrind
test7 test_image:
	@$(MAKE) -C bar test7
test7-debug test_image-debug:
	@$(MAKE) -C bar test7-debug
test7-valgrind test_image-valgrind:
	@$(MAKE) -C bar test7-valgrind
test8 test_storage:
	@$(MAKE) -C bar test8
test8-debug test_storage-debug:
	@$(MAKE) -C bar test8-debug
test8-valgrind test_storage-valgrind:
	@$(MAKE) -C bar test8-valgrind
test9 test_largefile:
	@$(MAKE) -C bar test9
test9-debug test_largefile-debug:
	@$(MAKE) -C bar test9-debug
test9-valgrind test_largefile-valgrind:
	@$(MAKE) -C bar test9-valgrind
test10 test_dvd:
	@$(MAKE) -C bar test10
test10-debug test_dvd-debug:
	@$(MAKE) -C bar test10-debug
test10-valgrind test_dvd-valgrind:
	@$(MAKE) -C bar test10-valgrind
test_parameters:
	@$(MAKE) -C bar test_parameters
test_combined:
	@$(MAKE) -C bar test_combined
test_misc:
	@$(MAKE) -C bar test_misc
test_all:
	@$(MAKE) -C bar test_all

# memory checks
.PHONY: memcheck memcheck1 memcheck_extended
memcheck:
	@$(MAKE) -C bar memcheck

memcheck_extended:
	@$(MAKE) -C bar memcheck_extended

# ----------------------------------------------------------------------------
# distribution

.PHONY: dist clean_dist $(DISTRIBUTION_NAME).tar.bz2

dist: \
  $(DISTRIBUTION_NAME).tar.bz2

clean_dist:
	$(RMF) $(DISTRIBUTION_NAME).tar.bz2

# create distribution
$(DISTRIBUTION_NAME).tar.bz2: \
  $(TARGETS) \
  \
  configure \
  configure.ac \
  Makefile.in \
  epm.list.in \
  version \
  ToDo \
  ChangeLog \
  \
  download-third-party-packages.sh \
  $(OTHER_SOURCES) \
  \
  bin/config.guess \
  bin/config.sub \
  bin/install-sh \
  bin/config.guess \
  bin/config.sub bin/install-sh \
  \
  bar/Makefile.in \
  bar/test/Makefile.in \
  barcontrol/Makefile.in \
  \
  ssl/certtool/*.tmpl \
  ssl/openssl/*.tmpl \
  \
  $(SCRIPTS) \
  \
  misc/*.patch \
  \
  doc/README \
  doc/COPYING \
  doc/bar.odt \
  doc/*.txt \
  $(DOC) \
  $(DOC_IMAGES) \
  $(DOC_IMAGES_SMALL) \
  $(DOC_IMAGES_LARGE)
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)
	$(INSTALL) -m 775 \
                   configure \
                   download-third-party-packages.sh \
                   $(OTHER_SOURCES) \
                   tmp/$(DISTRIBUTION_NAME)
	$(INSTALL) -m 664 \
                   configure.ac \
                   Makefile.in \
                   epm.list.in \
                   ToDo \
                   ChangeLog \
                   tmp/$(DISTRIBUTION_NAME)
	( \
          $(GREP) MINOR version; \
          $(GREP) MAJOR version; \
          $(ECHO) "RELEASE=$(shell $(SVNVERSION) .)"; \
        ) > tmp/$(DISTRIBUTION_NAME)/version
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/bin
	$(INSTALL) -m 664 \
                   bin/config.guess \
                   bin/config.sub \
                   bin/install-sh \
                   tmp/$(DISTRIBUTION_NAME)/bin
	$(MAKE) -C bar dist DIRECTORY="../tmp/$(DISTRIBUTION_NAME)"
	$(MAKE) -C barcontrol dist DIRECTORY="../tmp/$(DISTRIBUTION_NAME)"
	#
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/bin
	$(INSTALL) -m 664 \
                   bin/config.guess \
                   bin/config.sub bin/install-sh \
                   tmp/$(DISTRIBUTION_NAME)/bin
	#
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/ssl
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/ssl/certtool
	$(INSTALL) -m 664 \
                   ssl/certtool/*.tmpl \
                   tmp/$(DISTRIBUTION_NAME)/ssl/certtool
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/ssl/openssl
	$(INSTALL) -m 664 \
                   ssl/openssl/*.tmpl \
                   tmp/$(DISTRIBUTION_NAME)/ssl/openssl
	#
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/scripts
	$(INSTALL) -m 664 \
                   $(SCRIPTS) \
                   tmp/$(DISTRIBUTION_NAME)/scripts
	#
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/misc
	$(INSTALL) -m 664 \
                   misc/*.patch \
                   tmp/$(DISTRIBUTION_NAME)/misc
	#
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/doc
	$(INSTALL) -m 664 \
                   doc/README \
                   doc/COPYING \
                   doc/bar.odt \
                   doc/bar.pdf \
                   doc/*.txt \
                   doc/bar.7 \
                   tmp/$(DISTRIBUTION_NAME)/doc
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME)/doc/images
	$(INSTALL) -m 664 \
                   doc/images/*.png \
                   tmp/$(DISTRIBUTION_NAME)/doc/images
	#
	($(CD) tmp; $(TAR) cjf ../$@ $(DISTRIBUTION_NAME))
	$(RMRF) tmp/$(DISTRIBUTION_NAME)
	#
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif

# --- Debian distribution
.PHONY: debian_dist clean_debian_dist $(DISTRIBUTION_NAME).orig.tar.gz

debian_dist: \
  $(DISTRIBUTION_NAME).orig.tar.gz

clean_debian_dist:
	$(RMF) $(DISTRIBUTION_NAME).orig.tar.gz

# create Debian distribution
$(DISTRIBUTION_NAME).orig.tar.gz: \
  $(DISTRIBUTION_NAME).tar.bz2 \
  download-third-party-packages.sh
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME).orig
	($(CD) tmp/$(DISTRIBUTION_NAME).orig; $(TAR) --strip-components=1 -xjf ../../$(DISTRIBUTION_NAME).tar.bz2)
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME).orig/packages
	$(INSTALL) -d tmp/$(DISTRIBUTION_NAME).orig/packages
        # copy existing packages to avoid download (which may fail because of an instable Internet)
	$(INSTALL) \
          packages/binutils-*.tar.bz2 \
          packages/bzip2-*.tar.gz \
          packages/c-ares-*.tar.gz \
          packages/curl-*.tar.bz2 \
          packages/gmp-*.tar.xz \
          packages/gnutls-*.tar.xz \
          packages/icu*.tgz \
          packages/libiconv-*.tar.gz \
          packages/libcdio-*.tar.gz \
          packages/libgcrypt-*.tar.bz2 \
          packages/libgpg-error-*.tar.bz2 \
          packages/libssh2-*.tar.gz \
          packages/lz4-*.tar.gz \
          packages/lzo-*.tar.gz \
          packages/mtx-*.tar.gz \
          packages/mxml-*.tar.gz \
          packages/nettle-*.tar.gz \
          packages/openssl-*.tar.gz \
          packages/pcre-*.tar.bz2 \
          packages/sqlite-src-*.zip \
          packages/pthreads-w32-*.tar.gz \
          packages/xdelta*.tar.gz \
          packages/xz-*.tar.gz \
          packages/zlib-*.tar.gz \
          packages/zstd-*.zip \
          tmp/$(DISTRIBUTION_NAME).orig/packages
	$(INSTALL) \
          third-party/breakpad-r1430.tar.bz2 \
          tmp/$(DISTRIBUTION_NAME).orig/packages/breakpad.tar.bz2
	if test -n "`ls packages/ftplib-*.tar.gz 2>/dev/null`"; then \
	  $(INSTALL) \
            packages/ftplib-*.tar.gz \
            tmp/$(DISTRIBUTION_NAME).orig/packages; \
        fi
	if test -n "`ls packages/launch4j-*.tgz 2>/dev/null`"; then \
	  $(INSTALL) \
            packages/launch4j-*.tgz \
            tmp/$(DISTRIBUTION_NAME).orig/packages; \
        fi
	if test -n "`ls packages/epm-*-source.tar.bz2 2>/dev/null`"; then \
          $(INSTALL) \
            packages/epm-*-source.tar.bz2 \
            tmp/$(DISTRIBUTION_NAME).orig/packages; \
        fi
	# download not existing packages
	./download-third-party-packages.sh -d tmp/$(DISTRIBUTION_NAME).orig -n
	($(CD) tmp; $(TAR) czf ../$@ $(DISTRIBUTION_NAME).orig)
	$(RMRF) tmp/$(DISTRIBUTION_NAME).orig

# ----------------------------------------------------------------------------
# packages

# RPM
.PHONY: rpm clean_rpm

rpm: \
  bar-$(VERSION_MAJOR).$(VERSION_MINOR).rpm

clean_rpm:
	$(RMF) bar-$(VERSION_MAJOR).$(VERSION_MINOR).rpm

bar-$(VERSION_MAJOR).$(VERSION_MINOR).rpm: \
  epm.list
ifneq ($(EPM),)
	$(INSTALL) -d tmp/package
	$(EPM) \
          -f rpm \
          --output-dir tmp/package \
          PACKAGE_CMD=1 \
          PACKAGE_GUI=1 \
          bar \
          epm.list
	$(MV) tmp/package/*rpm $@
	$(RMRF) tmp/package
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif
else
	@$(ECHO) "No EPM installed. Cannot create RPM package."
endif

# DEB
.PHONY: deb clean_deb

deb: \
  bar-$(VERSION_MAJOR).$(VERSION_MINOR).deb \
  bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).deb

clean_deb:
	$(RMF) bar-$(VERSION_MAJOR).$(VERSION_MINOR).deb
	$(RMF) bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).deb

bar-$(VERSION_MAJOR).$(VERSION_MINOR).deb: epm.list
ifneq ($(EPM),)
	$(INSTALL) -d tmp/package
	$(EPM) \
          -f deb \
          --output-dir tmp/package \
          PACKAGE_CMD=1 \
          bar \
          epm.list
	$(MV) tmp/package/*deb $@
	$(RMRF) tmp/package
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif
else
	@$(ECHO) "No EPM installed. Cannot create DEB package."
endif
bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).deb: epm.list
ifneq ($(EPM),)
	$(INSTALL) -d tmp/package
	$(EPM) \
          -f deb \
          --output-dir tmp/package \
          PACKAGE_GUI=1 \
          bar-gui \
          epm.list
	$(MV) tmp/package/*deb $@
	$(RMRF) tmp/package
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif
else
	@$(ECHO) "No EPM installed. Cannot create DEB package."
endif

# create x86 Debian FTP archive package
.PHONY: debian_package clean_debian_package debian_package_install debian_package_install_gui

debian_package: \
  $(DISTRIBUTION_NAME).tar.bz2
	$(INSTALL) -d tmp/debian_package
	($(CD) tmp/debian_package; tar xjf ../../$(DISTRIBUTION_NAME).tar.bz2)
	($(CD) tmp/debian_package/$(DISTRIBUTION_NAME); $(LN) -s -f ../../../debian)
	($(CD) tmp/debian_package/$(DISTRIBUTION_NAME); dpkg-buildpackage -rfakeroot)
        #
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.dsc .
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.changes .
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.deb .
	$(MV) tmp/debian_package/bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.tar.gz .
	$(MV) tmp/debian_package/bar-gui_$(VERSION_MAJOR).$(VERSION_MINOR)-1_all.deb .

clean_debian_package:
	$(RMRF) tmp/debian_package
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.dsc
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.changes.dsc
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1_i386.deb
	$(RMF) bar_$(VERSION_MAJOR).$(VERSION_MINOR)-1.tar.gz
	$(RMF) bar-gui_$(VERSION_MAJOR).$(VERSION_MINOR)-1_all.deb

# temporary debian install
.PHONY: debian_install
debian_package_install: \
  $(TARGETS) \
  $(if $(findstring $(ENABLE_GUI),yes),$(if $(findstring $(PLATFORM),LINUX),barcontrol/barcontrol barcontrol/barcontrol-linux.jar) \
                                       $(if $(findstring $(PLATFORM),WINDOWS),$(if $(LAUNCH4J),barcontrol/barcontrol.exe,barcontrol/barcontrol.cmd barcontrol/barcontrol-windows.jar)) \
  ) \
  $(SCRIPTS)
	$(INSTALL) -d "$(prefix)/$(INSTALL_DIR)"
	$(INSTALL) -d "$(prefix)/$(INSTALL_BIN_DIR)"
	$(INSTALL) bar/bar@EXEEXT@ "$(prefix)/$(INSTALL_BIN_DIR)"
	$(INSTALL) -d "$(prefix)/$(INSTALL_CONFIG_DIR)"
	$(INSTALL) -m 600 bar/bar.cfg "$(prefix)/$(INSTALL_CONFIG_DIR)"
	$(INSTALL) -d "$(prefix)/$(INSTALL_CONFIG_DIR)/jobs"
	$(INSTALL) -d "$(prefix)/$(INSTALL_INITD_DIR)"
	$(INSTALL) -m 600 scripts/barserver-debian "$(prefix)/$(INSTALL_INITD_DIR)/barserver"

# temporary debian install for GUI tools
.PHONY: debian_install_gui
debian_package_install_gui: \
  $(TARGETS) \
  $(if $(findstring $(ENABLE_GUI),yes),$(if $(findstring $(PLATFORM),LINUX),barcontrol/barcontrol barcontrol/barcontrol-linux.jar) \
                                       $(if $(findstring $(PLATFORM),WINDOWS),$(if $(LAUNCH4J),barcontrol/barcontrol.exe,barcontrol/barcontrol.cmd barcontrol/barcontrol-windows.jar)) \
  ) \
  $(SCRIPTS)
	$(INSTALL) -d "$(prefix)/$(INSTALL_BIN_DIR)"
ifeq ($(ENABLE_GUI),yes)
ifeq ($(PLATFORM),LINUX)
	$(INSTALL) barcontrol/barcontrol \
                   barcontrol/barcontrol-linux.jar \
                   "$(prefix)/$(INSTALL_BIN_DIR)"
endif
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(if $(LAUNCH4J),barcontrol/barcontrol.exe,\
                                    barcontrol/barcontrol.cmd barcontrol/barcontrol-windows.jar \
                    ) \
                   "$(prefix)/$(INSTALL_BIN_DIR)"
endif
endif

# GUI
.PHONY: gui_package gui clean_gui_package clean_gui

gui_package gui: \
  bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).zip

clean_gui_package clean_gui:
	$(RMF) bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).zip

bar-gui-$(VERSION_MAJOR).$(VERSION_MINOR).zip: \
  barcontrol/barcontrol@SHELLEXT@ \
  barcontrol/barcontrol.cmd \
  barcontrol/barcontrol-linux.jar \
  barcontrol/barcontrol-linux_64.jar \
  barcontrol/barcontrol.cmd \
  barcontrol/barcontrol-windows.jar \
  barcontrol/barcontrol-windows_64.jar \
  barcontrol/barcontrol-solaris.jar \
  barcontrol/barcontrol-macosx.jar \
  barcontrol/barcontrol-macosx_64.jar
	$(INSTALL) -d tmp/gui/linux
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol@SHELLEXT@ \
                   tmp/gui/linux
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-linux.jar \
                   barcontrol/barcontrol-linux_64.jar \
                   tmp/gui/linux
	#
	$(INSTALL) -d tmp/gui/windows
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol.cmd \
                   tmp/gui/windows
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-windows.jar \
                   barcontrol/barcontrol-windows_64.jar \
                   tmp/gui/windows
	#
	$(INSTALL) -d tmp/gui/solaris
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol \
                   tmp/gui/solaris
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-solaris.jar \
                   tmp/gui/solaris
	#
	$(INSTALL) -d tmp/gui/macosx
	$(INSTALL) -m 775 \
                   barcontrol/barcontrol \
                   tmp/gui/macosx
	$(INSTALL) -m 664 \
                   barcontrol/barcontrol-macosx.jar \
                   barcontrol/barcontrol-macosx_64.jar \
                   tmp/gui/macosx
	
	($(CD) tmp/gui; $(ZIP) -r ../../$@ linux windows solaris macosx)
	$(RMRF) tmp/gui
	#
ifneq ($(MD5SUM),)
	$(MD5SUM) $@
endif

# end of file
