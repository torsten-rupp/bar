//***********************************************************************
//
// $Source: /home/torsten/cvs/bar/errors.def,v $
// $Revision$
// $Author$
// Contents: Backup ARchiver errors definition
// Systems: all
//
//***********************************************************************

INCLUDE <config.h>

#ifdef HAVE_LIBSSH2
INCLUDE "libssh2.h"
#endif

NONE    "none"
DEFAULT "unknown"

// --- general ----------------------------------------------------------
ERROR INSUFFICIENT_MEMORY            "insufficient memory"
ERROR INIT                           "init fail"
ERROR INVALID_ARGUMENT               "invalid argument"
ERROR CONFIG                         "config error"
ERROR ABORTED                        "aborted"
ERROR INTERRUPTED                    "interrupted"
ERROR FUNCTION_NOT_SUPPORTED         "function not supported"
ERROR STILL_NOT_IMPLEMENTED          "function still not implemented"
ERROR DAEMON_FAIL                    "run as daemon fail"
ERROR IPC                            "inter-process communication fail"

// --- patterns ---------------------------------------------------------
// patterns
ERROR INVALID_PATTERN
  strncpy(errorText,"invalid pattern",sizeof(errorText));
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

// --- network ----------------------------------------------------------
ERROR NO_HOST_NAME                   "no host name given"
ERROR HOST_NOT_FOUND                 "host not found"
ERROR CONNECT_FAIL
  strncpy(errorText,strerror(ERROR_ERRNO),sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR TOO_MANY_CONNECTIONS           "too many concurrent connections"
ERROR NO_LOGIN_NAME                  "no login name given"
ERROR NO_PASSWORD                    "no password given"
ERROR NETWORK_SEND                   "sending data fail"
ERROR NETWORK_RECEIVE                "receiving data fail"
ERROR NETWORK_EXECUTE_FAIL           "execute command fail"
ERROR NETWORK_TIMEOUT                "timeout receive/send data"
ERROR NO_RESPONSE                    "no response from remote program"
ERROR INVALID_RESPONSE               "invalid response from remote program"

// --- TLS/SSL ----------------------------------------------------------
ERROR INIT_TLS                       "init TLS (SSL) fail"
ERROR NO_TLS_CA                      "no TLS (SSL) certificate authority file 'bar-ca.pem'"
ERROR NO_TLS_CERTIFICATE             "no TLS (SSL) certificate file 'bar-server-cert.pem'"
ERROR NO_TLS_KEY                     "no or unreadable TLS (SSL) key file 'bar-server-key.pem'"
ERROR INVALID_TLS_CA                 "invalid TLS (SSL) certificate authority"
ERROR INVALID_TLS_CERTIFICATE        "invalid TLS (SSL) certificate"
ERROR TLS_CERTIFICATE_EXPIRED
  strncpy(errorText,"TLS (SSL) certificate expired",sizeof(errorText));
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR TLS_CERTIFICATE_NOT_ACTIVE
  strncpy(errorText,"TLS (SSL) certificate is still not active",sizeof(errorText));
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR TLS_HANDSHAKE                  "TLS (SSL) handshake failure"
ERROR INVALID_SSH_SPECIFIER          "invalid SSH specifier"
ERROR NO_SSH_PASSWORD
  strncpy(errorText,"no SSH password given",sizeof(errorText));
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR INVALID_SSH_PASSWORD
  strncpy(errorText,"invalid SSH password",sizeof(errorText));
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR SSH_SESSION_FAIL               "initialize SSH session fail"
ERROR SSH_AUTHENTICATION
  strncpy(errorText,"SSH authentication fail",sizeof(errorText));
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR SSH
  if (ERROR_TEXT != NULL)
  {
    strncpy(errorText,ERROR_TEXT,sizeof(errorText));
  }
  else
  {
    strncpy(errorText,"ssh protocol error",sizeof(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

// --- storage ----------------------------------------------------------
ERROR INIT_STORAGE                   "init storage fail"
ERROR NO_STORAGE_NAME                "no storage name given"

// --- FTP --------------------------------------------------------------
ERROR INVALID_FTP_SPECIFIER          "invalid FTP specifier"
ERROR FTP_SESSION_FAIL               "initialize FTP session fail"
ERROR NO_FTP_PASSWORD                "no FTP password given"
ERROR INVALID_FTP_PASSWORD           "invalid FTP password"
ERROR FTP_AUTHENTICATION             "invalid FTP user/password"
ERROR FTP_GET_SIZE                   "get FTP file size fail"
//ERROR FTP_CREATE                     "create FTP file fail"
//ERROR FTP_READ                       "read FTP file fail"
//ERROR FTP_WRITE                      "write FTP file fail"
//ERROR FTP_DELETE                     "delete FTP file fail"

// --- Webdav -----------------------------------------------------------
ERROR INVALID_WEBDAV_SPECIFIER       "invalid Webdav specifier"
ERROR WEBDAV_SESSION_FAIL            "initialize Webdav session fail"
ERROR NO_WEBDAV_PASSWORD             "no Webdav password given"
ERROR INVALID_WEBDAV_PASSWORD        "invalid Webdav password"
ERROR WEBDAV_AUTHENTICATION          "invalid Webdav user/password"
ERROR WEBDAV_GET_SIZE                "get Webdav file size fail"

// --- compress ---------------------------------------------------------
ERROR INIT_COMPRESS                  "init compress fail"
ERROR DEFLATE_FAIL
  strncpy(errorText,"compress fail",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR INFLATE_FAIL
  strncpy(errorText,"decompress fail",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR COMPRESS_EOF                   "end of compressed file"
ERROR DELTA_SOURCE_NOT_FOUND
  if (ERROR_TEXT != NULL)
  {
    snprintf(errorText,sizeof(errorText)-1,"delta source '%s' not found",ERROR_TEXT);
  }
  else
  {
    strncpy(errorText,"delta source not found",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR INVALID_COMPRESS_ALGORITHM     "invalid compress algorithm"
ERROR UNKNOWN_COMPRESS_ALGORITHM     "unknown compress algorithm"

// --- crypt ------------------------------------------------------------
ERROR UNSUPPORTED_BLOCK_SIZE         "unsupported block size"
ERROR INIT_CRYPT                     "init crypt fail"
ERROR NO_CRYPT_PASSWORD              "no password given for cipher"
ERROR INVALID_CRYPT_PASSWORD         "invalid encryption password"
ERROR CRYPT_PASSWORDS_MISMATCH       "encryption passwords mismatch"
ERROR INIT_CIPHER                    "init cipher fail"
ERROR ENCRYPT_FAIL                   "encrypt fail"
ERROR DECRYPT_FAIL                   "decrypt fail"
ERROR CREATE_KEY_FAIL
  if (ERROR_TEXT != NULL)
  {
    snprintf(errorText,sizeof(errorText)-1,"create public/private key '%s' fail",ERROR_TEXT);
  }
  else
  {
    strncpy(errorText,"create public/private key fail",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR KEY_NOT_FOUND
  if (ERROR_TEXT != NULL)
  {
    snprintf(errorText,sizeof(errorText)-1,"public/private key '%s' not found",ERROR_TEXT);
  }
  else
  {
    strncpy(errorText,"public/private key not found",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR READ_KEY_FAIL
  if (ERROR_TEXT != NULL)
  {
    snprintf(errorText,sizeof(errorText)-1,"read public/private key '%s' fail",ERROR_TEXT);
  }
  else
  {
    strncpy(errorText,"read public/private key fail",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR INVALID_KEY                    "invalid key"
ERROR INVALID_KEY_LENGTH             "invalid key length"
// Note: because of name collisions with Windows include use INVALID_BLOCK_LENGTH_ instead of INVALID_BLOCK_LENGTH
ERROR INVALID_BLOCK_LENGTH_          "invalid block length"
ERROR NO_PUBLIC_KEY                  "no public encryption key"
ERROR NO_PRIVATE_KEY                 "no private decryption key"
ERROR NOT_A_PUBLIC_KEY               "key is not a public encryption key"
ERROR NOT_A_PRIVATE_KEY              "key is not a private decryption key"
ERROR KEY_ENCRYPT_FAIL               "key encryption fail"
ERROR KEY_DECRYPT_FAIL               "key decryption fail"
ERROR WRONG_PRIVATE_KEY              "wrong private decryption key"

// --- file i/o ---------------------------------------------------------
ERROR CREATE_FILE
ERROR OPEN_FILE
ERROR CREATE_DIRECTORY
  // Note: do not add error text to error message if error number is set; file name should be part of error text
  if (ERROR_ERRNO != 0)
  {
    strncpy(errorText,strerror(ERROR_ERRNO),sizeof(errorText)-1);
  }
  else
  {
    strncpy(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }

ERROR IO_ERROR
  strncpy(errorText,(ERROR_ERRNO != 0) ? strerror(ERROR_ERRNO) : "i/o error",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR READ_FILE                      "read file fail"
ERROR WRITE_FILE                     "write file fail"
ERROR DELETE_FILE                    "delete file fail"

ERROR OPEN_DIRECTORY
  // Note: do not add error text to error message if error number is set; file name should be part of error text
  if (ERROR_ERRNO != 0)
  {
    strncpy(errorText,strerror(ERROR_ERRNO),sizeof(errorText)-1);
  }
  else
  {
    errorText[0] = '\0';
    switch (ERROR_CODE)
    {
      case ERROR_CREATE_FILE:
        strncat(errorText,"create file: ",sizeof(errorText)-1-strlen(errorText));
        break;
      case ERROR_OPEN_FILE:
        strncat(errorText,"open file: ",sizeof(errorText)-1-strlen(errorText));
        break;
      case ERROR_CREATE_DIRECTORY:
        strncat(errorText,"create directory: ",sizeof(errorText)-1-strlen(errorText));
        break;
      case ERROR_OPEN_DIRECTORY:
        strncat(errorText,"open directory: ",sizeof(errorText)-1-strlen(errorText));
        break;
    }
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR READ_DIRECTORY                 "read directory fail"

// Note: because of name collisions with Windows include use FILE_EXISTS_ instead of FILE_EXISTS
ERROR FILE_EXISTS_
  if (ERROR_TEXT != NULL)
  {
    snprintf(errorText,sizeof(errorText)-1,"file '%s' already exists",ERROR_TEXT);
  }
  else
  {
    strncpy(errorText,"file already exists",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

// Note: because of name collisions with Windows include use FILE_NOT_FOUND_ instead of FILE_NOT_FOUND
ERROR FILE_NOT_FOUND_
  if (ERROR_TEXT != NULL)
  {
    snprintf(errorText,sizeof(errorText)-1,"file '%s' not found",ERROR_TEXT);
  }
  else
  {
    strncpy(errorText,"file not found",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR NOT_A_DIRECTORY
  strncpy(errorText,"not a directory",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR END_OF_DIRECTORY               "end of directory list"

// --- optical disk i/o -------------------------------------------------
ERROR OPTICAL_DISK_NOT_FOUND
  strncpy(errorText,"CD/DVD/BD device",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," '",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,"'",sizeof(errorText)-1-strlen(errorText));
  }
  strncat(errorText," not found",sizeof(errorText)-1-strlen(errorText));
  errorText[sizeof(errorText)-1] = '\0';

ERROR OPEN_OPTICAL_DISK
  strncpy(errorText,"open CD/DVD/BD disk",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," '",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,"'",sizeof(errorText)-1-strlen(errorText));
  }
  strncat(errorText," fail",sizeof(errorText)-1-strlen(errorText));
  errorText[sizeof(errorText)-1] = '\0';

ERROR OPEN_ISO9660_FILE
  strncpy(errorText,"open ISO 9660 image",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," '",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,"'",sizeof(errorText)-1-strlen(errorText));
  }
  strncat(errorText," fail",sizeof(errorText)-1-strlen(errorText));
  errorText[sizeof(errorText)-1] = '\0';

// --- device i/o -------------------------------------------------------
ERROR OPEN_DEVICE
  strncpy(errorText,strerror(ERROR_ERRNO),sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR INVALID_DEVICE_BLOCK_SIZE      "invalid device block size"
ERROR READ_DEVICE                    "read device fail"
ERROR WRITE_DEVICE                   "write device fail"
ERROR PARSE_DEVICE_LIST              "error parsing device list"

// --- archive ----------------------------------------------------------
ERROR NO_ARCHIVE_FILE_NAME           "no archive file name given"
ERROR NOT_AN_ARCHIVE_FILE            "not an archive file"
ERROR ARCHIVE_NOT_FOUND              "archive not found"
ERROR END_OF_ARCHIVE                 "end of archive"
ERROR NO_FILE_ENTRY                  "no file entry"
ERROR NO_FILE_DATA
  strncpy(errorText,"no file data entry",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," for '",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,"'",sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR NO_DIRECTORY_ENTRY             "no directory entry"
ERROR NO_LINK_ENTRY                  "no link entry"
ERROR NO_HARDLINK_ENTRY              "no hard link entry"
ERROR NO_SPECIAL_ENTRY               "no special entry"
ERROR NO_IMAGE_ENTRY                 "no image entry"
ERROR NO_IMAGE_DATA                  "no image data entry"
ERROR END_OF_DATA                    "end of data"
ERROR INSUFFICIENT_SPLIT_NUMBERS     "insufficient split number digits in name"

// Note: because of name collisions with Windows include use CRC_ instead of CRC
ERROR CRC_
  strncpy(errorText,"wrong CRC",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR ENTRY_NOT_FOUND                "entry not found"
ERROR ENTRY_INCOMPLETE               "entry is incomplete"
ERROR WRONG_ENTRY_TYPE               "wrong entry type"
ERROR ENTRIES_DIFFER                 "entries differ"
ERROR CORRUPT_DATA
  strncpy(errorText,"corrupt data or invalid password",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR INVALID_CHUNK_SIZE             "invalid chunk size"
ERROR UNKNOWN_CHUNK                  "unknown chunk"

// --- incremental files ------------------------------------------------
ERROR NOT_AN_INCREMENTAL_FILE        "invalid incremental file"
ERROR WRONG_INCREMENTAL_FILE_VERSION "wrong incremental file version"
ERROR CORRUPT_INCREMENTAL_FILE       "corrupt incremental file"

// --- device -----------------------------------------------------------
ERROR INVALID_DEVICE_SPECIFIER       "invalid device specifier"
ERROR LOAD_VOLUME_FAIL               "load volume fail"

// --- exec -------------------------------------------------------------
ERROR PARSE_COMMAND                  "parse command fail"
ERROR FORK_FAIL                      "fork for execute external program fail"
ERROR IO_REDIRECT_FAIL
  strncpy(errorText,"i/o external program fail",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText,": ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR EXEC_FAIL
  strncpy(errorText,"execute external program fail",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    char s[64];
    \
    snprintf(s,sizeof(s),"%d",ERROR_ERRNO);
    \
    strncat(errorText," '",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,"', exitcode: ",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,s,sizeof(errorText)-1-strlen(errorText));
  }
  errorText[sizeof(errorText)-1] = '\0';

// --- BARControl protocol ----------------------------------------------
ERROR PARSING                        "error parsing data"
ERROR EXPECTED_PARAMETER             "expected parameter"
ERROR UNKNOWN_VALUE                  "unknown value"
ERROR AUTHORIZATION                  "authorization error"
ERROR JOB_NOT_FOUND                  "job not found"
ERROR JOB                            "job error"

// --- database (SQLite3) -----------------------------------------------
ERROR DATABASE
  if (ERROR_TEXT != NULL)
  {
    strncpy(errorText,ERROR_TEXT,sizeof(errorText)-1);
  }
  else
  {
    strncpy(errorText,"database error",sizeof(errorText)-1);
  }
  errorText[sizeof(errorText)-1] = '\0';

ERROR DATABASE_CREATE_INDEX          "error creating index"
ERROR DATABASE_INDEX_NOT_FOUND       "index not found"

// --- debugging only ---------------------------------------------------
ERROR TESTCODE
  strncpy(errorText,"test code",sizeof(errorText)-1);
  if (ERROR_TEXT != NULL)
  {
    strncat(errorText," '",sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,ERROR_TEXT,sizeof(errorText)-1-strlen(errorText));
    strncat(errorText,"'",sizeof(errorText)-1-strlen(errorText));
  }
// end of file
