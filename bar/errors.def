//***********************************************************************
//
// $Source: /home/torsten/cvs/bar/errors.def,v $
// $Revision$
// $Author$
// Contents: Backup ARchiver errors definition
// Systems: all
//
//***********************************************************************

INCLUDE <config.h>

#ifdef HAVE_LIBSSH2
INCLUDE "libssh2.h"
#endif

NONE    "none"
DEFAULT "unknown"

// --- general ----------------------------------------------------------
ERROR INSUFFICIENT_MEMORY              "insufficient memory"
ERROR INIT                             "init fail"
ERROR INVALID_ARGUMENT                 "invalid argument"
ERROR CONFIG                           "config error"
ERROR ABORTED                          "aborted"
ERROR INTERRUPTED                      "interrupted"
ERROR FUNCTION_NOT_SUPPORTED           "function not supported"
ERROR STILL_NOT_IMPLEMENTED            "function still not implemented"
ERROR DAEMON_FAIL                      "run as daemon fail"
ERROR IPC                              "inter-process communication fail"
ERROR NO_PASSWORD                      "no password given"
ERROR INVALID_PASSWORD                 "invalid password"

// --- patterns ---------------------------------------------------------
// patterns
ERROR INVALID_PATTERN
  stringCopy(errorText,"invalid pattern",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

// --- network ----------------------------------------------------------
ERROR NO_HOST_NAME                     "no host name given"
ERROR HOST_NOT_FOUND
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"host '%s' not found",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"host not found",sizeof(errorText));
  }

ERROR CONNECT_FAIL
  stringCopy(errorText,strerror(ERROR_ERRNO),sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR TOO_MANY_CONNECTIONS             "too many concurrent connections"
ERROR NO_LOGIN_NAME                    "no login name given"
ERROR NO_LOGIN_PASSWORD                "no password given"
ERROR NETWORK_SEND                     "sending data fail"
ERROR NETWORK_RECEIVE                  "receiving data fail"
ERROR NETWORK_PARSE                    "parse received data fail"
ERROR NETWORK_EXECUTE_FAIL             "execute command fail"
ERROR NETWORK_TIMEOUT                  "timeout receive/send data"
ERROR NO_RESPONSE                      "no response from remote program"
ERROR INVALID_RESPONSE                 "invalid response from remote program"

// --- TLS/SSL ----------------------------------------------------------
ERROR INIT_TLS                         "init TLS (SSL) fail"
ERROR NO_TLS_CA                        "no TLS (SSL) certificate authority file"
ERROR NO_TLS_CERTIFICATE               "no TLS (SSL) certificate file"
ERROR NO_TLS_KEY                       "no or unreadable TLS (SSL) key file"
ERROR INVALID_TLS_CA                   "invalid TLS (SSL) certificate authority"
ERROR INVALID_TLS_CERTIFICATE          "invalid TLS (SSL) certificate"
ERROR TLS_CERTIFICATE_EXPIRED
  stringCopy(errorText,"TLS (SSL) certificate expired",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR TLS_CERTIFICATE_NOT_ACTIVE
  stringCopy(errorText,"TLS (SSL) certificate is still not active",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR TLS_HANDSHAKE
  stringCopy(errorText,"TLS (SSL) handshake failure",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR INVALID_SSH_SPECIFIER            "invalid SSH specifier"
ERROR NO_SSH_PUBLIC_KEY                "no SSH public key"
ERROR NO_SSH_PRIVATE_KEY               "no SSH private key"
ERROR NO_SSH_PASSWORD
  stringCopy(errorText,"no SSH password given",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR INVALID_SSH_PASSWORD
  stringCopy(errorText,"invalid SSH password",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR SSH_SESSION_FAIL                 "initialize SSH session fail"
ERROR SSH_AUTHENTICATION
  stringCopy(errorText,"SSH authentication fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR SSH
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringCopy(errorText,ERROR_TEXT,sizeof(errorText));
  }
  else
  {
    stringCopy(errorText,"ssh protocol error",sizeof(errorText));
  }

// --- storage ----------------------------------------------------------
ERROR INIT_STORAGE                     "init storage fail"
ERROR NO_STORAGE_NAME                  "no storage name given"

// --- FTP --------------------------------------------------------------
ERROR INVALID_FTP_SPECIFIER            "invalid FTP specifier"
ERROR FTP_SESSION_FAIL                 "initialize FTP session fail"
ERROR NO_FTP_PASSWORD                  "no FTP password given"
ERROR INVALID_FTP_PASSWORD             "invalid FTP password"
ERROR FTP_AUTHENTICATION               "invalid FTP user/password"
ERROR FTP_GET_SIZE                     "get FTP file size fail"
//ERROR FTP_CREATE                       "create FTP file fail"
//ERROR FTP_READ                         "read FTP file fail"
//ERROR FTP_WRITE                        "write FTP file fail"
//ERROR FTP_DELETE                       "delete FTP file fail"

// --- Webdav -----------------------------------------------------------
ERROR INVALID_WEBDAV_SPECIFIER         "invalid Webdav specifier"
ERROR WEBDAV_SESSION_FAIL              "initialize Webdav session fail"
ERROR NO_WEBDAV_PASSWORD               "no Webdav password given"
ERROR INVALID_WEBDAV_PASSWORD          "invalid Webdav password"
ERROR WEBDAV_AUTHENTICATION            "invalid Webdav user/password"
ERROR WEBDAV_GET_SIZE                  "get Webdav file size fail"

// --- compress ---------------------------------------------------------
ERROR INIT_COMPRESS
  stringCopy(errorText,"init compress fail",sizeof(errorText));
  stringConcat(errorText,": ",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }
  else
  {
    stringConcat(errorText,ERROR_ERRNO_TEXT,sizeof(errorText));
  }

ERROR INIT_DECOMPRESS
  stringCopy(errorText,"init decompress fail",sizeof(errorText));
  stringConcat(errorText,": ",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }
  else
  {
    stringConcat(errorText,ERROR_ERRNO_TEXT,sizeof(errorText));
  }

ERROR DEFLATE_FAIL
  stringCopy(errorText,"compress fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR INFLATE_FAIL
  stringCopy(errorText,"decompress fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR COMPRESS_EOF                     "end of compressed file"
ERROR DELTA_SOURCE_NOT_FOUND
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"Xdelta source '%s' not found",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"delta source not found",sizeof(errorText));
  }

ERROR INVALID_COMPRESS_ALGORITHM       "invalid compress algorithm"
ERROR UNKNOWN_COMPRESS_ALGORITHM       "unknown compress algorithm"
ERROR COMPRESS_ALGORITHM_NOT_SUPPORTED "compress algorithm not supported"

// --- crypt ------------------------------------------------------------
ERROR UNSUPPORTED_BLOCK_LENGTH         "unsupported block length"
ERROR INIT_CRYPT
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"init crypt fail: %s",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"init crypt fail",sizeof(errorText));
  }

ERROR NO_CRYPT_PASSWORD                "no password given for cipher"
ERROR INVALID_CRYPT_PASSWORD           "invalid decryption password"
ERROR CRYPT_PASSWORDS_MISMATCH         "encryption passwords mismatch"
ERROR INIT_CIPHER
  stringCopy(errorText,"init cipher fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR ENCRYPT_FAIL
  stringCopy(errorText,"encrypt fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR DECRYPT_FAIL
  stringCopy(errorText,"decrypt fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR CREATE_KEY_FAIL
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"create public/private key '%s' fail",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"create public/private key fail",sizeof(errorText));
  }

ERROR INIT_KEY                         "init key fail"
ERROR KEY_NOT_FOUND
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"public/private key '%s' not found",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"public/private key not found",sizeof(errorText));
  }

ERROR READ_KEY_FAIL
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"read public/private key '%s' fail",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"read public/private key fail",sizeof(errorText));
  }

ERROR INVALID_KEY                      "invalid key"
ERROR INVALID_KEY_LENGTH               "invalid key length"
// Note: because of name collisions with Windows include use INVALID_BLOCK_LENGTH_ instead of INVALID_BLOCK_LENGTH
ERROR INVALID_BLOCK_LENGTH_            "invalid block length"
ERROR INVALID_SALT_LENGTH              "invalid salt length"
ERROR NO_PUBLIC_CRYPT_KEY              "no public encryption key"
ERROR NO_PRIVATE_CRYPT_KEY             "no private encryption key"
ERROR NO_PUBLIC_SIGNATURE_KEY          "no public signature key"
ERROR NO_PRIVATE_SIGNATURE_KEY         "no private signature key"
ERROR NOT_A_PUBLIC_KEY
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"key '%s' is not a public key",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"key is not a public key",sizeof(errorText));
  }

ERROR NOT_A_PRIVATE_KEY
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"key '%s' is not a private key",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"key '%s' is not a private key",sizeof(errorText));
  }

ERROR KEY_ENCRYPT_FAIL
  stringCopy(errorText,"key encryption fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR KEY_DECRYPT_FAIL
  stringCopy(errorText,"key decryption fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR WRONG_PRIVATE_KEY                "wrong private decryption key"

ERROR INVALID_CRYPT_ALGORITHM          "invalid encryption algorithm"
ERROR UNKNOWN_CRYPT_ALGORITHM          "unknown encryption algorithm"

ERROR INIT_HASH                        "init hash fail"
ERROR INVALID_HASH_ALGORITHM           "invalid hash algorithm"
ERROR UNKNOWN_HASH_ALGORITHM           "unknown hash algorithm"

ERROR INIT_MAC                         "init message authentication code fail"
ERROR INVALID_MAC_ALGORITHM            "invalid message authentication code algorithm"
ERROR UNKNOWN_MAC_ALGORITHM            "unknown message authentication code algorithm"

// --- file i/o ---------------------------------------------------------
ERROR NO_FILE_NAME                     "no file name given"

ERROR CREATE_FILE
ERROR OPEN_FILE
ERROR CREATE_DIRECTORY
  // Note: do not add error text to error message if error number is set; file name should be part of error text
  if (ERROR_ERRNO != 0)
  {
    stringCopy(errorText,strerror(ERROR_ERRNO),sizeof(errorText));
  }
  else
  {
    stringCopy(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR IO_ERROR
  stringCopy(errorText,(ERROR_ERRNO != 0) ? strerror(ERROR_ERRNO) : "i/o error",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR READ_FILE                        "read file fail"
ERROR END_OF_FILE                      "end of file"
ERROR WRITE_FILE                       "write file fail"
ERROR DELETE_FILE                      "delete file fail"

ERROR OPEN_DIRECTORY
  // Note: do not add error text to error message if error number is set; file name should be part of error text
  if (ERROR_ERRNO != 0)
  {
    stringCopy(errorText,strerror(ERROR_ERRNO),sizeof(errorText));
  }
  else
  {
    errorText[0] = '\0';
    switch (ERROR_CODE)
    {
      case ERROR_CREATE_FILE:
        stringConcat(errorText,"create file: ",sizeof(errorText));
        break;
      case ERROR_OPEN_FILE:
        stringConcat(errorText,"open file: ",sizeof(errorText));
        break;
      case ERROR_CREATE_DIRECTORY:
        stringConcat(errorText,"create directory: ",sizeof(errorText));
        break;
      case ERROR_OPEN_DIRECTORY:
        stringConcat(errorText,"open directory: ",sizeof(errorText));
        break;
    }
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR READ_DIRECTORY                   "read directory fail"

// Note: because of name collisions with Windows include use FILE_EXISTS_ instead of FILE_EXISTS
ERROR FILE_EXISTS_
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"file '%s' already exists",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"file already exists",sizeof(errorText));
  }

// Note: because of name collisions with Windows include use FILE_NOT_FOUND_ instead of FILE_NOT_FOUND
ERROR FILE_NOT_FOUND_
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"file '%s' not found",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"file not found",sizeof(errorText));
  }

ERROR NOT_A_DIRECTORY
  stringCopy(errorText,"not a directory",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR END_OF_DIRECTORY                 "end of directory list"

ERROR INSUFFICIENT_FILE_NOTIFY         "insufficient file notify entries"

// --- optical disk i/o -------------------------------------------------
ERROR OPTICAL_DISK_NOT_FOUND
  stringCopy(errorText,"CD/DVD/BD device",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }
  stringConcat(errorText," not found",sizeof(errorText));

ERROR OPEN_OPTICAL_DISK
  stringCopy(errorText,"open CD/DVD/BD disk",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }
  stringConcat(errorText," fail",sizeof(errorText));

ERROR OPEN_ISO9660_FILE
  stringCopy(errorText,"open ISO 9660 image",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }
  stringConcat(errorText," fail",sizeof(errorText));

// --- device i/o -------------------------------------------------------
ERROR NO_DEVICE_NAME                   "no device name given"

ERROR OPEN_DEVICE
  stringCopy(errorText,strerror(ERROR_ERRNO),sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR INVALID_DEVICE_BLOCK_SIZE        "invalid device block size"
ERROR READ_DEVICE                      "read device fail"
ERROR WRITE_DEVICE                     "write device fail"
ERROR PARSE_DEVICE_LIST                "error parsing device list"

ERROR MOUNT
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"mount '%s' fail",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"mount fail",sizeof(errorText));
  }

ERROR UMOUNT
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringFormat(errorText,sizeof(errorText),"unmount '%s' fail",ERROR_TEXT);
  }
  else
  {
    stringCopy(errorText,"unmount fail",sizeof(errorText));
  }

// --- archive ----------------------------------------------------------
ERROR NO_ARCHIVE_FILE_NAME             "no archive file name given"
ERROR NOT_AN_ARCHIVE_FILE              "not an archive file"
ERROR ARCHIVE_NOT_FOUND                "archive not found"
ERROR END_OF_ARCHIVE                   "end of archive"
ERROR NO_META_ENTRY                    "no meta entry"
ERROR NO_FILE_ENTRY                    "no file entry"
ERROR NO_FILE_DATA
  stringCopy(errorText,"no file data entry",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," for '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR NO_DIRECTORY_ENTRY               "no directory entry"
ERROR NO_LINK_ENTRY                    "no link entry"
ERROR NO_HARDLINK_ENTRY                "no hard link entry"
ERROR NO_SPECIAL_ENTRY                 "no special entry"
ERROR NO_IMAGE_ENTRY                   "no image entry"
ERROR NO_IMAGE_DATA                    "no image data entry"
ERROR END_OF_DATA                      "end of data"
ERROR INCOMPLETE_ARCHIVE               "incomplete archive"
ERROR INSUFFICIENT_SPLIT_NUMBERS       "insufficient split number digits in name"

// Note: because of name collisions with Windows include use CRC_ instead of CRC
ERROR CRC_
  stringCopy(errorText,"wrong CRC",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," at offset ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR ENTRY_NOT_FOUND
  stringCopy(errorText,"entry not found",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR ENTRY_INCOMPLETE
  stringCopy(errorText,"entry is incomplete",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR WRONG_ENTRY_TYPE
  stringCopy(errorText,"wrong entry type",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR ENTRIES_DIFFER
  stringCopy(errorText,"entries differ",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR CORRUPT_DATA
  stringCopy(errorText,"corrupt data or invalid password",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR INVALID_CHUNK_SIZE               "invalid chunk size"
ERROR UNKNOWN_CHUNK
  stringCopy(errorText,"unknown chunk",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR INVALID_SIGNATURE                "invalid signature"

// --- incremental files ------------------------------------------------
ERROR NOT_AN_INCREMENTAL_FILE          "invalid incremental file"
ERROR WRONG_INCREMENTAL_FILE_VERSION   "wrong incremental file version"
ERROR CORRUPT_INCREMENTAL_FILE         "corrupt incremental file"

// --- device -----------------------------------------------------------
ERROR INVALID_DEVICE_SPECIFIER         "invalid device specifier"
ERROR LOAD_VOLUME_FAIL                 "load volume fail"

// --- exec -------------------------------------------------------------
ERROR PARSE_COMMAND                    "parse command fail"
ERROR EXPAND_TEMPLATE                  "expand command fail"
ERROR FORK_FAIL                        "fork for execute external program fail"
ERROR IO_REDIRECT_FAIL
  stringCopy(errorText,strerror(ERROR_ERRNO),sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR EXEC_FAIL
  stringCopy(errorText,"execute external program fail",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    char s[64];
    \
    stringFormat(s,sizeof(s),"%d",ERROR_ERRNO);
    \
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"' (exitcode: ",sizeof(errorText));
    stringConcat(errorText,s,sizeof(errorText));
    stringConcat(errorText,")",sizeof(errorText));
  }

// --- BARControl protocol ----------------------------------------------
ERROR PARSING                          "error parsing data"
ERROR EXPECTED_PARAMETER               "expected parameter"
ERROR UNKNOWN_VALUE                    "unknown value"
ERROR AUTHORIZATION                    "authorization error"
ERROR JOB_NOT_FOUND                    "job not found"
ERROR JOB                              "job error"

// --- index database (SQLite3) -----------------------------------------
ERROR DATABASE
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText,": ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }

ERROR DATABASE_VERSION_UNKNOWN         "unknown version on index"
ERROR DATABASE_MISSING_TABLE
  stringCopy(errorText,"missing table",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR DATABASE_MISSING_COLUMN
  stringCopy(errorText,"missing column",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR DATABASE_OBSOLETE_TABLE
  stringCopy(errorText,"obsolete table",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR DATABASE_OBSOLETE_COLUMN
  stringCopy(errorText,"obsolete column",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR DATABASE_TYPE_MISMATCH
  stringCopy(errorText,"type mismatch",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," '",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
    stringConcat(errorText,"'",sizeof(errorText));
  }

ERROR DATABASE_CREATE_INDEX            "error creating index"
ERROR DATABASE_INDEX_NOT_FOUND         "index not found"
ERROR DATABASE_INDEX_NOT_READY         "index still not initialized"
ERROR DATABASE_INVALID_INDEX           "invalid index"
ERROR DATABASE_TIMEOUT                 "timeout accessing index"

// --- debugging only ---------------------------------------------------
ERROR TESTCODE
  stringCopy(errorText,"test code",sizeof(errorText));
  if (!stringIsEmpty(ERROR_TEXT))
  {
    stringConcat(errorText," ",sizeof(errorText));
    stringConcat(errorText,ERROR_TEXT,sizeof(errorText));
  }
// end of file
