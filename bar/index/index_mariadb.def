/* BAR index MariaDB database definitions

 Notes:
   - encoding: use 'utf8mb4' for 4-byte-UTF8 and collate 'utf8mb4_bin'
     for case-sensitive compare!

*/

const UUID_LENGTH     = 36
// Index limit: utf8mb4 3072/4-1 = 767 codepoints
//const MAX_TEXT_LENGTH = 767
//TODO: >= 760 does not work - why?
const MAX_TEXT_LENGTH = 759

// --- meta ------------------------------------------------------------
CREATE TABLE IF NOT EXISTS meta(
  name  VARCHAR(${MAX_TEXT_LENGTH}) UNIQUE,
  value TEXT
);
INSERT OR IGNORE INTO meta (name,value) VALUES ('version',${VERSION});
INSERT OR IGNORE INTO meta (name,value) VALUES ('datetime',NOW());

// --- uuids -----------------------------------------------------------
CREATE TABLE IF NOT EXISTS uuids(
  id      BIGINT AUTO_INCREMENT PRIMARY KEY,
  jobUUID VARCHAR(${UUID_LENGTH}) UNIQUE NOT NULL,

  INDEX(jobUUID)
);

// --- entities --------------------------------------------------------
CREATE TABLE IF NOT EXISTS entities(
  id                        BIGINT AUTO_INCREMENT PRIMARY KEY,
  jobUUID                   VARCHAR(${UUID_LENGTH}) NOT NULL,
// TODO: rename to entityUUID
  scheduleUUID              VARCHAR(${UUID_LENGTH}) NOT NULL DEFAULT '',
  hostName                  VARCHAR(${MAX_TEXT_LENGTH}) DEFAULT '',
//TODO: use
  userName                  TEXT,
  created                   DATETIME,
  type                      INT,
  parentJobUUID             INT DEFAULT 0,
  bidFlag                   BOOL DEFAULT FALSE,
  lockedCount               INT DEFAULT 0,
  deletedFlag               INT DEFAULT 0,

  // Note: updated via Index_updateEntitiesInfos()
  totalEntryCount           BIGINT DEFAULT 0,  // total number of entries
  totalEntrySize            BIGINT DEFAULT 0,  // total size of entries [bytes]

  totalFileCount            BIGINT DEFAULT 0,  // total number of file entries
  totalFileSize             BIGINT DEFAULT 0,  // total size of file entries (sum of fragments) [bytes]
  totalImageCount           BIGINT DEFAULT 0,  // total number of image entries
  totalImageSize            BIGINT DEFAULT 0,  // total size of image entries (sum of fragments) [bytes]
  totalDirectoryCount       BIGINT DEFAULT 0,  // total number of directory entries
  totalLinkCount            BIGINT DEFAULT 0,  // total number of link entries
  totalHardlinkCount        BIGINT DEFAULT 0,  // total number of hardlink entries
  totalHardlinkSize         BIGINT DEFAULT 0,  // total size of hardlink entries (sum of fragments) [bytes]
  totalSpecialCount         BIGINT DEFAULT 0,  // total number of special entries

  totalEntryCountNewest     BIGINT DEFAULT 0,  // total number of newest entries
  totalEntrySizeNewest      BIGINT DEFAULT 0,  // total size of newest entries [bytes]

  totalFileCountNewest      BIGINT DEFAULT 0,  // total number of newest file entries
  totalFileSizeNewest       BIGINT DEFAULT 0,  // total size of newest file entries (sum of fragments) [bytes]
  totalImageCountNewest     BIGINT DEFAULT 0,  // total number of newest image entries
  totalImageSizeNewest      BIGINT DEFAULT 0,  // total size of newest image entries (sum of fragments) [bytes]
  totalDirectoryCountNewest BIGINT DEFAULT 0,  // total number of newest directory entries
  totalLinkCountNewest      BIGINT DEFAULT 0,  // total number of newest link entries
  totalHardlinkCountNewest  BIGINT DEFAULT 0,  // total number of newest hardlink entries
  totalHardlinkSizeNewest   BIGINT DEFAULT 0,  // total size of newest hardlink entries (sum of fragments) [bytes]
  totalSpecialCountNewest   BIGINT DEFAULT 0,  // total number of newest special entries

  // Note: redundancy for faster access
  uuidId                    BIGINT DEFAULT 0,  // no foreign key reference

  INDEX(jobUUID,created,type),
  INDEX(hostName),
  INDEX(deletedFlag)
);

// insert default entity (Note: requires an update, because MariaDB does not allow to insert with id=0)
DELETE FROM entities WHERE id=0;
DELETE FROM entities WHERE id=1;
INSERT INTO entities (id,jobUUID,scheduleUUID,created,type,parentJobUUID,bidFlag) VALUES (1,'','',0,0,0,0);
UPDATE entities SET id=${DEFAULT_ENTITY_DATABASE_ID} WHERE id=1;
ALTER TABLE entities AUTO_INCREMENT=1;

// insert/delete/update triggeres
CREATE TRIGGER AFTER INSERT ON entities
  FOR EACH ROW
    INSERT IGNORE INTO uuids
      (jobUUID) VALUES (NEW.jobUUID);
END;

// --- storages --------------------------------------------------------
CREATE TABLE IF NOT EXISTS storages(
  id                        BIGINT AUTO_INCREMENT PRIMARY KEY,

  entityId                  BIGINT,
  name                      VARCHAR(${MAX_TEXT_LENGTH}),
  created                   DATETIME,
  size                      BIGINT DEFAULT 0,
//TODO: use
  hostName                  TEXT,
//TODO: use
  userName                  VARCHAR(64),
  comment                   TEXT,
  state                     INT DEFAULT ${STATE_CREATE},
  mode                      INT DEFAULT ${MODE_MANUAL},
  lastChecked               DATETIME DEFAULT "1970-01-01 00:00:00",
  errorMessage              TEXT,
  deletedFlag               BOOL DEFAULT FALSE,

  // Note: updated via IndexStorage_updateInfos()
  totalEntryCount           BIGINT DEFAULT 0,  // total number of entries
  totalEntrySize            BIGINT DEFAULT 0,  // total size of entries [bytes]

  totalFileCount            BIGINT DEFAULT 0,  // total number of file entries
  totalFileSize             BIGINT DEFAULT 0,  // total size of file entries (sum of fragments) [bytes]
  totalImageCount           BIGINT DEFAULT 0,  // total number of image entries
  totalImageSize            BIGINT DEFAULT 0,  // total size of image entries (sum of fragments) [bytes]
  totalDirectoryCount       BIGINT DEFAULT 0,  // total number of directory entries
  totalLinkCount            BIGINT DEFAULT 0,  // total number of link entries
  totalHardlinkCount        BIGINT DEFAULT 0,  // total number of hardlink entries
  totalHardlinkSize         BIGINT DEFAULT 0,  // total size of hardlink entries (sum of fragments) [bytes]
  totalSpecialCount         BIGINT DEFAULT 0,  // total number of special entries

  totalEntryCountNewest     BIGINT DEFAULT 0,  // total number of newest entries
  totalEntrySizeNewest      BIGINT DEFAULT 0,  // total size of newest entries [bytes]

  totalFileCountNewest      BIGINT DEFAULT 0,  // total number of newest file entries
  totalFileSizeNewest       BIGINT DEFAULT 0,  // total size of newest file entries (sum of fragments) [bytes]
  totalImageCountNewest     BIGINT DEFAULT 0,  // total number of newest image entries
  totalImageSizeNewest      BIGINT DEFAULT 0,  // total size of newest image entries (sum of fragments) [bytes]
  totalDirectoryCountNewest BIGINT DEFAULT 0,  // total number of newest directory entries
  totalLinkCountNewest      BIGINT DEFAULT 0,  // total number of newest link entries
  totalHardlinkCountNewest  BIGINT DEFAULT 0,  // total number of newest hardlink entries
  totalHardlinkSizeNewest   BIGINT DEFAULT 0,  // total size of newest hardlink entries (sum of fragments) [bytes]
  totalSpecialCountNewest   BIGINT DEFAULT 0,  // total number of newest special entries

  // Note: redundancy for faster access
  uuidId                    BIGINT DEFAULT 0,  // no foreign key reference

  FOREIGN KEY(entityId) REFERENCES entities(id) ON DELETE CASCADE,

  INDEX(uuidId,entityId,name,created,state),
  INDEX(entityId,name,created,state),
  INDEX(name,totalEntryCount,created,state),
  INDEX(created,name,totalEntryCount,state),
  INDEX(userName),
  INDEX(state,name,totalEntryCount,created),
  INDEX(deletedFlag),
  FULLTEXT(name)
);

// full-text-search (using a view)
CREATE VIEW FTS_storages(
  SELECT id AS storageId,
         name
  FROM storages
);

// --- entries ---------------------------------------------------------
CREATE TABLE IF NOT EXISTS entries(
  id              BIGINT AUTO_INCREMENT PRIMARY KEY,

  entityId        BIGINT,
  type            INT,
  name            VARCHAR(${MAX_TEXT_LENGTH}) NOT NULL,
  timeLastAccess  DATETIME,
  timeModified    DATETIME,
  timeLastChanged DATETIME,
  userId          INT,
  groupId         INT,
  permission      INT,
  deletedFlag     BOOL DEFAULT FALSE,

//TODO: still not used
  archiveOffset   BIGINT,

  // Note: redundancy for faster access
  uuidId          BIGINT DEFAULT 0,  // no foreign key reference
  size            BIGINT DEFAULT 0,

  FOREIGN KEY(entityId) REFERENCES entities(id) ON DELETE CASCADE,

  INDEX(uuidId,entityId,type,name),
  INDEX(entityId,type,name),
  INDEX(name,size,type,timeLastChanged),
  INDEX(type,size,name,timeLastChanged),
  INDEX(size,type,name,timeLastChanged),
  INDEX(timeLastChanged,name,size,type),
  FULLTEXT(name)
);

// newest entries
CREATE TABLE IF NOT EXISTS entriesNewest(
  id              BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId         BIGINT,  // no 'NOT NULL'

  // Note: redundancy for faster access
  uuidId          BIGINT DEFAULT 0,  // no foreign key reference
  entityId        BIGINT DEFAULT 0,
  type            INT DEFAULT 0,
  name            VARCHAR(${MAX_TEXT_LENGTH}) NOT NULL,
  timeLastChanged DATETIME DEFAULT "1970-01-01 00:00:00",
  userId          INT DEFAULT 0,
  groupId         INT DEFAULT 0,
  permission      INT DEFAULT 0,

  size            BIGINT DEFAULT 0,       // file/image/hardlink size

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,
  FOREIGN KEY(entityId) REFERENCES entities(id) ON DELETE CASCADE,

  CONSTRAINT entriesNewest UNIQUE (name),

  INDEX(entryId,name,size,timeLastChanged),
  INDEX(name,size,type,timeLastChanged),
  INDEX(type,entryId,name,size,timeLastChanged),
  INDEX(type,size,name,timeLastChanged),
  INDEX(size,type,name,timeLastChanged),
  INDEX(timeLastChanged,name,size,type),
  INDEX(entityId,type,entryId,name,size,timeLastChanged)
);

// full-text-search (using a view)
CREATE VIEW FTS_entries(
  SELECT id AS entryId,
         name
  FROM entries
);

//TODO
// --- skipped entries -------------------------------------------------
CREATE TABLE IF NOT EXISTS skippedEntries(
  id          BIGINT AUTO_INCREMENT PRIMARY KEY,
  entityId    BIGINT NOT NULL,
  name        VARCHAR(${MAX_TEXT_LENGTH}) NOT NULL,
  type        INT,

  deletedFlag INT DEFAULT 0,

  FOREIGN KEY(entityId) REFERENCES entities(id) ON DELETE CASCADE,

  INDEX(entityId,type,name),
  INDEX(name),
  INDEX(type,name)
);

// --- entry fragments -------------------------------------------------
CREATE TABLE IF NOT EXISTS entryFragments(
  id        BIGINT AUTO_INCREMENT PRIMARY KEY,
  entryId   BIGINT NOT NULL,
  storageId BIGINT NOT NULL,
  `offset`  BIGINT,
  size      BIGINT,

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,
  FOREIGN KEY(storageId) REFERENCES storages(id) ON DELETE CASCADE,

//  CONSTRAINT entryFragments UNIQUE (entryId,offset),

  INDEX(entryId),
  INDEX(storageId)
);

// --- files -----------------------------------------------------------
CREATE TABLE IF NOT EXISTS fileEntries(
  id              BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId         BIGINT NOT NULL,
  size            BIGINT,

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,

  CONSTRAINT fileEntries UNIQUE (entryId),

  INDEX(entryId)
);

// --- images ----------------------------------------------------------
CREATE TABLE IF NOT EXISTS imageEntries(
  id             BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId        BIGINT NOT NULL,
  size           BIGINT,
  fileSystemType INT,
  blockSize      INT,                 // size of image block

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,

  CONSTRAINT imageEntries UNIQUE (entryId),

  INDEX(entryId)
);

// --- directories -----------------------------------------------------
CREATE TABLE IF NOT EXISTS directoryEntries(
  id                    BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId               BIGINT NOT NULL,
  storageId             BIGINT NOT NULL,

  // Note: redundancy for faster access
  name                  VARCHAR(${MAX_TEXT_LENGTH}),

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,
  FOREIGN KEY(storageId) REFERENCES storages(id) ON DELETE CASCADE,

  CONSTRAINT directoryEntries UNIQUE (entryId),

  INDEX(entryId),
  INDEX(storageId,name),
  INDEX(name)
);

// --- links -----------------------------------------------------------
CREATE TABLE IF NOT EXISTS linkEntries(
  id              BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId         BIGINT NOT NULL,
  storageId       BIGINT NOT NULL,
  destinationName TEXT,

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,
  FOREIGN KEY(storageId) REFERENCES storages(id) ON DELETE CASCADE,

  CONSTRAINT linkEntries UNIQUE (entryId),

  INDEX(entryId),
  INDEX(storageId)
);

// --- hardlinks -------------------------------------------------------
CREATE TABLE IF NOT EXISTS hardlinkEntries(
  id      BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId BIGINT NOT NULL,
  size    BIGINT,

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,

  CONSTRAINT hardlinkEntries UNIQUE (entryId),

  INDEX(entryId)
);

// --- special ---------------------------------------------------------
CREATE TABLE IF NOT EXISTS specialEntries(
  id          BIGINT AUTO_INCREMENT PRIMARY KEY,

  entryId     BIGINT NOT NULL,
  storageId   BIGINT NOT NULL,
  specialType INT,
  major       INT,
  minor       INT,

  FOREIGN KEY(entryId) REFERENCES entries(id) ON DELETE CASCADE,
  FOREIGN KEY(storageId) REFERENCES storages(id) ON DELETE CASCADE,

  CONSTRAINT specialEntries UNIQUE (entryId),

  INDEX(entryId),
  INDEX(storageId)
);

// --- history ---------------------------------------------------------
CREATE TABLE IF NOT EXISTS history(
  id                BIGINT AUTO_INCREMENT PRIMARY KEY,
  jobUUID           VARCHAR(${UUID_LENGTH}) NOT NULL,
// TODO: rename to entityUUID
  scheduleUUID      TEXT,
  hostName          TEXT,
  userName          TEXT,
  type              INT,
  created           DATETIME,
  errorMessage      VARCHAR(${MAX_TEXT_LENGTH}),
  duration          BIGINT,
  totalEntryCount   BIGINT,
  totalEntrySize    BIGINT,
  skippedEntryCount BIGINT,
  skippedEntrySize  BIGINT,
  errorEntryCount   BIGINT,
  errorEntrySize    BIGINT,

  INDEX(jobUUID,created,type),
  INDEX(created),
  INDEX(errorMessage)
);

// --- debug only ------------------------------------------------------
CREATE TABLE IF NOT EXISTS log(
  text TEXT
);

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
