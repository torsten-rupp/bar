Common subdirectories: xdelta3.0.0/examples and xdelta3.0.0.new/examples
Common subdirectories: xdelta3.0.0/testing and xdelta3.0.0.new/testing
diff -u xdelta3.0.0/xdelta3.c xdelta3.0.0.new/xdelta3.c
--- xdelta3.0.0/xdelta3.c	2010-11-08 01:43:29.000000000 +0900
+++ xdelta3.0.0.new/xdelta3.c	2011-03-05 17:30:50.751774608 +0900
@@ -1541,7 +1541,7 @@
 #define A32_DO8(buf,i)  A32_DO4(buf,i); A32_DO4(buf,i+4);
 #define A32_DO16(buf)   A32_DO8(buf,0); A32_DO8(buf,8);
 
-static unsigned long adler32 (unsigned long adler, const uint8_t *buf, usize_t len)
+static unsigned long xdelta3_adler32 (unsigned long adler, const uint8_t *buf, usize_t len)
 {
     unsigned long s1 = adler & 0xffff;
     unsigned long s2 = (adler >> 16) & 0xffff;
@@ -2049,12 +2049,14 @@
 static void*
 __xd3_alloc_func (void* opaque, usize_t items, usize_t size)
 {
+  (void)opaque;
   return malloc ((size_t) items * (size_t) size);
 }
 
 static void
 __xd3_free_func (void* opaque, void* address)
 {
+  (void)opaque;
   free (address);
 }
 
@@ -2499,14 +2501,14 @@
  Getblk interface
  ***********************************************************/
 
-inline
+static inline
 xoff_t xd3_source_eof(const xd3_source *src)
 {
   xoff_t r = (src->blksize * src->max_blkno) + (xoff_t)src->onlastblk;
   return r;
 }
 
-inline
+static inline
 usize_t xd3_bytes_on_srcblk (xd3_source *src, xoff_t blkno)
 {
   usize_t r = (blkno == src->max_blkno ?
@@ -3202,6 +3204,7 @@
 static void
 xd3_iopt_erase (xd3_stream *stream, usize_t pos, usize_t size)
 {
+  (void)size;
   while (! xd3_rlist_empty (& stream->iopt_used))
     {
       xd3_rinst *r = xd3_rlist_back (& stream->iopt_used);
@@ -3282,6 +3285,8 @@
 {
   int ret;
 
+  (void)first;
+  (void)second;
   /* All double instructions use fixed sizes, so all we need to do is
    * output the instruction code, no sizes. */
   XD3_ASSERT (stream->code_table[code].size1 != 0 &&
@@ -3511,7 +3516,7 @@
 
       if (stream->flags & XD3_ADLER32)
 	{
-	  a32 = adler32 (1L, stream->next_in, stream->avail_in);
+	  a32 = xdelta3_adler32 (1L, stream->next_in, stream->avail_in);
 	}
       else
 	{
@@ -3690,7 +3695,7 @@
   return ENOMEM;
 }
 
-int
+static int
 xd3_encode_init_full (xd3_stream *stream)
 {
   return xd3_encode_init (stream, 1);
@@ -3990,6 +3995,7 @@
   usize_t ipos = 0;
   usize_t n = min(stream->winsize, input_size);
 
+  (void)is_encode;
   (*output_size) = 0;
 
   stream->flags |= XD3_FLUSH;
@@ -4063,6 +4069,7 @@
   xd3_source src;
   int ret;
 
+  (void)close_stream;
   memset (& stream, 0, sizeof (stream));
   memset (& config, 0, sizeof (config));
 
@@ -4777,6 +4784,7 @@
 		   usize_t scksum,
 		   usize_t pos)
 {
+  (void)scksum;
   /* If we are maintaining previous duplicates. */
   if (stream->small_prev)
     {
@@ -4835,6 +4843,7 @@
   const uint8_t *inp;
   const uint8_t *ref;
 
+  (void)scksum;
   SMALL_HASH_DEBUG1 (stream, stream->next_in + stream->input_position);
 
   XD3_ASSERT (stream->min_match + stream->input_position <= stream->avail_in);
Only in xdelta3.0.0.new: xdelta3.c.orig
Only in xdelta3.0.0.new: xdelta3.c.rej
diff -u xdelta3.0.0/xdelta3-decode.h xdelta3.0.0.new/xdelta3-decode.h
--- xdelta3.0.0/xdelta3-decode.h	2010-01-04 09:18:15.000000000 +0900
+++ xdelta3.0.0.new/xdelta3-decode.h	2011-03-05 17:30:22.516581126 +0900
@@ -552,6 +552,8 @@
       return ret;
     }
 #undef DECODE_SECONDARY_SECTION
+#else
+  (void)secondary_stream;
 #endif
   return 0;
 }
diff -u xdelta3.0.0/xdelta3-hash.h xdelta3.0.0.new/xdelta3-hash.h
--- xdelta3.0.0/xdelta3-hash.h	2010-01-04 09:18:15.000000000 +0900
+++ xdelta3.0.0.new/xdelta3-hash.h	2011-03-05 17:30:22.520579897 +0900
@@ -87,7 +87,7 @@
 
 /* Update the checksum state. */
 #if ADLER_LARGE_CKSUM
-inline uint32_t
+static inline uint32_t
 xd3_large_cksum_update (uint32_t cksum,
 			const uint8_t *base,
 			usize_t look) {
@@ -108,6 +108,7 @@
             const uint8_t *base,
             const usize_t look)
 {
+  (void)look;
   (*state) = *(uint32_t*)base;
   return (*state) * hash_multiplier;
 }
@@ -116,6 +117,7 @@
 			const uint8_t *base,
 			usize_t look)
 {
+  (void)look;
   (*state) = *(uint32_t*)(base+1);
   return (*state) * hash_multiplier;
 }
@@ -213,6 +215,7 @@
 {
   int bits = xd3_size_log2 (slots);
 
+  (void)stream;
   /* TODO: there's a 32-bit assumption here */
   cfg->size  = (1 << bits);
   cfg->mask  = (cfg->size - 1);
