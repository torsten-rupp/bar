Common subdirectories: xdelta3-3.1.0.org/cpp-btree and xdelta3-3.1.0/cpp-btree
Common subdirectories: xdelta3-3.1.0.org/examples and xdelta3-3.1.0/examples
Common subdirectories: xdelta3-3.1.0.org/go and xdelta3-3.1.0/go
Common subdirectories: xdelta3-3.1.0.org/m4 and xdelta3-3.1.0/m4
Common subdirectories: xdelta3-3.1.0.org/testing and xdelta3-3.1.0/testing
diff -u xdelta3-3.1.0.org/xdelta3.c xdelta3-3.1.0/xdelta3.c
--- xdelta3-3.1.0.org/xdelta3.c	2016-01-05 09:05:31.000000000 +0100
+++ xdelta3-3.1.0/xdelta3.c	2016-10-04 16:13:11.974332662 +0200
@@ -1084,7 +1084,7 @@
 #define A32_DO8(buf,i)  A32_DO4(buf,i); A32_DO4(buf,i+4);
 #define A32_DO16(buf)   A32_DO8(buf,0); A32_DO8(buf,8);
 
-static uint32_t adler32 (uint32_t adler, const uint8_t *buf, usize_t len)
+static uint32_t xdelta3_adler32 (uint32_t adler, const uint8_t *buf, usize_t len)
 {
     uint32_t s1 = adler & 0xffffU;
     uint32_t s2 = (adler >> 16) & 0xffffU;
@@ -1405,12 +1405,14 @@
 static void*
 __xd3_alloc_func (void* opaque, size_t items, usize_t size)
 {
+  (void)opaque;
   return malloc (items * (size_t) size);
 }
 
 static void
 __xd3_free_func (void* opaque, void* address)
 {
+  (void)opaque;
   free (address);
 }
 
@@ -2541,6 +2543,7 @@
 static void
 xd3_iopt_erase (xd3_stream *stream, usize_t pos, usize_t size)
 {
+  (void)size;
   while (! xd3_rlist_empty (& stream->iopt_used))
     {
       xd3_rinst *r = xd3_rlist_back (& stream->iopt_used);
@@ -2822,7 +2825,7 @@
 
       if (stream->flags & XD3_ADLER32)
 	{
-	  a32 = adler32 (1L, stream->next_in, stream->avail_in);
+	  a32 = xdelta3_adler32 (1L, stream->next_in, stream->avail_in);
 	}
       else
 	{
@@ -3313,6 +3316,7 @@
   usize_t ipos = 0;
   usize_t n = xd3_min (stream->winsize, input_size);
 
+  (void)is_encode;
   (*output_size) = 0;
 
   stream->flags |= XD3_FLUSH;
@@ -4126,6 +4130,7 @@
 		   usize_t scksum,
 		   usize_t pos)
 {
+  (void)scksum;
   /* If we are maintaining previous duplicates. */
   if (stream->small_prev)
     {
diff -u xdelta3-3.1.0.org/xdelta3-decode.h xdelta3-3.1.0/xdelta3-decode.h
--- xdelta3-3.1.0.org/xdelta3-decode.h	2016-01-05 08:47:01.000000000 +0100
+++ xdelta3-3.1.0/xdelta3-decode.h	2016-10-04 16:09:07.946549107 +0200
@@ -628,6 +628,8 @@
       return ret;
     }
 #undef DECODE_SECONDARY_SECTION
+#else
+  (void)secondary_stream;
 #endif
   return 0;
 }
@@ -795,7 +797,7 @@
   if ((stream->dec_win_ind & VCD_ADLER32) != 0 &&
       (stream->flags & XD3_ADLER32_NOVER) == 0)
     {
-      uint32_t a32 = adler32 (1L, stream->next_out, stream->avail_out);
+      uint32_t a32 = xdelta3_adler32 (1L, stream->next_out, stream->avail_out);
 
       if (a32 != stream->dec_adler32)
 	{
diff -u xdelta3-3.1.0.org/xdelta3.h xdelta3-3.1.0/xdelta3.h
--- xdelta3-3.1.0.org/xdelta3.h	2016-01-08 07:43:21.000000000 +0100
+++ xdelta3-3.1.0/xdelta3.h	2016-10-04 16:57:06.700990613 +0200
@@ -24,9 +24,15 @@
 #ifndef _XDELTA3_H_
 #define _XDELTA3_H_
 
+#ifndef _POSIX_SOURCE
 #define _POSIX_SOURCE 200112L
+#endif
+#ifndef _ISOC99_SOURCE
 #define _ISOC99_SOURCE
+#endif
+#ifndef _C99_SOURCE
 #define _C99_SOURCE
+#endif
 
 #if HAVE_CONFIG_H
 #include "config.h"
@@ -238,12 +244,12 @@
 /* Settings based on the size of size_t (the system-provided,
  * usually-but-maybe-not an unsigned type) */
 #if SIZEOF_SIZE_T == 4
-#define Z "z"
+#define XDELTA3_Z "z"
 #elif SIZEOF_SIZE_T == 8
 #ifdef _WIN32
-#define Z "I64"
+#define XDELTA3_Z "I64"
 #else /* !_WIN32 */
-#define Z "z"
+#define XDELTA3_Z "z"
 #endif /* Windows or not */
 #else
 #error Bad configure script
Only in xdelta3-3.1.0: xdelta3.h~
diff -u xdelta3-3.1.0.org/xdelta3-hash.h xdelta3-3.1.0/xdelta3-hash.h
--- xdelta3-3.1.0.org/xdelta3-hash.h	2015-09-26 07:05:53.000000000 +0200
+++ xdelta3-3.1.0/xdelta3-hash.h	2016-10-04 17:02:15.907638301 +0200
@@ -53,6 +53,7 @@
             const uint8_t *base,
             const usize_t look)
 {
+  (void)look;
   UNALIGNED_READ32(state, base);
   return (*state) * xd3_hash_multiplier32;
 }
@@ -61,6 +62,7 @@
 			const uint8_t *base,
 			usize_t look)
 {
+  (void)look;
   UNALIGNED_READ32(state, base+1);
   return (*state) * xd3_hash_multiplier32;
 }
@@ -73,7 +75,7 @@
 }
 
 #if SIZEOF_USIZE_T == 4
-inline uint32_t
+static inline uint32_t
 xd3_large32_cksum (xd3_hash_cfg *cfg, const uint8_t *base, const usize_t look)
 {
   uint32_t h = 0;
@@ -83,7 +85,7 @@
   return h;
 }
 
-inline uint32_t
+static inline uint32_t
 xd3_large32_cksum_update (xd3_hash_cfg *cfg, const uint32_t cksum,
 			  const uint8_t *base, const usize_t look)
 {
@@ -96,7 +98,8 @@
 xd3_large64_cksum (xd3_hash_cfg *cfg, const uint8_t *base, const usize_t look)
 {
   uint64_t h = 0;
-  for (usize_t i = 0; i < look; i++) {
+  usize_t i;
+  for (i = 0; i < look; i++) {
     h += base[i] * cfg->powers[i];
   }
   return h;
@@ -150,7 +153,8 @@
     }
 
   cfg->powers[look-1] = 1;
-  for (int i = look-2; i >= 0; i--)
+  int i;
+  for (i = look-2; i >= 0; i--)
     {
       cfg->powers[i] = cfg->powers[i+1] * xd3_hash_multiplier;
     }
