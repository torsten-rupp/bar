#
# $Revision: 7471 $
# $Date: 2017-06-03 11:09:42 +0200 (Sat, 03 Jun 2017) $
# $Author: torsten $
# Contents: Makefile for testing bar
# Systems: all
#
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM                = @PLATFORM@
CPU                     = @CPU@

VALGRIND_ERROR_EXITCODE = 123
TESTCODE_EXITCODE       = 124

#------------------------------------ paths ----------------------------------

BASE_DIR      = $(CURDIR)
BAR_DIR       = $(CURDIR)/..
SUB_DIR       = $(subst $(abspath $(BAR_DIR))/,,$(abspath $(BASE_DIR)))
UP_DIR        = $(subst $() $(),/,$(foreach i,$(subst /,$() $(),$(SUB_DIR)),..))

# test intermediate files directory
TEST_BASE_DIR           ?=

# test data directory
TEST_DATA_DIR           ?= test

# test flags
ifeq ($(CONTAINER),docker)
TEST_SPARSE_FILES       ?= no
TEST_SPECIAL_ATTRIBUTES ?= no
else
TEST_SPARSE_FILES       ?= yes
TEST_SPECIAL_ATTRIBUTES ?= yes
endif

#--------------------------------- tool chain --------------------------------

# shell in Makefile must be bash with pipe-fail handling
SHELL = bash -o pipefail

ifeq ($(PLATFORM),LINUX)
  EXE_PREFIX =
endif
ifeq ($(PLATFORM),WINDOWS)
  EXE_PREFIX = $(WINE)
endif

CC                         = @CC@
CC_FLAGS                   = @CC_FLAGS@ -g
CC_FLAGS_RELEASE           = @CC_FLAGS_RELEASE@
CC_FLAGS_OPTIMIZE          = @CC_FLAGS_OPTIMIZE@
CC_FLAGS_OPTIMIZE_RELEASE  = @CC_FLAGS_OPTIMIZE_RELEASE@
CC_DEFINES                 = PLATFORM_$(PLATFORM) @CC_DEFINES@ _GNU_SOURCE _LONG_LONG "tr(s)=s"
CC_DEFINES_RELEASE         = @CC_DEFINES_RELEASE@
CC_INCLUDES                = . @CC_INCLUDES@ extern $(SOURCE_DIR)

LD                         = $(if @CXX@,@CXX@,@CC@)
LD_FLAGS                   = @LD_FLAGS@
LD_FLAGS_RELEASE           = @LD_FLAGS_RELEASE@
LD_LIBRARY_PATHS           = @LIBRARY_PATHS@
LD_LIBRARIES               = @LIBRARIES@
LD_STATIC_LIBRARIES        = @STATIC_LIBRARIES@

#------------------------------- test commands--------------------------------

# test executables
TEST_BAR                ?= $(BAR_DIR)/bar@EXEEXT@
TEST_BAR_DEBUG          ?= $(BAR_DIR)/bar-debug@EXEEXT@
TEST_BAR_GCOV           ?= $(BAR_DIR)/bar-gcov@EXEEXT@
TEST_BAR_GPROF          ?= $(BAR_DIR)/bar-gprof@EXEEXT@
TEST_BAR_VALGRIND       ?= $(BAR_DIR)/bar-valgrind@EXEEXT@
TEST_BAR_INDEX          ?= $(BAR_DIR)/bar-index@EXEEXT@
TEST_BAR_INDEX_DEBUG    ?= $(BAR_DIR)/bar-index-debug@EXEEXT@
TEST_BAR_INDEX_GCOV     ?= $(BAR_DIR)/bar-index-gcov@EXEEXT@
TEST_BAR_INDEX_GPROF    ?= $(BAR_DIR)/bar-index-gprof@EXEEXT@
TEST_BAR_INDEX_VALGRIND ?= $(BAR_DIR)/bar-index-valgrind@EXEEXT@
TEST_DESTROYER          ?= $(BAR_DIR)/destroyer@EXEEXT@

#---------------------------------- commands----------------------------------

ATTR           = @ATTR@
BC             = bc
BZIP2          = bzip2
CAT            = cat
CD             = cd
CHATTR         = chattr
CHMOD          = chmod
CP             = cp
CUT            = cut
CREATEDB       = @CREATEDB@
DD             = dd
DDD            = ddd
DIFF           = diff
ECHO           = echo
ECHO_NO_LF     = echo -n
FIND           = find
GREP           = grep
GETFATTR       = @GETFATTR@
HEAD           = head
INSTALL        = @INSTALL@
KILL           = kill
KILLALL        = @KILLALL@
LN             = ln
LS             = ls
MKDIR          = mkdir
MKFIFO         = mkfifo
MKTEMP         = mktemp
MYSQL          = @MYSQL@
NETCAT         = netcat
PERL           = @PERL@
PGREP          = pgrep
PSQL           = @PSQL@
READLINK       = readlink
RMDIR          = rmdir
RMF            = rm -f
RMRF           = rm -rf
SCP            = scp
SED            = sed
SEQ            = seq
SETFATTR       = @SETFATTR@
SLEEP          = sleep
SSH            = ssh
SSHPASS        = sshpass
SORT           = sort
SQLITE3        = sqlite3
STAT           = stat
SYNC           = sync
TAIL           = tail
TAR            = tar
TEE            = tee
TIME           = @TIME@
TIMEOUT        = timeout
TMUX           = tmux
TOUCH          = touch
ULIMIT         = ulimit
WAIT           = wait
WINE           = @WINE@
WC             = wc
XARGS          = xargs

# for tests only (create test devices)
FSCK_EXT2      = fsck.ext2
FSCK_EXT3      = fsck.ext3
FSCK_EXT4      = fsck.ext4
FSCK_FAT       = fsck.fat
FSCK_VFAT      = fsck.vfat
FSCK_REISERFS  = fsck.reiserfs
FSCK_OPTIONS   =
LOSETUP        = /sbin/losetup
MKFS           = /sbin/mkfs
MOUNT          = /bin/mount
UMOUNT         = /bin/umount
SUDO           = sudo

LCOV           = lcov
GENHTML        = genhtml

VALGRIND       = valgrind
VALGRIND_FLAGS = --gen-suppressions=no --track-fds=yes --suppressions=$(BAR_DIR)/valgrind.supp --error-exitcode=$(VALGRIND_ERROR_EXITCODE)

INFO           = echo >&2
INFO_NO_LF     = echo -n >&2

#------------------------ specific variables/settings ------------------------

# special constants
COMMA := ,

# quiet (no output)
QUIET ?=

# supported compress algorithms
ifeq ($(MIN_TEST_COMPRESS_NAMES),)
  MIN_TEST_COMPRESS_NAMES = none
  MIN_TEST_COMPRESS_NAMES += zip1
  ifeq (@HAVE_BZ2@,1)
    MIN_TEST_COMPRESS_NAMES += bzip1
  endif
  ifeq (@HAVE_LZMA@,1)
    MIN_TEST_COMPRESS_NAMES += lzma1
  endif
  ifeq (@HAVE_LZO@,1)
    MIN_TEST_COMPRESS_NAMES += lzo1
  endif
  ifeq (@HAVE_LZ4@,1)
    MIN_TEST_COMPRESS_NAMES += lz4-1
  endif
  ifeq (@HAVE_ZSTD@,1)
    MIN_TEST_COMPRESS_NAMES += zstd1
  endif
endif
ifeq ($(TEST_COMPRESS_NAMES),)
  TEST_COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9
  ifeq ($(TEST_COMPRESS_NAMES_BZIP),)
    ifeq (@HAVE_BZ2@,1)
      TEST_COMPRESS_NAMES += bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9
    endif
  else
    TEST_COMPRESS_NAMES += $(TEST_COMPRESS_NAMES_BZIP)
  endif
  ifeq ($(TEST_COMPRESS_NAMES_LZMA),)
    ifeq (@HAVE_LZMA@,1)
      TEST_COMPRESS_NAMES += lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9
    endif
  else
    TEST_COMPRESS_NAMES += $(TEST_COMPRESS_NAMES_LZMA)
  endif
  ifeq ($(TEST_COMPRESS_NAMES_LZO),)
    ifeq (@HAVE_LZO@,1)
      TEST_COMPRESS_NAMES += lzo1 lzo2 lzo3 lzo4 lzo5
    endif
  else
    TEST_COMPRESS_NAMES += $(TEST_COMPRESS_NAMES_LZO)
  endif
  ifeq ($(TEST_COMPRESS_NAMES_LZ4),)
    ifeq (@HAVE_LZ4@,1)
      TEST_COMPRESS_NAMES += lz4-0 lz4-1 lz4-9
    endif
  else
    TEST_COMPRESS_NAMES += $(TEST_COMPRESS_NAMES_LZ4)
  endif
  ifeq ($(TEST_COMPRESS_NAMES_ZSTD),)
    ifeq (@HAVE_ZSTD@,1)
      TEST_COMPRESS_NAMES += zstd0 zstd9 zstd19
    endif
  else
    TEST_COMPRESS_NAMES += $(TEST_COMPRESS_NAMES_ZSTD)
  endif
endif

ifeq ($(TEST_COMPRESS_NAMES_HUGE),)
  TEST_COMPRESS_NAMES_HUGE = none zip9
  ifeq (@HAVE_LZMA@,1)
    TEST_COMPRESS_NAMES_HUGE += lzma9
  endif
  ifeq (@HAVE_LZO@,1)
    TEST_COMPRESS_NAMES_HUGE += lzo5
  endif
  ifeq (@HAVE_LZ4@,1)
    TEST_COMPRESS_NAMES_HUGE += lz4-16
  endif
endif

# image compress algorithms
IMAGE_TEST_COMPRESS_NAMES ?= none zip9

ifeq ($(IMAGE_FILESYSTEM_NAMES),)
  IMAGE_FILESYSTEM_NAMES = raw ext fat reiser
endif

# supported crypt algorithms
MIN_TEST_CRYPT_NAMES = none
ifeq (@HAVE_GCRYPT@,1)
  MIN_TEST_CRYPT_NAMES += 3DES CAST5 BLOWFISH AES256 TWOFISH256 SERPENT256 CAMELLIA256
endif
TEST_CRYPT_NAMES = none
ifeq (@HAVE_GCRYPT@,1)
  TEST_CRYPT_NAMES += 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256 SERPENT128 SERPENT192 SERPENT256 CAMELLIA128 CAMELLIA192 CAMELLIA256
endif

# additional options
OPTIONS ?= $(O)

# image operations
ifeq (@HAVE_SUDO_COMMAND_MOUNT_UMOUNT@,1)
ifeq (@HAVE_SUDO_COMMAND_LOSETUP@,1)
ifeq (@HAVE_SUDO_COMMAND_MKFS@,1)
TEST_IMAGE_OPERATIONS ?= yes
endif
endif
endif

# ext block sizes
EXT_BLOCK_SIZES ?= default 1024 2048 4096

# intermediate files directory
INTERMEDIATE_DIR := $(abspath $(addprefix $(if $(TEST_BASE_DIR),$(TEST_BASE_DIR)/),intermediate))

# test settings
TEST_CONFIG                      = $(INTERMEDIATE_DIR)/bar.cfg
TEST_CONFIG_SUB                  = $(INTERMEDIATE_DIR)/bar-sub.cfg
TEST_JOBS_DIRECTORY              = $(INTERMEDIATE_DIR)/jobs
TEST_KEY_CRYPT                   = $(INTERMEDIATE_DIR)/key-crypt
TEST_KEY_CRYPT_PUBLIC            = $(INTERMEDIATE_DIR)/key-crypt.public
TEST_KEY_CRYPT_PRIVATE           = $(INTERMEDIATE_DIR)/key-crypt.private
TEST_KEY_CRYPT_OTHER_PUBLIC      = $(INTERMEDIATE_DIR)/key-crypt-other.public
TEST_KEY_CRYPT_OTHER_PRIVATE     = $(INTERMEDIATE_DIR)/key-crypt-other.private
TEST_KEY_SIGNATURE               = $(INTERMEDIATE_DIR)/key-signature
TEST_KEY_SIGNATURE_PUBLIC        = $(INTERMEDIATE_DIR)/key-signature.public
TEST_KEY_SIGNATURE_PRIVATE       = $(INTERMEDIATE_DIR)/key-signature.private
TEST_KEY_SIGNATURE_OTHER_PUBLIC  = $(INTERMEDIATE_DIR)/key-signature-other.public
TEST_KEY_SIGNATURE_OTHER_PRIVATE = $(INTERMEDIATE_DIR)/key-signature-other.private

TEST_SERVER_PORT                 = 39909
TEST_SERVER_SSL_PORT             = 39910
TEST_SERVER_DIRECTORY            = $(INTERMEDIATE_DIR)/master
TEST_SERVER_CONFIG               = $(TEST_SERVER_DIRECTORY)/bar.cfg
TEST_SERVER_PID_FILE             = $(TEST_SERVER_DIRECTORY)/bar.pid
TEST_SERVER_JOBS_DIRECTORY       = $(TEST_SERVER_DIRECTORY)/jobs
TEST_SERVER_DATABASE             = $(TEST_SERVER_DIRECTORY)/index.db
TEST_SERVER_LOG_FILE             = $(TEST_SERVER_DIRECTORY)/bar.log


TEST_MASTER_PORT                 = 39909
TEST_MASTER_SSL_PORT             = 39910
TEST_MASTER_DIRECTORY            = $(INTERMEDIATE_DIR)/master
TEST_MASTER_CONFIG               = $(TEST_MASTER_DIRECTORY)/bar.cfg
TEST_MASTER_PID_FILE             = $(TEST_MASTER_DIRECTORY)/bar.pid
TEST_MASTER_JOBS_DIRECTORY       = $(TEST_MASTER_DIRECTORY)/jobs
TEST_MASTER_DATABASE             = $(TEST_MASTER_DIRECTORY)/index.db
TEST_MASTER_LOG_FILE             = $(TEST_MASTER_DIRECTORY)/bar.log

TEST_SLAVE_HOST                  =
TEST_SLAVE_PORT                  = 39911
TEST_SLAVE_USERNAME              ?= test
TEST_SLAVE_PASSWORD              ?= test
TEST_SLAVE_DIRECTORY             = $(INTERMEDIATE_DIR)/slave
TEST_SLAVE_CONFIG                = $(TEST_SLAVE_DIRECTORY)/bar.cfg
TEST_SLAVE_PID_FILE              = $(TEST_SLAVE_DIRECTORY)/bar.pid
TEST_SLAVE_JOBS_DIRECTORY        = $(TEST_SLAVE_DIRECTORY)/jobs
TEST_SLAVE_DATABASE              = $(TEST_SLAVE_DIRECTORY)/index.db
TEST_SLAVE_LOG_FILE              = $(TEST_SLAVE_DIRECTORY)/bar.log

TEST_CONFIGS                     = $(TEST_CONFIG) \
                                   $(TEST_CONFIG_SUB) \
                                   $(TEST_SERVER_CONFIG) \
                                   $(TEST_MASTER_CONFIG) \
                                   $(TEST_SLAVE_CONFIG)

# hosts, ports, passwords, keys for tests
TEST_HOST                        ?= localhost
TEST_LOGIN_NAME                  ?= $(LOGNAME)
TEST_PASSWORD                    ?= test
TEST_EMULATION                   =

TEST_HOST_FTP                    ?= $(TEST_HOST)
TEST_LOGIN_NAME_FTP              ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_FTP                ?= $(TEST_PASSWORD)

TEST_HOST_SSH                    ?= $(TEST_HOST)
TEST_PORT_SSH                    ?= 22
TEST_LOGIN_NAME_SSH              ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_SSH                ?= $(TEST_PASSWORD)
TEST_PUBLIC_KEY_SSH              ?= $(HOME)/.ssh/id_rsa.pub
TEST_PRIVATE_KEY_SSH             ?= $(HOME)/.ssh/id_rsa

TEST_HOST_SCP                    ?= $(TEST_HOST)
TEST_PORT_SCP                    ?= 22
TEST_LOGIN_NAME_SCP              ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_SCP                ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SCP              ?= $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SCP             ?= $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_SFTP                   ?= $(TEST_HOST)
TEST_PORT_SFTP                   ?= 22
TEST_LOGIN_NAME_SFTP             ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_SFTP               ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SFTP             ?= $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SFTP            ?= $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_WEBDAV                 ?= $(TEST_HOST)
TEST_LOGIN_NAME_WEBDAV           ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_WEBDAV             ?= $(TEST_PASSWORD)

TEST_OPTICAL_EMULATION           ?= $(TEST_EMULATION)
TEST_OPTICAL_SLEEP_TIME          ?= $(if $(TEST_OPTICAL_EMULATION),5,30)

TEST_DEVICE_EMULATION            ?= $(TEST_EMULATION)
TEST_DEVICE_SLEEP_TIME           ?= $(if $(TEST_DEVICE_EMULATION),5,30)

TEST_PASSWORD_CRYPT              =  Franz_Kafka:Die_Verwandlung
TEST_PASSWORD_CRYPT_OTHER        =  Heinrich_Böll:Ansichten_eines_Clown

TEST_JOB_NAME1                   =  __test1__
TEST_JOB_NAME2                   =  __test2__
TEST_JOB_UUID                    =  00000000-0000-0000-0000-000000000000
TEST_SCHEDULE_UUID               =  00000000-0000-0000-0000-000000000000

# MariaDB test database
TEST_MARIADB_SERVER              = localhost
TEST_MARIADB_USER                = test
TEST_MARIADB_PASSWORD            = test

# PostgreSQL test database
TEST_POSTGRESQL_SERVER           = localhost
TEST_POSTGRESQL_USER             = test
TEST_POSTGRESQL_PASSWORD         = test

# databases
TEST_INDEX_DATABASE_SQLITE       =  sqlite:$(INTERMEDIATE_DIR)/index.db
TEST_INDEX_DATABASE_MARIADB      =  mariadb:$(TEST_MARIADB_SERVER):$(TEST_MARIADB_USER):$(TEST_MARIADB_PASSWORD)
TEST_INDEX_DATABASE_POSTGRESQL   =  postgresql:$(TEST_POSTGRESQL_SERVER):$(TEST_POSTGRESQL_USER):$(TEST_POSTGRESQL_PASSWORD)
TEST_INDEX_DATABASE              =  $(TEST_INDEX_DATABASE_SQLITE)

# supported databases
TEST_INDEX_DATABASES             ?= $(TEST_INDEX_DATABASE_SQLITE) $(TEST_INDEX_DATABASE_MARIADB) $(TEST_INDEX_DATABASE_POSTGRESQL)
MIN_TEST_INDEX_DATABASES         ?= $(TEST_INDEX_DATABASE_SQLITE)

# crypt/compress used for all-test (do not select all available compress and
# crypt algorithms, because this would take a long time)
ifeq ($(COMBINED_TEST_COMPRESS_NAMES),)
  COMBINED_TEST_COMPRESS_NAMES = none
  COMBINED_TEST_COMPRESS_NAMES += zip9
  ifeq (@HAVE_BZ2@,1)
    COMBINED_TEST_COMPRESS_NAMES += bzip9
  endif
  ifeq (@HAVE_LZMA@,1)
    COMBINED_TEST_COMPRESS_NAMES += lzma9
  endif
  ifeq (@HAVE_LZO@,1)
    COMBINED_TEST_COMPRESS_NAMES += lzo5
  endif
  ifeq (@HAVE_LZ4@,1)
    COMBINED_TEST_COMPRESS_NAMES += lz4-9
  endif
  ifeq (@HAVE_ZSTD@,1)
    COMBINED_TEST_COMPRESS_NAMES += zstd19
  endif
endif
ifeq ($(COMBINED_TEST_CRYPT_NAMES),)
  COMBINED_TEST_CRYPT_NAMES = none
  ifeq (@HAVE_GCRYPT@,1)
    COMBINED_TEST_CRYPT_NAMES += AES256
  endif
endif

# for tests only
LOOP0          = /dev/loop0
LOOP1          = /dev/loop1
DEVICE_ZERO    = /dev/zero
DEVICE_RANDOM  = /dev/urandom
IMAGE0         = $(INTERMEDIATE_DIR)/dev0.dat
IMAGE0A        = $(INTERMEDIATE_DIR)/dev0a.dat
IMAGE0B        = $(INTERMEDIATE_DIR)/dev0b.dat
IMAGE1         = $(INTERMEDIATE_DIR)/dev1.dat
IMAGE1A        = $(INTERMEDIATE_DIR)/dev1a.dat
IMAGE1B        = $(INTERMEDIATE_DIR)/dev1b.dat
MOUNT_POINT0   = $(INTERMEDIATE_DIR)/dev0
MOUNT_POINT1   = $(INTERMEDIATE_DIR)/dev1
DUMP0          = $(INTERMEDIATE_DIR)/dev0.dump
DUMP1          = $(INTERMEDIATE_DIR)/dev1.dump

# memory limits for tests
MEMORY_LIMIT     = $(shell $(ECHO) 10*1024*1024|$(BC))    # 10G
MEMORY_LIMIT_LOW = $(shell $(ECHO) 70*1024|$(BC))         # 50M

# build types
BUILD_SUFFIXES = $(subst $() $(),|,-debug -gcov -gprof -valgrind)

#---------------------------------- rules ------------------------------------

# source search paths

%.o: ../%.c
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_PATCH='"$(VERSION_PATCH)"' -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c ../$*.c -o $*.o

%.o: ../common/%.c
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_PATCH='"$(VERSION_PATCH)"' -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c ../common/$*.c -o $*.o

%.o: %.c
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_PATCH='"$(VERSION_PATCH)"' -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o $*.o

#--------------------------------- objects -----------------------------------

TARGETS =

#------------------------------ dependencies ---------------------------------

# default target
.PHONY: all clean distclean depend
all: $(TARGETS)

# clean
clean:
ifeq (@HAVE_SUDO_COMMAND_CHATTR_A@,1)
	$(SUDO) -n $(CHATTR) -a data/append-only.dat 2>/dev/null || true
endif
ifeq (@HAVE_SUDO_COMMAND_CHATTR_I@,1)
	$(SUDO) -n $(CHATTR) -i data/immutable.dat 2>/dev/null || true
endif
	$(RMRF) data
	$(RMRF) $(INTERMEDIATE_DIR)
	$(RMF) parallel.o global.o strings.o errors.o parallel

distclean: \
  clean
	$(RMF) Makefile

# help
HELP_SUFFIXES = $(subst $() $(),|,$(BUILD_SUFFIXES))

.PHONY: help help_outout
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(MAKE) help_output

help_output:
	@$(ECHO) "  test[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test1[$(HELP_SUFFIXES)], test_basic[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test2[$(HELP_SUFFIXES)], test_compress[$(HELP_SUFFIXES)], test_delta_compress[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test3[$(HELP_SUFFIXES)], test_crypt[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test4[$(HELP_SUFFIXES)], test_asymmetric_crypt[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test5[$(HELP_SUFFIXES)], test_signatures[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test6[$(HELP_SUFFIXES)], test_split[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test7[$(HELP_SUFFIXES)], test_convert[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test8[$(HELP_SUFFIXES)], test_image[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test9[$(HELP_SUFFIXES)], test_storage[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_storage_(file|ftp|scp|sftp|webdav)[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test10[$(HELP_SUFFIXES)], test_huge[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test11[$(HELP_SUFFIXES)], test_optical[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test12[$(HELP_SUFFIXES)], test_device[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test13[$(HELP_SUFFIXES)], test_index[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test14[$(HELP_SUFFIXES)], test_server[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test15_master[$(HELP_SUFFIXES)], test_master[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test15_slave[$(HELP_SUFFIXES)], test_slave[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_combined[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_arguments[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_config[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_misc[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_all[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_smoke[$(HELP_SUFFIXES)]"
	@$(ECHO) "  test_data"
	@$(ECHO) "  test_hugedata"
	@$(ECHO) "  test_data_clean"
	@$(ECHO) "  test_data_dist_clean"
	@$(ECHO) ""
	@$(ECHO) "  test_file_operations"
	@$(ECHO) "  test_file_operations_dryrun"
	@$(ECHO) ""
	@$(ECHO) "  test_image_operations"
	@$(ECHO) "  test_image_operations_raw"
	@$(ECHO) "  test_image_operations_ext"
	@$(ECHO) "  test_image_operations_ext(2|3|4)"
	@$(ECHO) "  test_image_operations_fat"
	@$(ECHO) "  test_image_operations_fat(12|16|32)"
	@$(ECHO) "  test_image_operations_reiser"
	@$(ECHO) "  test_image_operations_reiser(fs3)"
	@$(ECHO) "  test_image_operations_dryrun"
	@$(ECHO) ""
	@$(ECHO) "  test_file_operations_huge"
	@$(ECHO) ""
	@$(ECHO) "  test_optical_operations"
	@$(ECHO) ""
	@$(ECHO) "  test_device_operations"
	@$(ECHO) ""
	@$(ECHO) "  test_index[$(HELP_SUFFIXES)]"
	@$(ECHO) ""
	@$(ECHO) "  test_keys"
	@$(ECHO) "  test_keys_clean"
	@$(ECHO) "  test_keys_distclean"
	@$(ECHO) ""
	@$(ECHO) "Variables:"
	@$(ECHO) ""
	@$(ECHO) "  TEST_BASE_DIR=<test base directory>"
	@$(ECHO) "  TEST_DATA_DIR=<test data directory>"
	@$(ECHO) ""
	@$(ECHO) "  TEST_COMPRESS_NAMES"
        ifeq (@HAVE_BZ2@,1)
	@$(ECHO) "    bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9"
        endif
        ifeq (@HAVE_LZMA@,1)
	@$(ECHO) "    lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9"
        endif
        ifeq (@HAVE_LZO@,1)
	@$(ECHO) "    lzo1 lzo2 lzo3 lzo4 lzo5"
        endif
        ifeq (@HAVE_LZ4@,1)
	@$(ECHO) "    lz4-0 lz4-1 lz4-2 lz4-3 lz4-4 lz4-5 lz4-6 lz4-7 lz4-8 lz4-9"
        endif
        ifeq (@HAVE_ZSTD@,1)
	@$(ECHO) "    zstd0 zstd1 zstd2 zstd3 zstd4 zstd5 zstd6 zstd7 zstd8 zstd9 zstd10 zstd11 zstd12 zstd13 zstd14 zstd15 zstd16 zstd17 zstd18 zstd19"
        endif
	@$(ECHO) "  TEST_CRYPT_NAMES"
        ifeq (@HAVE_GCRYPT@,1)
	@$(ECHO) "    3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256 SERPENT128 SERPENT192 SERPENT256 CAMELLIA128 CAMELLIA192 CAMELLIA256"
        endif
	@$(ECHO) "  TEST_INDEX_DATABASES"
	@$(ECHO) "    sqlite:$(INTERMEDIATE_DIR)/index.db"
        ifeq (@HAVE_MARIADB@,1)
	@$(ECHO) "    mariadb:$(TEST_MARIADB_SERVER):$(TEST_MARIADB_USER):$(TEST_MARIADB_PASSWORD)"
        endif
        ifeq (@HAVE_POSTGRESQL@,1)
	@$(ECHO) "    postgresql:$(TEST_POSTGRESQL_SERVER):$(TEST_POSTGRESQL_USER):$(TEST_POSTGRESQL_PASSWORD)"
        endif

# ----------------------------------------------------------------------------

parallel.o: parallel.c
global.o: ../common/global.c ../common/global.h
strings.o: ../common/strings.c ../common/strings.h
errors.o: ../errors.c ../errors.h

parallel@EXEEXT@: \
  parallel.o \
  global.o \
  strings.o \
  errors.o
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

# ----------------------------------------------------------------------------

.PHONY: $(BAR_DIR)/bar@EXEEXT@
$(BAR_DIR)/bar@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-debug@EXEEXT@
$(BAR_DIR)/bar-debug@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-gcov@EXEEXT@
$(BAR_DIR)/bar-gcov@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-gprof@EXEEXT@
$(BAR_DIR)/bar-gprof@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-valgrind@EXEEXT@
$(BAR_DIR)/bar-valgrind@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-index@EXEEXT@
$(BAR_DIR)/bar-index@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-index-debug@EXEEXT@
$(BAR_DIR)/bar-index-debug@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-index-gcov@EXEEXT@
$(BAR_DIR)/bar-index-gcov@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-index-gprof@EXEEXT@
$(BAR_DIR)/bar-index-gprof@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/bar-index-valgrind@EXEEXT@
$(BAR_DIR)/bar-index-valgrind@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

.PHONY: $(BAR_DIR)/destroyer@EXEEXT@
$(BAR_DIR)/destroyer@EXEEXT@:
	@$(MAKE) -C $(@D) $(@F) >/dev/null

# ----------------------------------------------------------------------------

# terminal columns
COLUMNS := $(shell tput cols 2>/dev/null || $(ECHO) 80)

# log redirection
LOG = $(if $(QUIET),</dev/null 1>/dev/null)

# helper function to check if debug functions are available
functionHasDebugFunctions = `$1 --debug-server 2>/dev/null && $(ECHO) 1`

# helper function to output info lines
functionInfoBegin = $(ECHO_NO_LF) >&2 "$1..."; $(ECHO) "$1" $(if $(QUIET),1>/dev/null)
functionInfoEnd = $(ECHO) >&2 "$1"
functionInfoHeader = $(ECHO) `$(ECHO) "--- $1 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" | $(HEAD) -c $(COLUMNS)` $(if $(QUIET),1>/dev/null)
functionInfoFooter = $(ECHO) `$(ECHO) "---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" | $(HEAD) -c $(COLUMNS)` $(if $(QUIET),1>/dev/null)

# helper function for test names
functionTestNames = $(foreach name,$1,$(name) $(addprefix $(name),-debug -gcov -gprof -valgrind))

# helper function to quote and join strings
functionJoin = $(subst $() $(),$3,$(foreach i,$1,$2$(i)$2))

# helper function to create SQL list
functionSQLList = $(call functionJoin,$1,',$(COMMA))

# helper function to execute binary
functionExec = \
  $(EXE_PREFIX)$1

# helper function for test files/databases
functionCleanTestFiles = \
  $(RMRF) $(TEST_FILES_CLEAN); \
  $(CHMOD) o+w $(INTERMEDIATE_DIR) 2>/dev/null || true
functionCleanTestDatabase = \
  case $1 in \
    $(TEST_INDEX_DATABASE_SQLITE)) \
      ;; \
    $(TEST_INDEX_DATABASE_MARIADB)) \
      MYSQL_PWD=$(TEST_MARIADB_PASSWORD) \
        $(MYSQL) -h $(TEST_MARIADB_SERVER) -u "$(TEST_MARIADB_USER)" --batch --silent -e "DROP DATABASE bar" 2>/dev/null || true; \
      MYSQL_PWD=$(TEST_MARIADB_PASSWORD) \
        $(MYSQL) -h $(TEST_MARIADB_SERVER) -u "$(TEST_MARIADB_USER)" --batch --silent -e "CREATE DATABASE bar"; \
      ;; \
    $(TEST_INDEX_DATABASE_POSTGRESQL)) \
      PGPASSWORD=test \
        $(PSQL) --no-password postgres $(TEST_POSTGRESQL_USER) -c "DROP DATABASE bar" 1>/dev/null 2>/dev/null || true; \
      PGPASSWORD=test \
        $(CREATEDB) --no-password --username $(TEST_POSTGRESQL_USER) -O $(TEST_POSTGRESQL_USER) bar; \
      ;; \
  esac

functionDoneTestFiles = \
  $(CHMOD) o-w $(INTERMEDIATE_DIR)

# helper function to check valid exitcode
# call functionTestCheckExitcode,<min. valid exitcode>,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $3; rc=$$?; if test $$rc -lt $1 -o $$rc -gt $2; then \
    $(ECHO) >&2 "ERROR: wrong exit code. Expected $1..$2, got $$rc"; \
    exit 1; \
  fi

# helper functions for slave tests
functionSlaveExecute = \
  $(SSHPASS) -p $(TEST_SLAVE_PASSWORD) $(SSH) $(TEST_SLAVE_USERNAME)@$(TEST_SLAVE_HOST) "$1"
functionSlaveCopy = \
  $(SSHPASS) -p $(TEST_SLAVE_PASSWORD) $(SCP) $1 $(TEST_SLAVE_USERNAME)@$(TEST_SLAVE_HOST):$2

# helper function to create a test device
# call functionTestDeviceReset
functionTestDeviceReset = \
  ( \
    $(ECHO) $(SUDO) -n $(UMOUNT) $(MOUNT_POINT0); \
    $(SUDO) -n $(UMOUNT) $(MOUNT_POINT0) 2>/dev/null; \
    $(ECHO) $(SUDO) -n $(UMOUNT) $(MOUNT_POINT1); \
    $(SUDO) -n $(UMOUNT) $(MOUNT_POINT1) 2>/dev/null; \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $(LOOP0); \
    $(SUDO) -n $(LOSETUP) -d $(LOOP0) 2>/dev/null; \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $(LOOP1); \
    $(SUDO) -n $(LOSETUP) -d $(LOOP1) 2>/dev/null; \
    true; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileZero,<file>,<count>,<size>
functionCreateFileZero = \
  ( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 bs=$3 count=$2; \
    $(DD) if=$(DEVICE_ZERO) of=$1 bs=$3 count=$2 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create huge sparse test file
# call functionCreateFileSparse,<file>,<size>
functionCreateFileSparse = \
  ( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1; \
    $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileRandom,<file>,<count>,<size>
functionCreateFileRandom = \
  ( \
    $(ECHO) $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$3 count=$2; \
    $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$3 count=$2 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionTestDeviceCreate,<loop device>,<image file>
functionTestDeviceCreate = \
  ( \
    $(SUDO) -n $(LOSETUP) -d $1 2>/dev/null || true; \
    $(ECHO) $(SUDO) -n $(LOSETUP) $1 $2; \
    $(SUDO) -n $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) -n $(CHMOD) o+rw $1; \
    $(SUDO) -n $(CHMOD) o+rw $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to delete a test device
# call functionTestDeviceDelete,<loop device>
functionTestDeviceDelete = \
  ( \
    $(SYNC); \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $1; \
    $(SUDO) -n $(LOSETUP) -d $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create file system on test device
# call functionTestDeviceInitFilesystem,<loop device>,<mkfs options>
functionTestDeviceInitFilesystem = \
  ( \
    $(ECHO) $(SUDO) -n $(MKFS) $2 $1; \
    $(SUDO) -n $(MKFS) $2 $1 1>/dev/null 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to initialize file system on a test device
# call functionInitFilesystem,<image file>,<mkfs options>[,<files>]
functionInitFilesystem = \
  ( \
    $(call functionTestDeviceCreate,$(LOOP0),$1); \
    $(call functionTestDeviceInitFilesystem,$(LOOP0),$2); \
    $(if $3,$(ECHO) $(INSTALL) -d $(MOUNT_POINT0); \
            $(INSTALL) -d $(MOUNT_POINT0); \
            $(ECHO) $(SUDO) -n $(MOUNT) $(LOOP0) $(MOUNT_POINT0); \
            $(SUDO) -n $(MOUNT) $(LOOP0) $(MOUNT_POINT0); rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
            $(ECHO) $(SUDO) -n $(CP) -r -p $3 $(MOUNT_POINT0); \
            $(SUDO) -n $(CP) -r -p $3 $(MOUNT_POINT0) 1>/dev/null 2>/dev/null; \
            $(SYNC); \
            $(ECHO) $(SUDO) -n $(UMOUNT) $(MOUNT_POINT0); \
            $(SUDO) -n $(UMOUNT) $(MOUNT_POINT0); \
    ) \
    $(call functionTestDeviceDelete,$(LOOP0)); \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to mount a test device
# call functionDeviceMount,<loop device>,<image file>,<mount point>
functionDeviceMount = \
  ( \
    $(ECHO) $(SUDO) -n $(LOSETUP) $1 $2; \
    $(SUDO) -n $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) -n $(CHMOD) o+rw $1; \
    $(SUDO) -n $(CHMOD) o+rw $1; \
    $(ECHO) $(INSTALL) -d $3; \
    $(INSTALL) -d $3; \
    $(ECHO) $(SUDO) -n $(MOUNT) $1 $3; \
    $(SUDO) -n $(MOUNT) $1 $3; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to umount a test device
# call functionDeviceUmount,<loop device>,<mount point>
functionDeviceUmount = \
  ( \
    $(ECHO) $(SUDO) -n $(UMOUNT) $2; \
    $(SUDO) -n $(UMOUNT) $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(SYNC); \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $1; \
    $(SUDO) -n $(LOSETUP) -d $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to dump content of device to file
# call functionTestDeviceDump,<loop device>,<file>
functionTestDeviceDump = \
  ( \
    $(ECHO) $(SUDO) -n $(DD) if=$1 of=- \> $2; \
    ($(SUDO) -n $(DD) if=$1 of=-) >$2 2>/dev/null; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to wait for process, kill process
# call functionWaitProcess,<pid file>,<timeout [s]>
functionWaitProcess = \
  ( \
    if test -f "$1"; then \
      pid=`$(PGREP) --pidfile $1 2>/dev/null`; \
      $(TIMEOUT) --signal=KILL $2 $(TAIL) --pid=$$pid -f /dev/null 2>/dev/null; \
      $(KILL) $$pid 2>/dev/null; \
    fi; \
    true; \
  )

# do tests
#
# Tests:
#   create, list, test, compare, extract
#   with compression defined in TEST_COMPRESS_NAMES
#   with encryption defined in TEST_CRYPT_NAMES
#   asymmetric crypt
#   signature
#   splitting
#   convert
#   everything together
#   parameters and errors
#   images
#   server
#   huge files
#   optical
#   device
#   index
#
# For special file and image tests some sudo-commands are required:
#  sudo chattr +i|-i <file>
#  sudo chattr +a|-a <file>
#  sudo losetup <loop device> <file>
#  sudo losetup -d <loop device>
#  sudo chmod o+rw <loop device>
#  sudo mkfs <options> <loop device>
#  sudo mount <loop device> test/dev
#  sudo umount <loop device>
#  sudo cp data test/dev
#  sudo dd <loop device> <file>
#  sudo diff -r <mount point> <mount point>

# test files
TEST_FILE_NAMES_SIMPLE = \
  zero128.dat \
  zero1024.dat \
  zero512k.dat \
  random128.dat \
  random1024.dat \
  random512k.dat \
  zero-random512k.dat \
  zero.dat \
  readonly.dat \
  readonly512k.dat \
  unreadable.dat \
  smallfile.dat \
  sub_dir \
  sub_dir.ext \
  sub_dir/test.dat \
  sub_dir.ext/test.dat \
  sub_ignore_dir \
  linkdata.dat \
  link.dat \
  circular_link.dat.marker \
  hardlink.dat hardlink1.dat hardlink2.dat \
  file400.dat \
  file640.dat \
  file644.dat \
  file664.dat \
  file666.dat \
  delta1/random512k.dat \
  delta2/random512k.dat \
  delta1/hardlink.dat delta1/hardlink1.dat delta1/hardlink2.dat \
  delta2/hardlink.dat delta2/hardlink1.dat delta2/hardlink2.dat \

# special files only on Linux
ifeq ($(PLATFORM),LINUX)
TEST_FILE_NAMES_SIMPLE += \
  link_not_existing_file.dat \
  fifo \
  fifo.ext

ifeq ($(TEST_SPARSE_FILES),yes)
TEST_FILE_NAMES_SIMPLE += \
  sparse.dat
endif

ifneq ($(ATTR)$(SETFATTR),)
TEST_FILE_NAMES_SIMPLE += \
  extended_attribute.dat \
  sub_dir_extended_attribute \
  hardlink_extended_attribute.dat \
  hardlinkdata_extended_attribute.dat
endif

ifeq ($(TEST_SPECIAL_ATTRIBUTES),yes)
TEST_FILE_NAMES_SIMPLE += \
  nodump.dat
ifeq (@HAVE_SUDO_COMMAND_CHATTR_I@,1)
TEST_FILE_NAMES_SIMPLE += \
  immutable.dat
endif
ifeq (@HAVE_SUDO_COMMAND_CHATTR_A@,1)
TEST_FILE_NAMES_SIMPLE += \
  append-only.dat
endif
endif

endif

# special files only on Windows
ifeq ($(PLATFORM),WINDOWS)
endif

TEST_FILES_SIMPLE = $(addprefix data/,$(TEST_FILE_NAMES_SIMPLE))

TEST_FILE_NAMES_COMPLEX = \
  name\'.dat \
  name%d%f%s%p.dat

# special files only on Linux
ifeq ($(PLATFORM),LINUX)
TEST_FILE_NAMES_COMPLEX += \
  name\".dat \
  name\\.dat \
  'name'$$'\n''.dat'
endif

# special files only on Windows
ifeq ($(PLATFORM),WINDOWS)
endif

TEST_FILES_COMPLEX = $(addprefix data/,$(TEST_FILE_NAMES_COMPLEX))

TEST_FILE_NAMES = \
  $(TEST_FILE_NAMES_SIMPLE) \
  $(TEST_FILE_NAMES_COMPLEX)

TEST_FILES = \
  $(TEST_FILES_SIMPLE) \
  $(TEST_FILES_COMPLEX)

# large test files
TEST_FILES_LARGE_NAMES = \
  zero128M.dat \
  random128M.dat \

TEST_FILES_LARGE = $(addprefix data/,$(TEST_FILES_LARGE_NAMES))

# huge test files
TEST_FILES_HUGE_NAMES1 = \
  zero5G.dat \
  random5G.dat \

TEST_FILES_HUGE_NAMES2 = \
  hardlinkdata512M.dat \
  hardlink512M1.dat \
  hardlink512M2.dat \

TEST_FILES_HUGE_NAMES = \
  $(TEST_FILES_HUGE_NAMES1) \
  $(TEST_FILES_HUGE_NAMES2) \

TEST_FILES_HUGE1 = $(addprefix data/,$(TEST_FILES_HUGE_NAMES1))
TEST_FILES_HUGE2 = $(addprefix data/,$(TEST_FILES_HUGE_NAMES2))
TEST_FILES_HUGE  = \
  $(TEST_FILES_HUGE1) \
  $(TEST_FILES_HUGE2)

# temporary test files
TEST_FILES_INTERMEDIATE = \
  $(INTERMEDIATE_DIR)/*.bar \
  $(INTERMEDIATE_DIR)/*.bar_destroyed \
  $(INTERMEDIATE_DIR)/*.bid \
  $(INTERMEDIATE_DIR)/*.log \
  $(INTERMEDIATE_DIR)/new \
  $(INTERMEDIATE_DIR)/*.image \
  $(INTERMEDIATE_DIR)/aux0 \
  $(INTERMEDIATE_DIR)/aux1 \
  $(INTERMEDIATE_DIR)/dev0 \
  $(INTERMEDIATE_DIR)/dev1 \
  $(INTERMEDIATE_DIR)/index.db \
  $(INTERMEDIATE_DIR)/import.db \
  $(INTERMEDIATE_DIR)/output.txt \
  $(INTERMEDIATE_DIR)/master/jobs/* \
  $(INTERMEDIATE_DIR)/slave/jobs/* \
  $(INTERMEDIATE_DIR)/tmp \

TEST_FILES_RESTORE = \
  $(INTERMEDIATE_DIR)/restore \

TEST_FILES_CLEAN = \
  $(TEST_FILES_INTERMEDIATE) \
  $(TEST_FILES_RESTORE)

# test keys
TEST_KEYS = $(TEST_KEY_CRYPT_PUBLIC) \
            $(TEST_KEY_CRYPT_PRIVATE) \
            $(TEST_KEY_CRYPT_OTHER_PUBLIC) \
            $(TEST_KEY_CRYPT_OTHER_PRIVATE) \
            $(TEST_KEY_SIGNATURE_PUBLIC) \
            $(TEST_KEY_SIGNATURE_PRIVATE) \
            $(TEST_KEY_SIGNATURE_OTHER_PUBLIC) \
            $(TEST_KEY_SIGNATURE_OTHER_PRIVATE)

# default test options
TEST_OPTIONS = --no-default-config
ifeq ($(CPU),i686)
  # Note: limit max. number of threads on 32bit due to memory limitations
  TEST_OPTIONS += --max-threads=4
endif
ifeq ($(CONTAINER),docker)
  TEST_OPTIONS += --no-stop-on-attribute-error
endif

# test environment variables
TEST_ENVIRONMENT = DISPLAY= SSH_ASKPASS=

# test timeout command (Note: older versions of the timeout command may not support --kill-after)
#TEST_TIMEOUT            = $(TIMEOUT) --signal=KILL 1200 $(TIMEOUT) --signal=ABRT 800 $(TIMEOUT) --signal=QUIT 600
TEST_TIMEOUT = $(TIMEOUT) --foreground --signal=KILL 1200 $(TIMEOUT) --foreground --signal=ABRT 800 $(TIMEOUT) --foreground --signal=QUIT 600

.PHONY: test test_win
.PHONY: test-debug test_win-debug
.PHONY: $(call functionTestNames,test_basic            test1 )
.PHONY: $(call functionTestNames,test_compress         test2 )
.PHONY: $(call functionTestNames,test_crypt            test3 )
.PHONY: $(call functionTestNames,test_asymmetric_crypt test4 )
.PHONY: $(call functionTestNames,test_signatures       test5 )
.PHONY: $(call functionTestNames,test_split            test6 )
.PHONY: $(call functionTestNames,test_convert          test7 )
.PHONY: $(call functionTestNames,test_image            test8 )
.PHONY: $(call functionTestNames,test_storage          test9 )
.PHONY: $(call functionTestNames,test_storage_file           )
.PHONY: $(call functionTestNames,test_storage_ftp            )
.PHONY: $(call functionTestNames,test_storage_scp            )
.PHONY: $(call functionTestNames,test_storage_sftp           )
.PHONY: $(call functionTestNames,test_storage_webdav         )
.PHONY: $(call functionTestNames,test_storage_webdavs        )
.PHONY: $(call functionTestNames,test_huge             test10)
.PHONY: $(call functionTestNames,test_optical          test11)
.PHONY: $(call functionTestNames,test_device           test12)
.PHONY: $(call functionTestNames,test_index            test13)
.PHONY: $(call functionTestNames,test_server           test14)
.PHONY: $(addsuffix _master,$(call functionTestNames,test15))
.PHONY: $(addsuffix _slave, $(call functionTestNames,test15))
.PHONY: $(call functionTestNames,test_combined)
.PHONY: $(call functionTestNames,test_arguments)
.PHONY: $(call functionTestNames,test_config)
.PHONY: $(call functionTestNames,test_misc)
.PHONY: $(call functionTestNames,test_all)
.PHONY: $(call functionTestNames,test_smoke)
.PHONY: test_keys test_keys_clean test_keys_distclean
.PHONY: test_data test_data_large test_data_huge test_data_clean test_data_distclean
test:
	@$(MAKE) --no-print-directory \
          test_basic \
          test_compress \
          test_crypt \
          test_asymmetric_crypt \
          test_signatures \
          test_split \
          test_convert \
          test_image \
          test_index \
          test_server \
          test_combined \
          test_arguments \
          test_config \
          test_misc

test-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test

test-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test

test-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test

test-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_VALGRIND)" test

test_win: \
  $(TEST_BAR)
	$(call functionExec,$(TEST_BAR)) -o -c c:\\tmp\\x.bar -# c:\\users\\torsten
	$(call functionExec,$(TEST_BAR)) -L c:\\tmp\\x.bar

test-win-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test-win

test_keys: \
  $(TEST_KEYS)

test_keys_clean:
	$(RMF) $(TEST_KEYS)

test_data: \
  $(TEST_FILES)

test_data_large: \
  $(TEST_FILES_LARGE)

test_data_huge: \
  $(TEST_FILES_HUGE)

test_data_clean:
	$(RMRF) $(TEST_FILES_CLEAN)
	$(RMF)  $(TEST_CONFIGS)
	$(RMRF) $(TEST_JOBS_DIRECTORY)
	$(RMRF) $(TEST_SERVER_JOBS_DIRECTORY)
	$(RMF)  $(TEST_SERVER_DATABASE)
	$(RMF)  $(TEST_SERVER_LOG_FILE)
	$(RMRF) $(TEST_MASTER_JOBS_DIRECTORY)
	$(RMF)  $(TEST_MASTER_DATABASE)
	$(RMF)  $(TEST_MASTER_LOG_FILE)
	$(RMRF) $(TEST_SLAVE_JOBS_DIRECTORY)
	$(RMF)  $(TEST_SLAVE_DATABASE)
	$(RMF)  $(TEST_SLAVE_LOG_FILE)

test_data_distclean: \
  test_data_clean
	if test -f data/append-only.dat; then $(SUDO) -n $(CHATTR) -a data/append-only.dat; fi
	if test -f data/immutable.dat; then $(SUDO) -n $(CHATTR) -i data/immutable.dat; fi
	$(RMRF) data

test1 test_basic: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 1: basic)
	@$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=$(TEST_INDEX_DATABASE) --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations \
          ;
	@$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=$(TEST_INDEX_DATABASE) --skip-verify-signatures $(OPTIONS)" \
          test_file_operations \
          ;
	@$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=$(TEST_INDEX_DATABASE) --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_dryrun \
          ;
	@$(call functionInfoEnd,OK)

test1-debug test_basic-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_basic

test1-gcov test_basic-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_basic

test1-gprof test_basic-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_basic

test1-valgrind test_basic-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_basic

# Note: limit computation effort with min. compress names for some operations
test2 test_compress: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 2: compress)
	for compress in $(MIN_TEST_COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	for compress in $(TEST_COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	for compress in $(MIN_TEST_COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test-####" \
            BAR_PATTERN="test-*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations_large \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test-####" \
            BAR_PATTERN="test-*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_large \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(call functionInfoEnd,OK)

test2-debug test_compress-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_compress

test2-gcov test_compress-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_compress

test2-gprof test_compress-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_compress

test2-valgrind test_compress-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_compress

test_delta_compress: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 2: delta compress)
	for compress in $(TEST_COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress+xdelta9 --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress+xdelta9 --crypt-algorithm=none $(OPTIONS)" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(call functionInfoEnd,OK)

test_delta_compress-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_delta_compress

test_delta_compress-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_delta_compress

test_delta_compress-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_delta_compress

test_delta_compress-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_delta_compress

test3 test_crypt: \
  $(TEST_BAR) \
  $(TEST_KEYS)
	@$(call functionInfoBegin,Test 3: crypt)
	for crypt in $(TEST_CRYPT_NAMES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password='$(TEST_PASSWORD_CRYPT)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(call functionInfoEnd,OK)

# multi-crypt
#	$(MAKE) \
#          BAR_FILE="test" \
#          BAR_PATTERN="test*" \
#          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=3DES+CAST5+AES256+CAMELLIA256 --crypt-password='$(TEST_PASSWORD_CRYPT)' --max-threads=1 $(OPTIONS)" \
#          test_file_operations \
#          ;

test3-debug test_crypt-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_crypt

test3-gcov test_crypt-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV)" test_crypt

test3-gprof test_crypt-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF) test_crypt

test3-valgrind test_crypt-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_crypt

test4 test_asymmetric_crypt: \
  $(TEST_BAR) \
  $(TEST_KEYS)
	@$(call functionInfoBegin,Test 4: asymmetric crypt)
	for crypt in $(TEST_CRYPT_NAMES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	# wrong public key
	for crypt in $(TEST_CRYPT_NAMES); do \
          if test ! $$crypt = "none"; then \
            $(RMF) $(INTERMEDIATE_DIR)/test.bar; \
            $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(TEST_KEY_CRYPT_OTHER_PUBLIC) --skip-verify-signatures -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(LOG); \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures $(INTERMEDIATE_DIR)/test.bar $(LOG)); \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
          fi; \
        done
	@$(call functionInfoEnd,OK)

test4-debug test_asymmetric_crypt-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_asymmetric_crypt

test4-gcov test_asymmetric_crypt-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_asymmetric_crypt

test4-gprof test_asymmetric_crypt-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_asymmetric_crypt

test4-valgrind test_asymmetric_crypt-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_asymmetric_crypt

test5 test_signatures: \
  $(TEST_BAR) \
  $(TEST_KEYS)
	@$(call functionInfoBegin,Test 5: signatures)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) --max-threads=1 $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) $(OPTIONS)" \
          test_file_operations_dryrun \
          ;
	# wrong signature key, no signature key
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS)    $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --info )) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --info )) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --info )) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS)    $(INTERMEDIATE_DIR)/test.bar --info --skip-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/test.bar --info --skip-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test.bar --info --skip-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS)    $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_PRIVATE) --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_PRIVATE) --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_PRIVATE) --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS)    $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test.bar --signature-public-key=$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS)    $(INTERMEDIATE_DIR)/test.bar --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/test.bar --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test.bar --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS)    $(INTERMEDIATE_DIR)/not_existing.bar --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/not_existing.bar --info --force-verify-signatures)) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/not_existing.bar --info --force-verify-signatures)) $(LOG)
	@$(call functionDoneTestFiles)
	@$(call functionInfoEnd,OK)

test5-debug test_signatures-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_signatures

test5-gcov test_signatures-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_signatures

test5-gprof test_signatures-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_signatures

test5-valgrind test_signatures-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_signatures

test6 test_split: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 6: split)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test-####" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test-####" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test-####" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_dryrun \
          ;
	@#
	# test fail on insufficient split digits
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
          -c $(INTERMEDIATE_DIR)/test-#.bar \
          data/zero512k.dat \
          $(TEST_OPTIONS) \
          --archive-part-size=10000 --compress-algorithm=none --crypt-algorithm=none \
          --verbose=2 \
        )
	@$(call functionInfoEnd,OK)

test6-debug test_split-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_split

test6-gcov test_split-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_split

test6-gprof test_split-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_split

test6-valgrind test_split-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_split

test7 test_convert: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 7: convert)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --max-threads=1 $(OPTIONS)" \
          test_convert_operations \
          ;
	@$(call functionInfoEnd,OK)

test7-debug test_convert-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_convert

test7-gcov test_convert-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_convert

test7-gprof test_convert-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_convert

test7-valgrind test_convert-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_convert

test8 test_image: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 8: image)
	for compress in $(IMAGE_TEST_COMPRESS_NAMES); do \
            $(MAKE) \
              BAR_STORAGE="$(INTERMEDIATE_DIR)" \
              BAR_FILE="test" \
              BAR_PATTERN="test*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
              test_image_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            $(MAKE) \
              BAR_STORAGE="$(INTERMEDIATE_DIR)" \
              BAR_FILE="test" \
              BAR_PATTERN="test*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
              test_image_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
          done; \
          $(call functionInfoEnd,OK); \
        else \
          $(call functionInfoEnd,FAIL (error: no sudo-commands)); \
        fi

test8-debug test_image-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_image

test8-gcov test_image-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_image

test8-gprof test_image-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_image

test8-valgrind test_image-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_image

test9 test_storage: \
  $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 9: storage..."
	@$(MAKE) test_storage_file \
	         test_storage_ftp \
	         test_storage_scp \
	         test_storage_sftp \
	         test_storage_webdav \
	         test_storage_webdavs

test9-debug test_storage-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage

test9-gcov test_storage-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage

test9-gprof test_storage-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage

test9-valgrind test_storage-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage

test_storage_file: \
  $(TEST_BAR)
	$(MAKE) \
          BAR_STORAGE="file://$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="file://$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="file://$(INTERMEDIATE_DIR)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_directory_operations \
          ;
# delta test?

test_storage_file-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage_file

test_storage_file-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage_file

test_storage_file-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage_file

test_storage_file-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage_file

test_storage_ftp: \
  $(TEST_BAR)
	@$(ECHO) Info : TEST_HOST_FTP=$(TEST_HOST_FTP)
	@$(call functionVerifyParameter,TEST_HOST_FTP,parameter TEST_HOST_FTP nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_LOGIN_NAME_FTP,parameter TEST_LOGIN_NAME_FTP nor TEST_LOGIN_NAME set)
	@$(call functionVerifyParameter,TEST_PASSWORD_FTP,parameter TEST_PASSWORD_FTP nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	echo $(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_ftp-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage_ftp

test_storage_ftp-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage_ftp

test_storage_ftp-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage_ftp

test_storage_ftp-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage_ftp

test_storage_scp: \
  $(TEST_BAR)
	@$(ECHO) Info : TEST_HOST_SCP=$(TEST_HOST_SCP)
	@$(call functionVerifyParameter,TEST_HOST_SCP,parameter TEST_HOST_SCP nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_LOGIN_NAME_SCP,parameter TEST_LOGIN_NAME_SCP nor TEST_LOGIN_NAME set)
	@$(call functionVerifyParameter,TEST_PASSWORD_SCP,parameter TEST_PASSWORD_SCP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PUBLIC_KEY_SCP,parameter TEST_PUBLIC_KEY_SCP nor TEST_PUBLIC_KEY_SSH set)
	@$(call functionVerifyParameter,TEST_PRIVATE_KEY_SCP,parameter TEST_PRIVATE_KEY_SCP nor TEST_PRIVATE_KEY_SSH set)
	# Note: with scp protocol directory cannot be created. Create it in advance
	install -d $(INTERMEDIATE_DIR)
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-login-name='$(TEST_LOGIN_NAME_SCP)' --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-login-name='$(TEST_LOGIN_NAME_SCP)' --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-public-key=$(TEST_PUBLIC_KEY_SCP) --ssh-private-key=$(TEST_PRIVATE_KEY_SCP) --ssh-login-name='$(TEST_LOGIN_NAME_SCP)' --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-public-key=$(TEST_PUBLIC_KEY_SCP) --ssh-private-key=$(TEST_PRIVATE_KEY_SCP) --ssh-login-name='$(TEST_LOGIN_NAME_SCP)' --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;

test_storage_scp-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage_scp

test_storage_scp-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage_scp

test_storage_scp-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage_scp

test_storage_scp-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage_scp

test_storage_sftp: \
  $(TEST_BAR)
	@$(ECHO) Info : TEST_HOST_SFTP=$(TEST_HOST_SFTP)
	@$(call functionVerifyParameter,TEST_HOST_SFTP,parameter TEST_HOST_SFTP nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_LOGIN_NAME_SFTP,parameter TEST_LOGIN_NAME_SFTP nor TEST_LOGIN_NAME set)
	@$(call functionVerifyParameter,TEST_PASSWORD_SFTP,parameter TEST_PASSWORD_SFTP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PUBLIC_KEY_SFTP,parameter TEST_PUBLIC_KEY_SFTP nor TEST_PUBLIC_KEY_SSH set)
	@$(call functionVerifyParameter,TEST_PRIVATE_KEY_SFTP,parameter TEST_PRIVATE_KEY_SFTP nor TEST_PRIVATE_KEY_SSH set)
	@# with password
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' --skip-verify-signatures --max-threads=1 --verbose=4 $(OPTIONS)" \
          test_file_operations_base \
          ;
	echo $(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ssh-port=$(TEST_PORT_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' $(OPTIONS)" \
          test_directory_operations \
          ;
	@# with keys
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	echo $(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_sftp-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage_sftp

test_storage_sftp-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage_sftp

test_storage_sftp-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage_sftp

test_storage_sftp-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage_sftp

test_storage_webdav: \
  $(TEST_BAR)
	@$(ECHO) Info : TEST_HOST_WEBDAV=$(TEST_HOST_WEBDAV)
	@$(call functionVerifyParameter,TEST_HOST_WEBDAV,parameter TEST_HOST_WEBDAV nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_LOGIN_NAME_WEBDAV,parameter TEST_LOGIN_NAME_WEBDAV nor TEST_LOGIN_NAME set)
	@$(call functionVerifyParameter,TEST_PASSWORD_WEBDAV,parameter TEST_PASSWORD_WEBDAV nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	echo $(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_webdav-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage_webdav

test_storage_webdav-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage_webdav

test_storage_webdav-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage_webdav

test_storage_webdav-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage_webdav

test_storage_webdavs: \
  $(TEST_BAR)
	@$(ECHO) Info : TEST_HOST_WEBDAV=$(TEST_HOST_WEBDAV)
	@$(call functionVerifyParameter,TEST_HOST_WEBDAV,parameter TEST_HOST_WEBDAV nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_LOGIN_NAME_WEBDAV,parameter TEST_LOGIN_NAME_WEBDAV nor TEST_LOGIN_NAME set)
	@$(call functionVerifyParameter,TEST_PASSWORD_WEBDAV,parameter TEST_PASSWORD_WEBDAV nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="webdavs://$(TEST_HOST_WEBDAV)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	echo $(MAKE) \
          BAR_STORAGE="webdavs://$(TEST_HOST_WEBDAV)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="webdavs://$(TEST_HOST_WEBDAV)/intermediate" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_webdavs-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_storage_webdavs

test_storage_webdavs-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_storage_webdavs

test_storage_webdavs-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_storage_webdavs

test_storage_webdavs-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_storage_webdav

test10 test_huge: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 10: huge files)
	for compress in $(TEST_COMPRESS_NAMES_HUGE); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_huge \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(call functionInfoEnd,OK)

test10-debug test_huge-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_huge

test10-gcov test_huge-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_huge

test10-gprof test_huge-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_huge

test10-valgrind test_huge-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_huge

test11 test_optical: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 11: optical)
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_optical_operations \
          ;
	@$(call functionInfoEnd,OK)

test11-debug test_optical-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_optical

test11-gcov test_optical-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_optical

test11-gprof test_optical-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_optical

test11-valgrind test_optical-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_optical

test12 test_device: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 12: device)
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_device_operations \
          ;
	@$(call functionInfoEnd,OK)

test12-debug test_device-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_device

test12-gcov test_device-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_device

test12-gprof test_device-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_device

test12-valgrind test_device-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_device

test13 test_index: \
  $(TEST_BAR) \
  $(TEST_BAR_INDEX)
	@$(call functionInfoBegin,Test 13: index)
	for testIndexDatabase in $(TEST_INDEX_DATABASES); do \
          $(MAKE) \
            BAR_STORAGE="$(INTERMEDIATE_DIR)" \
            BAR_FILE="test" \
            BAR_PATTERN="test*" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            TEST_INDEX_DATABASE=$$testIndexDatabase \
            TEST_INDEX_DATABASE_IMPORT=archive/index.sql \
            test_index_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(call functionInfoEnd,OK)

test13-debug test_index-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_DEBUG)" test_index

test13-gcov test_index-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_GCOV)" test_index

test13-gprof test_index-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_GPROF)" test_index

test13-valgrind test_index-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_VALGRIND)"  test_index

test14 test_server: \
  $(TEST_BAR)
	@$(call functionInfoBegin,Test 14: server)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_JOBS_DIRECTORY=$(TEST_MASTER_JOBS_DIRECTORY) \
          BAR_OPTIONS="$(TEST_OPTIONS) --server-mode=master --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_server_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_JOBS_DIRECTORY=$(TEST_SLAVE_JOBS_DIRECTORY) \
          BAR_OPTIONS="$(TEST_OPTIONS) --server-mode=slave --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_server_operations \
          ;
	@$(call functionInfoEnd,OK)

test14-debug test_server-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_server

test14-gcov test_server-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_server

test14-gprof test_server-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_server

test14-valgrind test_server-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_server

test15_master_slave test_master_slave: \
  $(TEST_BAR) \
  $(TEST_MASTER_CONFIG) \
  $(TEST_MASTER_JOBS_DIRECTORY)
	@$(call functionInfoBegin,Test 14: master)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_master_slave_operations \
          ;
	@$(call functionInfoEnd,OK)

test15_master_slave-debug test_master_slave-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_master_slave

test15_master_slave-gcov test_master_slave-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_master_slave

test15_master_slave-gprof test_master_slave-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_master_slave

test15_master_slave-valgrind test_master_slave-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_master_slave

test15_master test_master: \
  $(TEST_BAR) \
  $(TEST_MASTER_CONFIG) \
  $(TEST_MASTER_JOBS_DIRECTORY)
	@$(call functionInfoBegin,Test 14: master)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_master_slave_operations_master \
          ;
	@$(call functionInfoEnd,OK)

test15_master-debug test_master-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_master

test15_master-gcov test_master-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_master

test15_master-gprof test_master-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_master

test15_master-valgrind test_master-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_master

test15_slave test_slave: \
  $(TEST_BAR) \
  $(TEST_SLAVE_CONFIG) \
  $(TEST_SLAVE_JOBS_DIRECTORY)
	@$(call functionInfoBegin,Test 14: slave)
	$(MAKE) \
          BAR_STORAGE="$(INTERMEDIATE_DIR)" \
          BAR_FILE="test" \
          BAR_PATTERN="test*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_master_slave_operations_slave \
          ;
	@$(call functionInfoEnd,OK)

test15_slave-debug test_slave-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_slave

test15_slave-gcov test_slave-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_slave

test15_slave-gprof test_slave-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_slave

test15_slave-valgrind test_slave-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_slave

test_combined: \
  $(TEST_BAR) \
  $(TEST_KEYS)
	@$(call functionInfoBegin,Test combined)
	for compress in $(COMBINED_TEST_COMPRESS_NAMES); do \
          for crypt in $(COMBINED_TEST_CRYPT_NAMES); do \
            $(MAKE) \
              BAR_STORAGE="$(INTERMEDIATE_DIR)" \
              BAR_FILE=test-#### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) --archive-part-size=100K $(OPTIONS)" \
              test_file_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            if test @HAVE_SUDO_COMMAND_MOUNT_UMOUNT@ -a @HAVE_SUDO_COMMAND_LOSETUP@ -a @HAVE_SUDO_COMMAND_MKFS@; then \
              $(MAKE) \
                BAR_STORAGE="$(INTERMEDIATE_DIR)" \
                BAR_FILE=test-#### \
                BAR_PATTERN="test-*" \
                BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) --archive-part-size=10M $(OPTIONS)" \
                test_image_operations_raw \
                ; \
              rc=$$?; \
              if test $$rc -ne 0; then \
                exit $$rc; \
              fi; \
            fi; \
          done; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done; \
        rc=$$?; \
        if test $$rc -ne 0; then \
          exit $$rc; \
        fi
	@$(call functionInfoEnd,OK)

test_combined-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_combined

test_combined-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_combined

test_combined-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_combined

test_combined-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_combined

test_arguments: \
  $(TEST_BAR) \
  $(TEST_CONFIGS) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	@$(call functionInfoBegin,Test arguments)
	@$(ECHO) "# test config" >$(INTERMEDIATE_DIR)/test.cfg
	@#
	@#
	# short/long options
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --create $(INTERMEDIATE_DIR)/test.bar data/zero.dat $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --test $(INTERMEDIATE_DIR)/test.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compare $(INTERMEDIATE_DIR)/test.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --extract $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	@#
	# help
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -h 1>/dev/null $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --help 1>/dev/null $(LOG))
	@#
	# config
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX)  $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(INTERMEDIATE_DIR)/bar.cfg $(LOG)))
	($(CD) $(UP_DIR); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX)  $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(INTERMEDIATE_DIR)/bar.cfg --save-configuration $(INTERMEDIATE_DIR)/bar-save.cfg $(LOG)))
	@$(RMF) $(INTERMEDIATE_DIR)/bar-save.cfg
	@#
	# working directory
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(INTERMEDIATE_DIR) $(TEST_OPTIONS) -c test.bar ../data/zero.dat $(LOG))
	@#
	# destinations (ignore errors)
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) test.bar 2>/dev/null $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --ftp-password=$(TEST_PASSWORD_FTP) ftp://test:test@test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --scp-password=$(TEST_PASSWORD_SCP) scp://test:test@test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --sftp-password=$(TEST_PASSWORD_SFTP) sftp://test:test@test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --webdav-password=$(TEST_PASSWORD_WEBDAV) webdav://test:test@test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --webdav-password=$(TEST_PASSWORD_WEBDAV) webdavs://test:test@test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) cd://test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) dvd://test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) bd://test/test.bar 2>/dev/null  $(LOG))
	$(call functionTestCheckExitcode,0,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) device://test/test.bar 2>/dev/null  $(LOG))
	@#
	# normal/full/incremental/differential
	@$(call functionCleanTestFiles)
	@$(RMF) $(INTERMEDIATE_DIR)/test-full.bid
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test-full.bar --full --incremental-list-file=$(INTERMEDIATE_DIR)/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test ! -f $(INTERMEDIATE_DIR)/test-full.bid $(LOG)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test-full.bar --full --incremental-list-file=$(INTERMEDIATE_DIR)/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	$(INSTALL) -d $(INTERMEDIATE_DIR)/new; $(CP) data/random1024.dat $(INTERMEDIATE_DIR)/random1024-new.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test-differential.bar --differential --incremental-list-file=$(INTERMEDIATE_DIR)/$(BAR_FILE).bid $(TEST_FILES) $(INTERMEDIATE_DIR)/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test `$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test-differential.bar --no-header-footer 2>/dev/null|$(WC) -l` = "1" $(LOG)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test-incremental.bar --incremental --incremental-list-file=$(INTERMEDIATE_DIR)/$(BAR_FILE).bid $(TEST_FILES) $(INTERMEDIATE_DIR)/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test `$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test-incremental.bar --no-header-footer 2>/dev/null|$(WC) -l` = "1" $(LOG)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test-incremental-empty.bar --incremental --incremental-list-file=$(INTERMEDIATE_DIR)/$(BAR_FILE).bid $(TEST_FILES) $(INTERMEDIATE_DIR)/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test `$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test-incremental-empty.bar --no-header-footer 2>/dev/null|$(WC) -l` = "0" $(LOG)
	@$(RMF) $(INTERMEDIATE_DIR)/random1024-new.dat
	@$(RMF) $(INTERMEDIATE_DIR)/test-full.bid
	@#
	# patterns
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar data/zero.dat $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l "$(INTERMEDIATE_DIR)/test*.bar" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t "$(INTERMEDIATE_DIR)/test*.bar" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d "$(INTERMEDIATE_DIR)/test*.bar" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/not-existing-file-test*.bar $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l "$(INTERMEDIATE_DIR)/not-existing-file-test*.bar" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t $(INTERMEDIATE_DIR)/not-existing-file-test*.bar $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t "$(INTERMEDIATE_DIR)/not-existing-file-test*.bar" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/not-existing-file-test*.bar $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d "$(INTERMEDIATE_DIR)/not-existing-file-test*.bar" $(LOG))
	@#
	# compress
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=none $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -z none $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=zip0 $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=unknown$(COMMA)unknown $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=xdelta1$(COMMA)unknown $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=unknown $(LOG))
ifeq (@HAVE_BZIP2@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=bzip1 $(LOG))
endif
ifeq (@HAVE_LZMA@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=lzma1 $(LOG))
endif
ifeq (@HAVE_LZO@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=lzo1 $(LOG))
endif
ifeq (@HAVE_LZ4@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=lz4-0 $(LOG))
endif
ifeq (@HAVE_ZSTD@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=zstd0 $(LOG))
endif
ifeq (@HAVE_XDELTA3@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=none+zip0 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --compress-algorithm=xdelta1+zip0 $(LOG))
endif
	@#
	# crypt
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=none        $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=3DES        $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=CAST5       $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=BLOWFISH    $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=AES128      $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=AES192      $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=AES256      $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=TWOFISH128  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=TWOFISH256  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=SERPENT128  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=SERPENT192  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=SERPENT256  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=CAMELLIA128 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=CAMELLIA192 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --crypt-algorithm=CAMELLIA256 $(LOG))
	@#
	# commands
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --pre-command="touch $(INTERMEDIATE_DIR)/aux0" --post-command="touch $(INTERMEDIATE_DIR)/aux1" data/zero.dat --overwrite-archive-files $(LOG))
	test -f $(INTERMEDIATE_DIR)/aux0
	test -f $(INTERMEDIATE_DIR)/aux1
	@#
	# commands (test parsing command line options only for commands only used in server)
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --file-write-pre-command="echo" --file-write-post-command="echo" data/zero.dat --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --include-file-command="find data" --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --include-image-command="find data" --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --exclude-command="find data" --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --storage-command="find . -type f -name test.bar || true" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --mount-command="echo" --overwrite-archive-files $(LOG))
	@#
	# special file names
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar not-existing-file-%d%f%p%s.dat --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar not-existing-file-%d%f%p%s.dat --overwrite-archive-files --skip-unreadable=no $(LOG))
	@#
	# transform
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --transform=data$(COMMA)DATA $(TEST_FILES) $(LOG))
	test -z "`$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) $(INTERMEDIATE_DIR)/test.bar --no-header-footer -# 'data/*'`" $(LOG)
	test -n "`$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) $(INTERMEDIATE_DIR)/test.bar --no-header-footer -# 'DATA/*'`" $(LOG)
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --transform=extend:[$(COMMA)[ $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --transform=regex:[$(COMMA)[ $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --transform=glob:[$(COMMA)[ $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --transform=foo $(TEST_FILES) $(LOG))
	@#
	# patterns
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --pattern-type=glob $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --pattern-type=regex $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --pattern-type=extended $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --pattern-type=not_existing $(LOG))
	@#
	# strip/destination
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --directory-strip=1 $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d $(INTERMEDIATE_DIR)/test.bar --destination data $(LOG))
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --directory-strip=1 --destination $(INTERMEDIATE_DIR)/restore/data $(LOG))
	$(DIFF) -r \
          -x unreadable.dat \
          -x link_not_existing_file.dat \
          -x circular_link.dat \
          -x circular_link.dat.marker \
          -x fifo \
          -x fifo.ext \
          -x sub_ignore_dir \
          -x nodump.dat \
          $(foreach fileName,$(TEST_FILES_LARGE_NAMES),-x $(fileName)) \
          $(foreach fileName,$(TEST_FILES_HUGE_NAMES),-x $(fileName)) \
          -x gmon.out \
          $(if $(findstring yes,$(TEST_SPARSE_FILES)),,-x sparse.dat) \
          $(if $(findstring yes,$(TEST_SPECIAL_ATTRIBUTES)),,-x append-only.dat) \
          $(if $(findstring yes,$(TEST_SPECIAL_ATTRIBUTES)),,-x immutable.dat) \
          data $(INTERMEDIATE_DIR)/restore/data
	@#
	# partial restore
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(LOG))
	$(RMRF) $(INTERMEDIATE_DIR)/restore
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/zero.dat --destination $(INTERMEDIATE_DIR)/restore --verbose=0 $(LOG))
	$(RMRF) $(INTERMEDIATE_DIR)/restore
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/sub_dir -# data/sub_dir.ext --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(RMRF) $(INTERMEDIATE_DIR)/restore
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/link.dat --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(RMRF) $(INTERMEDIATE_DIR)/restore
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/hardlink1.dat -# data/hardlink2.dat --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(RMRF) $(INTERMEDIATE_DIR)/restore
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/fifo -# data/fifo.ext --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(RMRF) $(INTERMEDIATE_DIR)/restore
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore --restore-entry-mode=stop --no-stop-on-error --no-stop-on-attribute-error --no-fragments-check $(LOG))
	$(RMF) $(INTERMEDIATE_DIR)/restore/data/readonly.dat $(INTERMEDIATE_DIR)/restore/data/file400.dat $(INTERMEDIATE_DIR)/restore/data/readonly512k.dat
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore --restore-entry-mode=overwrite $(LOG))
	test -f $(INTERMEDIATE_DIR)/restore/data/zero.dat
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore --restore-entry-mode=skip-existing --no-fragments-check $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/zero128.dat -# data/sub_dir -# data/sub_dir.ext -# data/link.dat -# 'data/hardlink*.dat' -# data/fifo -# data/fifo.ext --destination $(INTERMEDIATE_DIR)/restore --restore-entry-mode=rename $(LOG))
	test -f $(INTERMEDIATE_DIR)/restore/data/zero128-0.dat
	test -d $(INTERMEDIATE_DIR)/restore/data/sub_dir-0.ext
	test -h $(INTERMEDIATE_DIR)/restore/data/link-0.dat
	test -f $(INTERMEDIATE_DIR)/restore/data/hardlink-0.dat
	test -f $(INTERMEDIATE_DIR)/restore/data/hardlink1-0.dat
	test -f $(INTERMEDIATE_DIR)/restore/data/hardlink2-0.dat
	test -p $(INTERMEDIATE_DIR)/restore/data/fifo-0
	test -p $(INTERMEDIATE_DIR)/restore/data/fifo-0.ext
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar -# data/zero128.dat -# data/sub_dir -# data/sub_dir.ext -# data/link.dat -# 'data/hardlink*.dat' -# data/fifo -# data/fifo.ext --destination $(INTERMEDIATE_DIR)/restore --restore-entry-mode=rename $(LOG))
	test -f $(INTERMEDIATE_DIR)/restore/data/zero128-1.dat
	test -d $(INTERMEDIATE_DIR)/restore/data/sub_dir-1.ext
	test -h $(INTERMEDIATE_DIR)/restore/data/link-1.dat
	test -f $(INTERMEDIATE_DIR)/restore/data/hardlink-1.dat
	test -f $(INTERMEDIATE_DIR)/restore/data/hardlink1-1.dat
	test -f $(INTERMEDIATE_DIR)/restore/data/hardlink2-1.dat
	test -p $(INTERMEDIATE_DIR)/restore/data/fifo-1
	test -p $(INTERMEDIATE_DIR)/restore/data/fifo-1.ext
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x "$(INTERMEDIATE_DIR)/test*.bar" --destination $(INTERMEDIATE_DIR)/restore --restore-entry-mode=rename $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/not_existing $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x 'invalid_pattern[' --pattern-type=regex $(LOG))
	#
	$(call functionTestCheckExitcode,0,0,$(ECHO) $(INTERMEDIATE_DIR)/test*.bar | $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l --storage-list-stdin $(LOG))
	$(ECHO) '$(INTERMEDIATE_DIR)/test*.bar' > $(INTERMEDIATE_DIR)/storage.list
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l --storage-list $(INTERMEDIATE_DIR)/storage.list $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l --storage-command '$(CAT) $(INTERMEDIATE_DIR)/storage.list' $(LOG))
	$(RMF) $(INTERMEDIATE_DIR)/storage.list
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar --info $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -g $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -H $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -L $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -g -H -L $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar --long-format $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar --human-format $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -g -H -L --numeric-uid-gid $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -g -H -L --numeric-permissions $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -g -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -H -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -L -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l $(INTERMEDIATE_DIR)/test*.bar -g -H -L -# '*rand*' -! '*512*' $(LOG))
	#
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --config=$(INTERMEDIATE_DIR)/test.cfg -l $(INTERMEDIATE_DIR)/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --verbose=2 --dry-run $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l cd://test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l cd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t cd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d cd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l dvd://test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l dvd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t dvd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d dvd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l bd://test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -l bd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t bd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d bd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --remote-bar-executable=$(TEST_BAR) $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --config=$(INTERMEDIATE_DIR)/bar.cfg $(LOG))
	@#
	# server
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-mode=master $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-mode=slave $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-port=1234 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-tls-port=1234 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-password=test $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-max-connections=1234 $(LOG))
	@#
	# owner
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore -# data/zero128.dat -# data/sub_dir -# data/sub_dir.ext -# data/link.dat -# 'data/hardlink*.dat' -# data/fifo -# data/fifo.ext --owner=test:test $(LOG))
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/sub_dir.ext` = test
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/link.dat` = test
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/hardlink.dat` = test
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/hardlink1.dat` = test
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/hardlink2.dat` = test
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/fifo` = test
	test `$(STAT) --printf=%U $(INTERMEDIATE_DIR)/restore/data/fifo.ext` = test
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --owner=:test $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --owner=test: $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --owner=test $(LOG))
	@#
	# permissions
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore -# data/zero128.dat -# data/sub_dir -# data/sub_dir.ext -# 'data/hardlink*.dat' -# data/fifo -# data/fifo.ext --permissions=rw:rw:rw $(LOG))
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/zero128.dat` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/sub_dir` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/sub_dir.ext` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/hardlink.dat` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/hardlink1.dat` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/hardlink2.dat` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/fifo` = 666
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/fifo.ext` = 666
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=r--:r--:r-- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=-w-:-w-:-w- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=--x:--x:--x $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=r--:r-- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=-w-:-w- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=--x:--x $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=r-- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=-w- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=--x $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=0644 $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --permissions=foofoo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files $(LOG))
	test ! `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/zero128.dat` = 555
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x $(INTERMEDIATE_DIR)/test.bar --destination $(INTERMEDIATE_DIR)/restore -# 'data/zero128.dat' --restore-entry-mode=overwrite --permissions=rx:rx:rx $(LOG))
	test `$(STAT) --printf=%a $(INTERMEDIATE_DIR)/restore/data/zero128.dat` = 555
	#
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --permissions=644 $(LOG))
	@#
	# bandwidth
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width=1000000 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width=1000K $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width=1M $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 23:*" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width=/tmp/foo $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M foo-1-1 Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-foo-1 Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-foo Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 foo 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon foo:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon foo:foo" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon 23:foo" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 foo" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M foo" $(LOG))
	@#
	# file/entry modes
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=stop $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=append $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=overwrite $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --overwrite-archive-files=yes $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=stop $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=overwrite $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=rename $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --overwrite-files=yes $(LOG))
	@#
	# templates
	@$(RMF) $(INTERMEDIATE_DIR)/test-????-??-??-??-??-??-#.bar
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test-%Y-%m-%d-%H-%M-%S-%#.bar $(TEST_FILES) --overwrite-archive-files $(LOG))
	test -f $(INTERMEDIATE_DIR)/test-????-??-??-??-??-??-#.bar
	@$(RMF) $(INTERMEDIATE_DIR)/test-????-??-??-??-??-??-#.bar
	@#
	# scripts
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="echo pre > $(INTERMEDIATE_DIR)/output.txt" --file-write-post-command="echo post echo pre > $(INTERMEDIATE_DIR)/output.txt" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="true;" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="false;" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-post-command="true;" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-post-command="false;" $(LOG))
	@#
	# keys
	@$(RMRF) $(INTERMEDIATE_DIR)/keys
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password=foo $(INTERMEDIATE_DIR)/keys/key-crypt $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --crypt-public-key=$(INTERMEDIATE_DIR)/keys/key-crypt.public $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --crypt-public-key="base64:`$(CAT) $(INTERMEDIATE_DIR)/keys/key-crypt.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --crypt-public-key="`$(CAT) $(INTERMEDIATE_DIR)/keys/key-crypt.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient $(INTERMEDIATE_DIR)/keys/key-signature $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --signature-public-key=$(INTERMEDIATE_DIR)/keys/key-signature.public $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --signature-public-key="base64:`$(CAT) $(INTERMEDIATE_DIR)/keys/key-signature.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --signature-public-key="`$(CAT) $(INTERMEDIATE_DIR)/keys/key-signature.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --crypt-public-key="base64:" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --verbose=2 --crypt-public-key="base64:foo" $(LOG))
	@$(RMRF) $(INTERMEDIATE_DIR)/keys
	@$(INSTALL) -d $(INTERMEDIATE_DIR)/keys
	($(CD) $(INTERMEDIATE_DIR)/keys; $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password=foo key-crypt $(LOG)))
	($(CD) $(INTERMEDIATE_DIR)/keys; $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient key-signature $(LOG)))
	#
	$(BAR_DIR)/bar-keygen --tls-directory=$(INTERMEDIATE_DIR)/keys --private-directory=$(INTERMEDIATE_DIR)/keys --certs-directory=$(INTERMEDIATE_DIR)/keys --openssl --force $(LOG)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --server-ca-file=$(INTERMEDIATE_DIR)/keys/bar-ca.pem --server-cert-file=$(INTERMEDIATE_DIR)/keys/bar-server-cert.pem --server-key-file=$(INTERMEDIATE_DIR)/keys/bar-server-key.pem $(LOG))
	@$(RMRF) $(INTERMEDIATE_DIR)/keys
	@#
	# mount/umount
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --mount-device-command='sudo mount %device %directory' --unmount-command='sudo umount %directory' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --mount='foo$(COMMA)$(COMMA)yes' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --mount='foo$(COMMA)yes' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --mount='foo' $(LOG))
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	@$(call functionTestDeviceReset)
	@$(call functionCleanTestFiles)
	$(call functionCreateFileZero,$(IMAGE0),32,1M)
	$(call functionTestDeviceCreate,$(LOOP0),$(IMAGE0))
	$(call functionTestDeviceInitFilesystem,$(LOOP0),-t ext2)
	$(INSTALL) -d $(MOUNT_POINT0)
	test -z "`$(MOUNT)|$(GREP) $(MOUNT_POINT0)`"
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --mount-device-command='sudo mount %device %directory' --unmount-command='sudo umount %directory' --mount $(MOUNT_POINT0)$(COMMA)$(LOOP0) $(TEST_FILES) $(LOG))
	test -z "`$(MOUNT)|$(GREP) $(MOUNT_POINT0)`"
	$(call functionTestDeviceDelete,$(LOOP0))
	$(RMF) $(IMAGE0)
	@$(call functionDoneTestFiles)
endif
	@#
	# log file
	@$(call functionCleanTestFiles)
	test ! -f $(INTERMEDIATE_DIR)/test.log
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --log-file=$(INTERMEDIATE_DIR)/test.log --log=all $(LOG))
	test -f $(INTERMEDIATE_DIR)/test.log
	@#
	# miscellanous options
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --overwrite-archive-files=yes $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --overwrite-archive-files=no $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --overwrite-files=yes $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --overwrite-files=no $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar --verbose=2 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files --comment 'Hello World!' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar -z zip0 $(TEST_FILES) /dev/ram0 /dev/zero --overwrite-archive-files --comment 'Hello World!' --verbose=2 $(LOG))
	@#
	# wrong options
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --not-existing-option  $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C not-existing-directory $(TEST_OPTIONS) $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --compress-algorithm=not-existing-compress  $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --crypt-algorithm=not-existing-crypt $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --crypt-algorithm=3DES+CAST5+AES128+AES192+AES256 $(LOG))
ifeq (@HAVE_XDELTA3@,1)
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --delta-source=does-not-exists --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files $(LOG))
endif
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test-not-exists.cfg -l $(INTERMEDIATE_DIR)/test*.bar $(LOG))
	@#
	# deprecated command line options
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --mount-device=foo 2>/dev/null $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --stop-on-error 2>/dev/null $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --stop-on-error=yes  2>/dev/null $(LOG))
	@#
	# deprecated configuration values
	@$(call functionCleanTestFiles)
	$(ECHO) "mount-device = foo" >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --mount-device=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	( \
		$(ECHO) "mount-device = foo"; \
	) >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	( \
		$(ECHO) "overwrite-archive-files = yes"; \
	) >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	( \
		$(ECHO) "overwrite-files = yes"; \
	) >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	( \
		$(ECHO) "stop-on-error = yes"; \
	) >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	( \
		$(ECHO) "remote-host-name = foo"; \
		$(ECHO) "remote-host-port = 1234"; \
	) >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	( \
    $(ECHO) "[schedule full]"; \
    $(ECHO) "min-keep = 1"; \
    $(ECHO) "max-keep = 2"; \
    $(ECHO) "max-age = 3"; \
    $(ECHO) "[end]"; \
	) >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,6,6,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	$(ECHO) "remote-host-name = foo" >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	$(ECHO) "remote-host-port = 1234" >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	$(ECHO) "remote-host-force-ssl = no" >$(INTERMEDIATE_DIR)/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg --config=$(INTERMEDIATE_DIR)/test-deprecated.cfg $(LOG))
	@#
	# wrong configuration value
	@$(call functionCleanTestFiles)
	$(ECHO) "does-not-exist = foo" >$(INTERMEDIATE_DIR)/test.cfg
	$(call functionTestCheckExitcode,6,6,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) --no-default-config --config=$(INTERMEDIATE_DIR)/test.cfg $(LOG))
	@#
	# test not implemented functions
	@$(call functionCleanTestFiles)
	$(call functionTestCheckExitcode,1,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) device://test/test.bar $(LOG))
	$(call functionTestCheckExitcode,1,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -t device://test/test.bar $(LOG))
	$(call functionTestCheckExitcode,1,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -d device://test/test.bar $(LOG))
	$(call functionTestCheckExitcode,1,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) -x device://test/test.bar $(LOG))
	@$(RMF) $(INTERMEDIATE_DIR)/test.cfg
	@$(RMF) $(INTERMEDIATE_DIR)/test-deprecated.cfg
	@$(call functionDoneTestFiles)
	@$(call functionInfoEnd,OK)

test_arguments-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_arguments

test_arguments-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_arguments

test_arguments-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_arguments

test_arguments-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_arguments

test_config: \
  $(TEST_BAR) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS)
	@$(call functionInfoBegin,Test configurations)
	@$(call functionCleanTestFiles)
	@#
	# format configuration file
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(TEST_CONFIG) --save-configuration=$(INTERMEDIATE_DIR)/test.cfg) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(TEST_CONFIG) --save-configuration=$(INTERMEDIATE_DIR)/test1.cfg) $(LOG)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(INTERMEDIATE_DIR)/test1.cfg --save-configuration=$(INTERMEDIATE_DIR)/test2.cfg) $(LOG)
#TODO
#	$(call functionTestCheckExitcode,0,0,set -x; test \
#	  `($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(INTERMEDIATE_DIR)/test1.cfg --debug-print-configuration-sha256)` \
#	  = \
#	  `($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(TEST_OPTIONS) --config $(INTERMEDIATE_DIR)/test2.cfg --debug-print-configuration-sha256)`\
#	 )
	@#
	# test configuration data
	( \
		$(ECHO) "crypt-public-key = $(TEST_KEY_CRYPT_PUBLIC)"; \
		$(ECHO) "crypt-private-key = $(TEST_KEY_CRYPT_PRIVATE)"; \
	) > $(TEST_CONFIG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --config $(TEST_CONFIG) $(LOG)
	( \
		$(ECHO) "signature-public-key = $(TEST_KEY_SIGNATURE_PUBLIC)"; \
		$(ECHO) "signature-private-key = $(TEST_KEY_SIGNATURE_PRIVATE)"; \
	) > $(TEST_CONFIG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --config $(TEST_CONFIG) $(LOG)
#	@$(RMF) $(INTERMEDIATE_DIR)/test.cfg
	$(call functionDoneTestFiles)
	$(call functionInfoEnd,OK)

test_config-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_config

test_config-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_config

test_config-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_config

test_config-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_config

test_misc:
	@$(call functionInfoBegin,Test miscellaneous)
	@$(call functionCleanTestFiles)
	@#
	if test ! "$(TEST_BAR)" = "$(TEST_BAR_VALGRIND)"; then \
	  $(call functionTestCheckExitcode,127,134,($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT_LOW); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) --overwrite-archive-files 2>/dev/null $(LOG))); \
  fi
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	@#
	$(INSTALL) -d $(INTERMEDIATE_DIR)
	@$(call functionTestDeviceReset)
	@
	$(call functionCreateFileZero,$(IMAGE0),32,1M)
	$(call functionTestDeviceCreate,$(LOOP0),$(IMAGE0))
	$(call functionTestDeviceInitFilesystem,$(LOOP0),-t ext2)
	$(INSTALL) -d $(MOUNT_POINT0)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
          $(TEST_OPTIONS) \
          --mount $(MOUNT_POINT0),$(LOOP0) \
          --mount-command='$(SUDO) -n $(MOUNT) %directory' \
          --mount-device-command='$(SUDO) -n $(MOUNT) %device %directory' \
          --unmount-command='$(SUDO) -n $(UMOUNT) %directory' \
          -c $(INTERMEDIATE_DIR)/test.bar $(LOOP0)/zero*.dat \
          $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG) \
        )
	$(RMDIR) $(MOUNT_POINT0)
	$(call functionTestDeviceDelete,$(LOOP0))
	$(RMF) $(IMAGE0)
	@$(call functionDoneTestFiles)
endif
	@$(call functionInfoEnd,OK)

test_misc-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" test_misc

test_misc-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" test_misc

test_misc-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" test_misc

test_misc-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" test_misc

test_all:
	@$(MAKE) --no-print-directory -s \
	  QUIET=1 \
          test_basic \
          test_compress \
          test_crypt \
          test_asymmetric_crypt \
          test_split \
          test_image \
          test_storage \
          test_huge \
          test_optical \
          test_combined \
          test_arguments \
          test_server \
          test_master_slave \
          test_config \
          test_misc

#	  QUIET=1 \

test_smoke: \
  $(TEST_BAR)
	@$(MAKE) --no-print-directory -s \
    TEST_CRYPT_NAMES="$(MIN_TEST_CRYPT_NAMES)" \
    TEST_COMPRESS_NAMES="$(MIN_TEST_COMPRESS_NAMES)" \
    TEST_INDEX_DATABASES="$(MIN_TEST_INDEX_DATABASES)" \
          $(addsuffix $(TEST_BINARY_EXTENSION), \
                      test_basic \
                      test_compress \
                      test_crypt \
                      test_asymmetric_crypt \
                      test_split \
                      test_index \
                      test_arguments \
                      test_config \
                      test_misc \
          )

test_smoke-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" TEST_BINARY_EXTENSION=-debug test_smoke

test_smoke-gcov:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV)" TEST_BINARY_EXTENSION=-gcov test_smoke

test_smoke-gprof:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF) TEST_BINARY_EXTENSION=-gprof test_smoke

test_smoke-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" TEST_BINARY_EXTENSION=-valgrind test_smoke

# ----------------------------------------------------------------------------

# valgrind checks
.PHONY: memcheck
memcheck: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=summary" \
          $(if $(CHECK),\
            memcheck$(CHECK),\
            memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8 \
           )

.PHONY: memcheck_extended
memcheck_extended: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=full" \
            $(if $(CHECK),\
              memcheck$(CHECK),\
              memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8 \
             )

.PHONY: memcheck1 memcheck2 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8
memcheck1: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) --help >/dev/null
memcheck2: \
  memcheck2a \
  memcheck2b \
  memcheck2c \
  memcheck2d \
  memcheck2e
memcheck2a: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
memcheck2b: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --compress-algorithm=bzip9 --overwrite-archive-files >/dev/null
memcheck2c: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD_CRYPT) --overwrite-archive-files >/dev/null
memcheck2d: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --compress-algorithm=none --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) --overwrite-archive-files >/dev/null
memcheck2e: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test-###.bar $(TEST_FILES) $(BAR_OPTIONS) --archive-part-size=100000 --overwrite-archive-files >/dev/null
memcheck2f: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --dry-run >/dev/null
memcheck3:  \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -l $(INTERMEDIATE_DIR)/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck4: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -t $(INTERMEDIATE_DIR)/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck5: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -d $(INTERMEDIATE_DIR)/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck6: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -x $(INTERMEDIATE_DIR)/test*.bar $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore >/dev/null
memcheck7: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c $(INTERMEDIATE_DIR)/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	-$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) dvd:///dev/dvd $(BAR_OPTIONS) >/dev/null
	-$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) dvd:///dev/dvd: $(BAR_OPTIONS) >/dev/null
memcheck8: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) \
            --server \
            --no-default-config \
            --jobs-directory=jobs \
            --server-ca-file=bar-ca.pem \
            --server-cert-file=bar-server-cert.pem \
            --server-key-file=bar-server-key.pem \
            --server-port=$(SERVER_PORT) \
            --server-tls-port=$(SERVER_SSL_PORT) \
            --debug-server &
	$(SLEEP) 30
	$(ECHO) '1 VERSION' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 JOB_LIST' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 DEVICE_LIST' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 FILE_LIST storageDirectory=/tmp'| $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 PASSWORDS_CLEAR' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 INDEX_STORAGE_LIST maxCount=10 indexState=* indexMode=* pattern=x'| $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 DEBUG_PRINT_STATISTICS' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 DEBUG_PRINT_MEMORY_INFO' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 DEBUG_DUMP_MEMORY_INFO' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) 'UNKNOWN' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 UNKNOWN' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)
	$(ECHO) '1 QUIT' | $(NETCAT) $(TEST_HOST) $(SERVER_PORT)

# ----------------------------------------------------------------------------

# testcode runs:
#   1A+2+3+4: full+list+diff+extract
#   1B+2+3+4: differentiell+list+diff+extract
#   1C+2+3+4: incremental+list+diff+extract

TESTCODE_COMMAND1A=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --full \
                     --log-post-command='true' \
                     -c $(INTERMEDIATE_DIR)/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND1B=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --differential \
                     --incremental-list-file=$(INTERMEDIATE_DIR)/test.bid \
                     --log-post-command='true' \
                     -c $(INTERMEDIATE_DIR)/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND1C=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --incremental \
                     --incremental-list-file=$(INTERMEDIATE_DIR)/test.bid \
                     --log-post-command='true' \
                     -c $(INTERMEDIATE_DIR)/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND2=$(TEST_BAR_DEBUG) \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) \
                     -l $(INTERMEDIATE_DIR)/test-*.bar
TESTCODE_COMMAND3=$(TEST_BAR_DEBUG) \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) \
                     -d $(INTERMEDIATE_DIR)/test-*.bar
TESTCODE_COMMAND4=$(TEST_BAR_DEBUG) \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --destination=$(INTERMEDIATE_DIR)/restore \
                     -x $(INTERMEDIATE_DIR)/test-*.bar

TESTCODE_COMMANDS = \
  TESTCODE_COMMAND1A \
  TESTCODE_COMMAND1B \
  TESTCODE_COMMAND1C \
  TESTCODE_COMMAND2 \
  TESTCODE_COMMAND3 \
  TESTCODE_COMMAND4 \

# call functionTestcode(command)
functionTestcode = \
 if test $$rc -ne $(TESTCODE_EXITCODE); then \
   TESTCODE_LIST=testcode.list TESTCODE_NAME=testcode.name TESTCODE_DONE=testcode.done \
     $($1) >/dev/null; \
   rc=$$?; \
   if test $$rc -ne $(TESTCODE_EXITCODE); then \
     $(ECHO) "Test code fail $1 (exitcode: $$rc):"; \
     $(ECHO) "TESTCODE=$(if $(testcode),$(testcode),`$(CAT) testcode.name 2>/dev/null`) $($1)"; \
   fi; \
 fi

# helper function to execute test code
# call functionTestcodeA
# call functionTestcodeB
# call functionTestcodeC
functionTestcodeA = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1A); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   exit $$rc; \
  )

functionTestcodeB = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1B); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   if test -z "$(TESTCODE)" -a -z "`$(CAT) testcode.name 2>/dev/null`"; then \
     $(ECHO) "ERROR: No more testcode executed!"; \
     $(ECHO) ""; \
     $(ECHO) "Available and not executed testcode:"; \
     $(MAKE) --quiet testcode_diff; \
   fi; \
   \
   exit $$rc; \
  )

functionTestcodeC = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1C); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   if test -z "$(TESTCODE)" -a -z "`$(CAT) testcode.name 2>/dev/null`"; then \
     $(ECHO) "ERROR: No more testcode executed!"; \
     $(ECHO) ""; \
     $(ECHO) "Available and not executed testcode:"; \
     $(MAKE) --quiet testcode_diff; \
   fi; \
   \
   exit $$rc; \
  )

.PHONY: testcode_clean testcode_init testcode_all testcode testcodex testcode_list testcode_diff

testcode_clean:
	$(RMF) testcode.list testcode.skip testcode.name testcode.done

testcode_init: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(ECHO_NO_LF) >testcode.list
	$(ECHO_NO_LF) >testcode.done
	for z in $(TESTCODE_SKIP); do $(ECHO) $$s; done >testcode.skip
	$(foreach z,$(TESTCODE_COMMANDS),TESTCODE_LIST=testcode.list $($z) >/dev/null;)

testcode_all: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	rc=$(TESTCODE_EXITCODE); \
        while test $$rc -eq $(TESTCODE_EXITCODE); do \
          rc=0; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeA) 1>/dev/null 2>/dev/null; \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeB); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeC); \
            rc=$$?; \
          fi; \
        done

testcode: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
          rc=0; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeA); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeB); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeC); \
            rc=$$?; \
          fi; \

testcodex: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIGS) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND1)
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND2) >/dev/null; \
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND3) >/dev/null; \
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND4) >/dev/null; \

testcode_list:
	$(ECHO_NO_LF) >testcode.list
	$(foreach z,$(TESTCODE_COMMANDS),TESTCODE_LIST=testcode.list $($z) >/dev/null;)

testcode_diff:
	$(CAT) testcode.list | $(CUT) -d " " -f 1 | $(SORT) >testcode.list.sorted
	$(CAT) testcode.done | $(CUT) -d " " -f 1 | $(SORT) >testcode.done.sorted
	$(DIFF) testcode.list.sorted testcode.done.sorted | $(GREP) '<' | $(SED) 's/<\s*/  /g'
	$(RMF) testcode.list.sorted testcode.done.sorted

# ----------------------------------------------------------------------------

show_debug_test_code test_code:
	@$(FIND) . -maxdepth 1 -type f -a \( -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -print | \
          ( \
            while read fileName; do \
              cat $$fileName | $(PERL) -n -e 'if (/DEBUG_TEST_CODE\("(.*)"\)/) { print "'$$fileName': $$1=1\n"; };'; \
            done; \
          )

run_debug_test_code:
	$(call functionTestCheckExitcode,125,125,initAll1=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll2=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll3=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll4=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll5=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll6=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll7=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll8=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll9=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll10=1 $(call functionExec,$(TEST_BAR)))
	$(call functionTestCheckExitcode,125,125,initAll11=1 $(call functionExec,$(TEST_BAR)))

$(TEST_KEY_CRYPT_PUBLIC) $(TEST_KEY_CRYPT_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIGS)
	$(RMF) $(TEST_KEY_CRYPT_PUBLIC) $(TEST_KEY_CRYPT_PRIVATE)
	$(TEST_BAR) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password="$(TEST_PASSWORD_CRYPT)" $(INTERMEDIATE_DIR)/key-crypt $(LOG)

$(TEST_KEY_CRYPT_OTHER_PUBLIC) $(TEST_KEY_CRYPT_OTHER_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIGS)
	$(RMF) $(TEST_KEY_CRYPT_OTHER_PUBLIC) $(TEST_KEY_CRYPT_OTHER_PRIVATE)
	$(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password="$(TEST_PASSWORD_CRYPT_OTHER)" $(INTERMEDIATE_DIR)/key-crypt-other $(LOG)

$(TEST_KEY_SIGNATURE_PUBLIC) $(TEST_KEY_SIGNATURE_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIGS)
	$(RMF) $(TEST_KEY_SIGNATURE_PUBLIC) $(TEST_KEY_SIGNATURE_PRIVATE)
	$(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient $(INTERMEDIATE_DIR)/key-signature $(LOG)

$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) $(TEST_KEY_SIGNATURE_OTHER_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIGS)
	$(RMF) $(TEST_KEY_SIGNATURE_OTHER_PUBLIC) $(TEST_KEY_SIGNATURE_OTHER_PRIVATE)
	$(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient $(INTERMEDIATE_DIR)/key-signature-other $(LOG)

data/zero128.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=128 2>/dev/null
data/zero1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=1024 2>/dev/null
data/zero512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1k count=512 2>/dev/null
data/random128.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
data/random1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=1024 2>/dev/null
data/random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null
data/zero-random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>$@  2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
data/zero.dat:
	$(INSTALL) -d $(@D)
	$(RMF) $0; touch $@
data/sparse.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k seek=0   count=64 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k seek=128 count=64 2>/dev/null
data/readonly.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@; $(CHMOD) 440 $@
data/readonly512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null; $(CHMOD) 440 $@
data/unreadable.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@; $(CHMOD) 000 $@
data/smallfile.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
data/sub_dir:
	$(INSTALL) -d $(@D)
data/sub_dir.ext:
	$(INSTALL) -d $(@D)
data/sub_dir/test.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=128 2>/dev/null
data/sub_dir.ext/test.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=128 2>/dev/null
data/sub_ignore_dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World >$@/test.dat
	touch $@/.nobackup
data/linkdata.dat data/link.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/linkdata.dat bs=1k count=512 2>/dev/null
	($(CD) $(@D); $(RMF) link.dat; $(LN) -s linkdata.dat link.dat)
data/link_not_existing_file.dat:
	@# Note: work-around for dead link: check if exists and only output info and create it if not
	@if test ! -L $@; then \
          $(ECHO) "$(INSTALL) -d $(@D)" $(LOG); \
          $(INSTALL) -d $(@D); \
          $(ECHO) "($(CD) data; $(RMF) link_not_existing_file.dat; $(LN) -s not-existing-file link_not_existing_file.dat)" $(LOG); \
          ($(CD) data; $(RMF) link_not_existing_file.dat; $(LN) -s not-existing-file link_not_existing_file.dat); \
        fi
data/circular_link.dat.marker:
	$(INSTALL) -d $(@D)
	($(CD) data; $(LN) -s circular_link.dat circular_link.dat)
	touch $@
data/hardlink.dat data/hardlink1.dat data/hardlink2.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlink.dat bs=1k count=512 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink1.dat hardlink2.dat; $(LN) hardlink.dat hardlink1.dat; $(LN) hardlink.dat hardlink2.dat)
data/file400.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 400 $@
data/file640.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 640 $@
data/file644.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 644 $@
data/file664.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 664 $@
data/file666.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 666 $@
ifneq ($(ATTR),)
data/extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $@ 1>/dev/null
data/sub_dir_extended_attribute:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $@ 1>/dev/null
data/hardlinkdata_extended_attribute.dat data/hardlink_extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata_extended_attribute.dat bs=1 count=1024 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink_extended_attribute.dat; $(LN) hardlinkdata_extended_attribute.dat hardlink_extended_attribute.dat); $(ATTR) -s foo1 -V test data/hardlink_extended_attribute.dat 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" data/hardlink_extended_attribute.dat 1>/dev/null
else
ifneq ($(SETFATTR),)
data/extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(SETFATTR) -n foo2 -v "Hello World" $@ 1>/dev/null
data/sub_dir_extended_attribute:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(SETFATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -n foo2 -v "Hello World" $@ 1>/dev/null
data/hardlinkdata_extended_attribute.dat data/hardlink_extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata_extended_attribute.dat bs=1 count=1024 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink_extended_attribute.dat; $(LN) hardlinkdata_extended_attribute.dat hardlink_extended_attribute.dat); $(SETFATTR) -s foo1 -V test data/hardlink_extended_attribute.dat 1>/dev/null; $(ATTR) -n foo2 -v "Hello World" data/hardlink_extended_attribute.dat 1>/dev/null
endif
endif
data/fifo:
	$(INSTALL) -d $(@D)
	($(CD) data; $(MKFIFO) fifo)
data/fifo.ext:
	$(INSTALL) -d $(@D)
	($(CD) data; $(MKFIFO) fifo.ext)
data/name\'.dat:
	@# Note: work-around for special name, do not use '$@'
	@if test ! -f data/name\'.dat; then \
          $(ECHO) $(INSTALL) -d $(@D) $(LOG); $(INSTALL) -d $(@D); \
          $(ECHO) $(ECHO) Hello World \>data/name\\\'.dat $(LOG); $(ECHO) Hello World >data/name\'.dat; \
        fi
data/name\".dat:
	@# Note: work-around for special name, do not use '$@'
	@if test ! -f data/name\".dat; then \
          $(ECHO) $(INSTALL) -d $(@D) $(LOG); $(INSTALL) -d $(@D); \
          $(ECHO) $(ECHO) Hello World \>data/name\\\".dat $(LOG); $(ECHO) Hello World >data/name\".dat; \
        fi
data/name\\.dat:
	@# Note: work-around for special name, do not use '$@'
	@if test ! -f data/name\\.dat; then \
          $(ECHO) $(INSTALL) -d $(@D) $(LOG); $(INSTALL) -d $(@D); \
          $(ECHO) $(ECHO) Hello World \>data/name\\\\.dat $(LOG); $(ECHO) Hello World >data/name\\.dat; \
        fi
data/'name'$$'\n''.dat':
	@# Note: work-around for special name, do not use '$@'
	@if test ! -f 'data/name'$$'\n''.dat'; then \
          $(ECHO) $(INSTALL) -d $(@D) $(LOG); $(INSTALL) -d $(@D); \
          $(ECHO) $(ECHO) Hello World \>data/name\\\n.dat $(LOG); $(ECHO) Hello World >'data/name'$$'\n''.dat'; \
        fi
data/name%d%f%s%p.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >'$@'
data/name%d%f%s%p.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/delta1/random512k.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1k count=512 2>/dev/null; \
        ) >$@
data/delta2/random512k.dat: data/delta1/random512k.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=data/delta1/random512k.dat skip=0 bs=1k count=255 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1k count=1 2>/dev/null; \
          $(DD) if=data/delta1/random512k.dat skip=256 bs=1k count=256 2>/dev/null; \
        ) >$@
data/delta1/hardlink.dat data/delta1/hardlink1.dat data/delta1/hardlink2.dat:
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=$(DEVICE_RANDOM) bs=1k count=512 2>/dev/null; \
        ) >data/delta1/hardlink.dat
	($(CD) $(@D); $(RMF) hardlink1.dat hardlink2.dat; $(LN) hardlink.dat hardlink1.dat; $(LN) hardlink.dat hardlink2.dat)
data/delta2/hardlink.dat data/delta2/hardlink1.dat data/delta2/hardlink2.dat: data/delta1/hardlink.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=data/delta1/hardlink.dat skip=0 bs=1k count=255 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1k count=1 2>/dev/null; \
          $(DD) if=data/delta1/hardlink.dat skip=256 bs=1k count=256 2>/dev/null; \
        ) >data/delta2/hardlink.dat
	($(CD) $(@D); $(RMF) hardlink1.dat hardlink2.dat; $(LN) hardlink.dat hardlink1.dat; $(LN) hardlink.dat hardlink2.dat)
data/zero128M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=128 2>/dev/null
data/random128M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=128 2>/dev/null

# special attributes
data/nodump.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 440 $@; $(CHATTR) +d $@
data/immutable.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) An immutable file >$@; $(SUDO) -n $(CHATTR) +i $@ 1>/dev/null
data/append-only.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Append-only file >$@; $(SUDO) -n $(CHATTR) +a $@ 1>/dev/null

# huge files
data/zero5G.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=5120 2>/dev/null
data/random5G.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=5120 2>/dev/null
data/hardlinkdata512M.dat data/hardlink512M1.dat data/hardlink512M2.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata512M.dat bs=1M count=512 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink512M1.dat hardlink512M2.dat; $(LN) hardlinkdata512M.dat hardlink512M1.dat; $(LN) hardlinkdata512M.dat hardlink512M2.dat)

$(TEST_CONFIG): \
  $(TEST_CONFIG_SUB)
	$(INSTALL) -d $(@D)
	( \
          $(ECHO) '# bar test configuration'; \
          $(ECHO) "config = $(TEST_CONFIG_SUB)"; \
          $(ECHO) ""; \
          $(ECHO) "include-file = x:foo"; \
          $(ECHO) "include-file = r:foo"; \
          $(ECHO) "include-file = g:foo"; \
          $(ECHO) "include-file = foo"; \
          $(ECHO) ""; \
          $(ECHO) "include-image = x:foo"; \
          $(ECHO) "include-image = r:foo"; \
          $(ECHO) "include-image = g:foo"; \
          $(ECHO) "include-image = foo"; \
          $(ECHO) ""; \
          $(ECHO) "exclude = x:foo"; \
          $(ECHO) "exclude = r:foo"; \
          $(ECHO) "exclude = g:foo"; \
          $(ECHO) "exclude = foo"; \
          $(ECHO) "compress-exclude = x:foo"; \
          $(ECHO) "compress-exclude = r:foo"; \
          $(ECHO) "compress-exclude = g:foo"; \
          $(ECHO) "compress-exclude = foo"; \
          $(ECHO) ""; \
          $(ECHO) "delta-source = x:foo"; \
          $(ECHO) "delta-source = r:foo"; \
          $(ECHO) "delta-source = g:foo"; \
          $(ECHO) "delta-source = foo"; \
          $(ECHO) ""; \
          $(ECHO) "compress-algorithm = none+none"; \
          $(ECHO) "compress-algorithm = none,none"; \
          $(ECHO) "compress-algorithm = none"; \
          $(ECHO) "crypt-algorithm = none"; \
          $(ECHO) ""; \
          $(ECHO) "server-ca-file = foo"; \
          $(ECHO) "server-ca-file = base64:foo"; \
          $(ECHO) "server-cert-file = foo"; \
          $(ECHO) "server-cert-file = base64:foo"; \
          $(ECHO) "server-key-file = foo"; \
          $(ECHO) "server-key-file = base64:foo"; \
          $(ECHO) "server-password = foo"; \
          $(ECHO) ""; \
          $(ECHO) "owner = foo:foo"; \
          $(ECHO) "owner = foo:"; \
          $(ECHO) "owner = :foo"; \
          $(ECHO) "owner = foo"; \
          $(ECHO) ""; \
          $(ECHO) "permissions = 0777"; \
          $(ECHO) "permissions = rwx:rwx:rwx"; \
          $(ECHO) "permissions = rwx:rwx"; \
          $(ECHO) "permissions = rwx"; \
          $(ECHO) ""; \
          $(ECHO) "[maintenance]"; \
          $(ECHO) "  date = *-*-1"; \
          $(ECHO) "  weekdays = Mon"; \
          $(ECHO) "  begin = 1:00"; \
          $(ECHO) "  end = 2:00"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[ftp-server foo]"; \
          $(ECHO) "  ftp-password = foo"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[ssh-server foo]"; \
          $(ECHO) "  ssh-password = foo"; \
          $(ECHO) "  ssh-public-key = foo"; \
          $(ECHO) "  ssh-private-key = foo"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[webdav-server foo]"; \
          $(ECHO) "  webdav-password = foo"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[device foo]"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[master]"; \
          $(ECHO) "  uuid-hash = sha2-256:1234:foo"; \
          $(ECHO) "  uuid-hash = sha2-256:foo"; \
          $(ECHO) "  uuid-hash = 00000000-0000-0000-0000-000000000000"; \
          $(ECHO) "  public-key = foo"; \
          $(ECHO) "[end]"; \
        ) >$@
	$(CHMOD) 600 $@

$(TEST_CONFIG_SUB):
	$(INSTALL) -d $(@D)
	( \
          $(ECHO) '# bar test configuration'; \
        ) >$@
	$(CHMOD) 600 $@

$(TEST_SERVER_CONFIG):
	$(INSTALL) -d $(@D)
	( \
          $(ECHO) '# bar test configuration'; \
        ) >$@
	$(CHMOD) 600 $@

$(TEST_SLAVE_CONFIG):
	$(INSTALL) -d $(@D)
	( \
          $(ECHO) '# bar test configuration'; \
        ) >$@
	$(CHMOD) 600 $@

$(TEST_JOBS_DIRECTORY):
	$(INSTALL) -d $@
	( \
          $(ECHO) "[schedule]"; \
          $(ECHO) "  date = *-*-1"; \
          $(ECHO) "  weekdays = Mon"; \
          $(ECHO) "  time = 1:00"; \
          $(ECHO) "  begin = 1:00"; \
          $(ECHO) "  end = 2:00"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[persistence]"; \
          $(ECHO) "  min-keep = *"; \
          $(ECHO) "  min-keep = 1"; \
          $(ECHO) "  max-keep = *"; \
          $(ECHO) "  max-keep = 1"; \
          $(ECHO) "  max-age = *"; \
          $(ECHO) "  max-age = 1"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[mount]"; \
          $(ECHO) "  mount = foo,foo,yes"; \
          $(ECHO) "  mount = foo,,yes"; \
          $(ECHO) "  mount = foo,foo"; \
          $(ECHO) "  mount = foo"; \
          $(ECHO) "[end]"; \
        ) >$@/$(TEST_JOB_NAME1)

$(TEST_SERVER_JOBS_DIRECTORY):
	$(INSTALL) -d $@
	( \
          $(ECHO) "[schedule]"; \
          $(ECHO) "  date = *-*-1"; \
          $(ECHO) "  weekdays = Mon"; \
          $(ECHO) "  time = 1:00"; \
          $(ECHO) "  begin = 1:00"; \
          $(ECHO) "  end = 2:00"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[persistence]"; \
          $(ECHO) "  min-keep = *"; \
          $(ECHO) "  min-keep = 1"; \
          $(ECHO) "  max-keep = *"; \
          $(ECHO) "  max-keep = 1"; \
          $(ECHO) "  max-age = *"; \
          $(ECHO) "  max-age = 1"; \
          $(ECHO) "[end]"; \
        ) >$@/$(TEST_JOB_NAME1)

$(TEST_SLAVE_JOBS_DIRECTORY):
	$(INSTALL) -d $@
	( \
          $(ECHO) "[schedule]"; \
          $(ECHO) "  date = *-*-1"; \
          $(ECHO) "  weekdays = Mon"; \
          $(ECHO) "  time = 1:00"; \
          $(ECHO) "  begin = 1:00"; \
          $(ECHO) "  end = 2:00"; \
          $(ECHO) "[end]"; \
          $(ECHO) ""; \
          $(ECHO) "[persistence]"; \
          $(ECHO) "  min-keep = *"; \
          $(ECHO) "  min-keep = 1"; \
          $(ECHO) "  max-keep = *"; \
          $(ECHO) "  max-keep = 1"; \
          $(ECHO) "  max-age = *"; \
          $(ECHO) "  max-age = 1"; \
          $(ECHO) "[end]"; \
        ) >$@/$(TEST_JOB_NAME1)

$(TEST_SERVER_DATABASE): \
  $(TEST_BAR_INDEX)
	@
	$(INSTALL) -d $(@D)
	$(TEST_BAR_INDEX) --force --create sqlite:$@ "INSERT INTO entities (id,jobUUID) VALUES (1,'test')"

data/zero128.dat:

# helper function to check if parameter exists
# call functionVerifyParameter,<name>[,message]
functionVerifyParameter = \
  if test -z "$($1)"; then \
    if test -n "$2"; then \
      $(ECHO) >&2 "ERROR: $2"; \
    else \
      $(ECHO) >&2 "ERROR: parameter '$1' not set"; \
    fi; \
    exit 1; \
  fi

# helper function for index database SQL command
# call functionIndex,<sql command>
functionIndex = \
  $(CD) $(UP_DIR); $(TEST_BAR_INDEX) -C $(SUB_DIR) $(TEST_INDEX_DATABASE) -q $1

# helper function for query of index database
# call functionIndexQuery,<sql command>
functionIndexQuery = \
  $(call functionIndex,$1)

# helper function to check if quert index database return empty result
# call functionIndexQueryEmpty,<sql command>
functionIndexQueryEmpty = \
  test -z "`$(call functionIndexQuery,$1)`"

.PHONY: test_file_operations
test_file_operations: \
  test_file_operations_base \
  test_file_operations_delta \
  test_file_operations_incremental \
  test_file_operations_differential \
  test_file_operations_destroyed

.PHONY: test_file_operations_base test_file_operations_delta test_file_operations_dryrun test_file_operations_incremental test_file_operations_differential test_file_operations_destroyed
test_file_operations_base: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@#
	# normal tests
	@$(call functionInfoHeader,test file operations base)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	@$(call functionCleanTestFiles)
	@# Note: create twice to test delete+create=overwrite
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
#TODO: support archive-part-size
#	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --compress-algorithm=zip9 $(LOG))
	@#
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)    $(BAR_STORAGE)/$(BAR_PATTERN).bar   $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)    '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -l '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) -# 'data/zero*.dat' $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -l '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) -! 'data/zero*.dat' $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -l '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --human-format --verbose=0 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/$(BAR_PATTERN).bar   $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --human-format --verbose=0 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d $(BAR_STORAGE)/$(BAR_PATTERN).bar   $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --human-format --verbose=0 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(DIFF) -r \
          -x unreadable.dat \
          -x link_not_existing_file.dat \
          -x circular_link.dat \
          -x circular_link.dat.marker \
          -x fifo \
          -x fifo.ext \
          -x sub_ignore_dir \
          -x nodump.dat \
          $(foreach fileName,$(TEST_FILES_LARGE_NAMES),-x $(fileName)) \
          $(foreach fileName,$(TEST_FILES_HUGE_NAMES),-x $(fileName)) \
          -x gmon.out \
          $(if $(findstring yes,$(TEST_SPARSE_FILES)),,-x sparse.dat) \
          $(if $(findstring yes,$(TEST_SPECIAL_ATTRIBUTES)),,-x append-only.dat) \
          $(if $(findstring yes,$(TEST_SPECIAL_ATTRIBUTES)),,-x immutable.dat) \
          data $(INTERMEDIATE_DIR)/restore/data
ifeq ($(PLATFORM),LINUX)
ifeq ($(TEST_SPARSE_FILES),yes)
	test `$(FIND) $(INTERMEDIATE_DIR)/restore/data/sparse.dat -printf %k` = 192
endif
	$(READLINK) $(INTERMEDIATE_DIR)/restore/data/link.dat 2>/dev/null $(LOG)
	test `$(STAT) --format "%a" $(INTERMEDIATE_DIR)/restore/data/file400.dat 2>/dev/null` = "400" $(LOG)
	test `$(STAT) --format "%a" $(INTERMEDIATE_DIR)/restore/data/file640.dat 2>/dev/null` = "640" $(LOG)
	test `$(STAT) --format "%a" $(INTERMEDIATE_DIR)/restore/data/file644.dat 2>/dev/null` = "644" $(LOG)
	test `$(STAT) --format "%a" $(INTERMEDIATE_DIR)/restore/data/file664.dat 2>/dev/null` = "664" $(LOG)
	test `$(STAT) --format "%a" $(INTERMEDIATE_DIR)/restore/data/file666.dat 2>/dev/null` = "666" $(LOG)
	test `$(STAT) --format "%h" $(INTERMEDIATE_DIR)/restore/data/hardlink.dat 2>/dev/null` -eq 3 $(LOG)
	test `$(STAT) --format "%h" $(INTERMEDIATE_DIR)/restore/data/hardlink1.dat 2>/dev/null` -eq 3 $(LOG)
	test `$(STAT) --format "%h" $(INTERMEDIATE_DIR)/restore/data/hardlink2.dat 2>/dev/null` -eq 3 $(LOG)
endif
ifeq ($(TEST_SPARSE_FILES),yes)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) -\# data/sparse.dat --destination $(INTERMEDIATE_DIR)/restore --overwrite-files --sparse $(LOG))
	test `$(FIND) $(INTERMEDIATE_DIR)/restore/data/sparse.dat -printf %k` = 128
endif
ifeq ($(PLATFORM),WINDOWS)
endif
	$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

test_file_operations_delta: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@$(call functionInfoHeader,test file operations delta)
ifeq (@HAVE_XDELTA3@,1)
	@#
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	# create delta base
	@$(call functionCleanTestFiles)
	($(CD) data/delta1; $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -c $(BAR_STORAGE)/$(BAR_FILE)-A.bar random512k.dat hardlink.dat hardlink1.dat hardlink2.dat $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	@#
	# delta tests
	$(RMF) $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(addprefix $(INTERMEDIATE_DIR)/restore/,random512k.dat hardlink.dat hardlink1.dat hardlink2.dat)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -c $(BAR_STORAGE)/$(BAR_FILE)-B.bar random512k.dat hardlink.dat hardlink1.dat hardlink2.dat --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --force-delta-compression --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)             -t '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -d '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -x '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(DIFF) data/delta2/random512k.dat $(INTERMEDIATE_DIR)/restore/random512k.dat
	$(DIFF) data/delta2/hardlink.dat   $(INTERMEDIATE_DIR)/restore/hardlink.dat
	$(DIFF) data/delta2/hardlink1.dat  $(INTERMEDIATE_DIR)/restore/hardlink1.dat
	$(DIFF) data/delta2/hardlink2.dat  $(INTERMEDIATE_DIR)/restore/hardlink2.dat
	@#
ifeq (@HAVE_BZ2@,1)
	# delta tests with bzip2
	$(RMF) $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(addprefix $(INTERMEDIATE_DIR)/restore/,random512k.dat hardlink.dat hardlink1.dat hardlink2.dat)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -c $(BAR_STORAGE)/$(BAR_FILE)-B.bar --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' random512k.dat hardlink.dat hardlink1.dat hardlink2.dat $(BAR_OPTIONS) --force-delta-compression --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)             -t '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -d '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -x '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(DIFF) data/delta2/random512k.dat $(INTERMEDIATE_DIR)/restore/random512k.dat
	$(DIFF) data/delta2/hardlink.dat   $(INTERMEDIATE_DIR)/restore/hardlink.dat
	$(DIFF) data/delta2/hardlink1.dat  $(INTERMEDIATE_DIR)/restore/hardlink1.dat
	$(DIFF) data/delta2/hardlink2.dat  $(INTERMEDIATE_DIR)/restore/hardlink2.dat
endif
	@#
ifeq (@HAVE_LZMA@,1)
	# delta tests with lzma
	$(RMF) $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(addprefix $(INTERMEDIATE_DIR)/restore/,random512k.dat hardlink.dat hardlink1.dat hardlink2.dat)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -c $(BAR_STORAGE)/$(BAR_FILE)-B.bar --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' random512k.dat hardlink.dat hardlink1.dat hardlink2.dat $(BAR_OPTIONS) --force-delta-compression --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)             -t '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -d '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)/data/delta2 -x '$(BAR_STORAGE)/$(BAR_PATTERN)-B.bar' --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	$(DIFF) data/delta2/random512k.dat $(INTERMEDIATE_DIR)/restore/random512k.dat
	$(DIFF) data/delta2/hardlink.dat $(INTERMEDIATE_DIR)/restore/hardlink.dat
	$(DIFF) data/delta2/hardlink1.dat $(INTERMEDIATE_DIR)/restore/hardlink1.dat
	$(DIFF) data/delta2/hardlink2.dat $(INTERMEDIATE_DIR)/restore/hardlink2.dat
endif
endif
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_file_operations_large
test_file_operations_large: \
  $(TEST_BAR) \
  $(TEST_FILES_LARGE)
	# normal tests
	@$(call functionInfoHeader,test large file opertations)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	@$(call functionCleanTestFiles)
	$(INSTALL) -d $(BAR_STORAGE)/tmp
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES_LARGE) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --tmp-directory=$(BAR_STORAGE)/tmp --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -l '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	for z in $(TEST_FILES_LARGE); do \
          $(DIFF) data/$$y $(INTERMEDIATE_DIR)/restore/$$z; \
          rc=$$?; \
          if test $$rc -eq 0; then \
            exit $$rc; \
          fi; \
        done
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_file_operations_huge
test_file_operations_huge: \
  $(TEST_BAR) \
  $(TEST_FILES_HUGE)
	# normal tests
	@$(call functionInfoHeader,test huge file opertations)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	@$(call functionCleanTestFiles)
	$(INSTALL) -d $(BAR_STORAGE)/tmp
	for z in $(TEST_FILES_HUGE1); do \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $$z $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --tmp-directory=$(BAR_STORAGE)/tmp --verbose=1 $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -l '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG)); \
        done; \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES_HUGE2) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --tmp-directory=$(BAR_STORAGE)/tmp --verbose=1 $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -l '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG)); \
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

test_file_operations_dryrun: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@#
	# normal tests
	@$(call functionInfoHeader,test file operations dryrun)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --dry-run --verbose=1 $(LOG))
	test ! -f $(BAR_STORAGE)/$(BAR_FILE).bar
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

test_file_operations_incremental: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@#
	# incremental tests
	@$(call functionInfoHeader,test file operations incremental)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE)-full.bar --full --incremental-list-file=$(BAR_STORAGE)/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	$(INSTALL) -d $(BAR_STORAGE)/new; $(CP) data/random1024.dat $(BAR_STORAGE)/new/random1024-new.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE)-incremental.bar --incremental --incremental-list-file=$(BAR_STORAGE)/$(BAR_FILE).bid $(TEST_FILES) $(BAR_STORAGE)/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN)-full.bar' '$(BAR_STORAGE)/$(BAR_PATTERN)-incremental.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN)-full.bar' '$(BAR_STORAGE)/$(BAR_PATTERN)-incremental.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN)-full.bar' '$(BAR_STORAGE)/$(BAR_PATTERN)-incremental.bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

test_file_operations_differential: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@#
	# differential tests
	@$(call functionInfoHeader,test file operations differential)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE)-full.bar --full --incremental-list-file=$(BAR_STORAGE)/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	$(INSTALL) -d $(BAR_STORAGE)/new; $(CP) data/random1024.dat $(BAR_STORAGE)/new/random1024-new.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE)-differential.bar --differential --incremental-list-file=$(BAR_STORAGE)/$(BAR_FILE).bid $(TEST_FILES) $(BAR_STORAGE)/new $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t '$(BAR_STORAGE)/$(BAR_PATTERN)-full.bar' '$(BAR_STORAGE)/$(BAR_PATTERN)-differential.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d '$(BAR_STORAGE)/$(BAR_PATTERN)-full.bar' '$(BAR_STORAGE)/$(BAR_PATTERN)-differential.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x '$(BAR_STORAGE)/$(BAR_PATTERN)-full.bar' '$(BAR_STORAGE)/$(BAR_PATTERN)-differential.bar' $(BAR_OPTIONS) --destination $(INTERMEDIATE_DIR)/restore $(LOG))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_file_operations_destroyed
test_file_operations_destroyed: \
  $(TEST_BAR) \
  $(TEST_DESTROYER) \
  $(TEST_FILES)
	@#
	# tests which must cause errors
	@$(call functionInfoHeader,test file operations destroyed)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	$(LS) $(BAR_STORAGE)/*.bar|while read fileName; do $(ECHO) $$fileName; $(TEST_DESTROYER) $$fileName m:16:FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0FIL0 >$${fileName}_destroyed; done
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,255,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/test*.bar_destroyed $(BAR_OPTIONS)) $(LOG))
	$(LS) $(BAR_STORAGE)/*.bar|while read fileName; do $(ECHO) $$fileName; $(TEST_DESTROYER) $$fileName m:20:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX >$${fileName}_destroyed; done
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,255,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/$(BAR_FILE).bar_destroyed $(BAR_OPTIONS)) $(LOG))
	$(LS) $(BAR_STORAGE)/*.bar|while read fileName; do $(ECHO) $$fileName; $(TEST_DESTROYER) $$fileName m:128:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX >$${fileName}_destroyed; done
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,255,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/$(BAR_FILE).bar_destroyed $(BAR_OPTIONS)) $(LOG))
#TODO: detect wrong data
	$(LS) $(BAR_STORAGE)/*.bar|while read fileName; do $(ECHO) $$fileName; $(TEST_DESTROYER) $$fileName d:1024:10 >$${fileName}_destroyed; done
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,255,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/$(BAR_FILE).bar_destroyed $(BAR_OPTIONS)) $(LOG))
	@#
	@$(call functionCleanTestFiles)
#TODO: --debug-create-archive-errors=1000
	$(if $(findstring $(TEST_BAR_DEBUG),$(TEST_BAR)),$(call functionTestCheckExitcode,1,1,($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 --debug-create-archive-errors=1000) $(LOG)))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_directory_operations
test_directory_operations: \
  $(TEST_BAR)
	@$(call functionInfoHeader,test directory operations)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@#
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(BAR_STORAGE) $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) $(BAR_STORAGE) $(BAR_OPTIONS) $(LOG))
	@#
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR)  $(BAR_STORAGE)/not_existing $(BAR_OPTIONS) $(LOG)))
	@$(call functionInfoFooter)

.PHONY: test_convert_operations
test_convert_operations: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@$(call functionInfoHeader,test file operations convert)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c        $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) | $(GREP) -i none`")
	@#
	# convert compress
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --compress-algorithm=zip1 --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --compress-algorithm=zip9 --verbose=1 --human-format $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L        $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) | $(GREP) -i zip9`")
	@#
	# convert job
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --job=01234567-89ab-0000-0000-000000000000 --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert '$(BAR_STORAGE)/$(BAR_PATTERN).bar' $(BAR_OPTIONS) --job=01234567-89ab-cdef-0123-456789abcdef --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L        $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --info $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) | $(GREP) -i 01234567-89ab-cdef-0123-456789abcdef`")
	@#
	# convert comment
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c        $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --comment='Franz Kafka: Das Schloss' --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --info $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) | $(GREP) 'Franz Kafka: Das Schloss'`")
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --comment='Franz Kafka: Die Verwandlung' --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --info $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) | $(GREP) 'Franz Kafka: Die Verwandlung'`")
	@#
ifeq (@HAVE_GCRYPT@,1)
	# convert encrypted AES256
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c        $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --crypt-algorithm=none --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-new-password='$(TEST_PASSWORD_CRYPT)' --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L        $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' | $(GREP) -i AES256`")
	# convert encrypted new password
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-new-password='$(TEST_PASSWORD_CRYPT_OTHER)' --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L        $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT_OTHER)' --verbose=1 $(LOG))
	# convert asymmetric encrypted new key
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c        $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --crypt-algorithm=AES256 --crypt-type=asymmetric --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c        $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --crypt-algorithm=AES256 --crypt-type=asymmetric --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-public-key=$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L        $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-type=asymmetric --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --crypt-new-password='$(TEST_PASSWORD_CRYPT_OTHER)' --crypt-public-key=$(TEST_KEY_CRYPT_OTHER_PUBLIC) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L        $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT_OTHER)' --crypt-private-key=$(TEST_KEY_CRYPT_OTHER_PRIVATE) --verbose=1 $(LOG))
	# convert signature
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c        $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --test-created-archives --overwrite-archive-files --signature-private-key=$(TEST_KEY_SIGNATURE_PRIVATE) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --info    $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --signature-public-key=$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(TEST_KEY_SIGNATURE_OTHER_PRIVATE) --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --info    $(BAR_STORAGE)/$(BAR_FILE).bar $(BAR_OPTIONS) --signature-public-key=$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --verbose=1 $(LOG))
	# wrong key
	#($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L $(BAR_STORAGE)/$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-private-key=$(TEST_KEY_CRYPT_PRIVATE) --verbose=1 $(LOG)))
endif
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_image_operations
test_image_operations: \
  $(foreach fileSystem,$(IMAGE_FILESYSTEM_NAMES),test_image_operations_$(fileSystem))

.PHONY: test_image_operations_raw
test_image_operations_raw:  \
  $(TEST_CONFIGS)
	# raw
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# raw zero-data
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_base
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# raw random-data
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_base
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# raw random-data, delta image
	@$(call functionCreateFileRandom,$(IMAGE0A),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE0B),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif

.PHONY: test_image_ext test_image_ext2 test_image_ext3 test_image_ext4
test_image_operations_ext: \
  test_image_operations_ext2 \
  test_image_operations_ext3 \
  test_image_operations_ext4

# Ext2
test_image_operations_ext2: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_EXT2@,)
	# ext2
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@
ifneq ($(findstring default,$(EXT_BLOCK_SIZES)),)
	@
	# ext2 zero-data, default block size
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext2 random-data, default block size
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext2 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
	@
endif
ifneq ($(findstring 1024,$(EXT_BLOCK_SIZES)),)
	@
	# ext2 zero-data, block size 1024 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext2 random-data, block size 1024 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext2 random-data, block size 1024 bytes, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
	@
endif
ifneq ($(findstring 2048,$(EXT_BLOCK_SIZES)),)
	@
	# ext2 zero-data, block size 2048 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext2 random-data, block size 2048 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext2 random-data, block size 2048 bytes, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 4096,$(EXT_BLOCK_SIZES)),)
	@
	# ext2 zero-data, block size 4096 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext2 random-data, block size 4096 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT2) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext2 random-data, block size 4096 bytes, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
endif
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

# Ext3
test_image_operations_ext3: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_EXT3@,)
	# ext3
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@
ifneq ($(findstring default,$(EXT_BLOCK_SIZES)),)
	@
	# ext3 zero-data, default block size
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext3 random-data, default block size
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 1024,$(EXT_BLOCK_SIZES)),)
	@
	# ext3 zero-data, block size 1024 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext3 random-data, block size 1024 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 2048,$(EXT_BLOCK_SIZES)),)
	@
	# ext3 zero-data, block size 2048 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext3 random-data, block size 2048 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 4096,$(EXT_BLOCK_SIZES)),)
	@
	# ext3 zero-data, block size 4096 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext3 random-data, block size 4096 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT3) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
endif
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

# Ext4
test_image_operations_ext4: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_EXT4@,)
	# ext4
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@
ifneq ($(findstring default,$(EXT_BLOCK_SIZES)),)
	@
	# ext4 zero-data, default block size
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext4 random-data, default block size
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 1024,$(EXT_BLOCK_SIZES)),)
	@
	# ext4 zero-data, block size 1024 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext4 random-data, block size 1024 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 2048,$(EXT_BLOCK_SIZES)),)
	@
	# ext4 zero-data, block size 2048 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext4 random-data, block size 2048 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
	@
endif
ifneq ($(findstring 4096,$(EXT_BLOCK_SIZES)),)
	@
	# ext4 zero-data, block size 4096 bytes
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ext4 random-data, block size 4096 bytes
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_EXT4) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	#$(call functionCreateSparse,$(IMAGE0),512G)
	#$(call functionCreateSparse,$(IMAGE1),512G)
	#@$(call functionInitFilesystem,$(IMAGE0),-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	#$(MAKE) test_image_operations_base \
        #   DEVICE0=$(LOOP0) DEVICE1=$(LOOP1)
	#@$(call functionTestDeviceDelete,$(LOOP1),$(MOUNT_POINT1))
	#@$(call functionTestDeviceDelete,$(LOOP0),$(MOUNT_POINT0))
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
endif
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

.PHONY: test_image_fat test_image_fat12 test_image_fat16 test_image_fat32
test_image_operations_fat: \
  test_image_operations_fat12 \
  test_image_operations_fat16 \
  test_image_operations_fat32

# FAT 12
test_image_operations_fat12: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_MSDOS@,)
	# FAT12
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@#
	# FAT12 zero-data
	@$(call functionCreateFileZero,$(IMAGE0),1,1440K)
	@$(call functionCreateFileZero,$(IMAGE1),1,1440K)
	@$(call functionInitFilesystem,$(IMAGE0),-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_FAT) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# FAT12 random-data
	@$(call functionCreateFileRandom,$(IMAGE0),1,1440K)
	@$(call functionCreateFileRandom,$(IMAGE1),1,1440K)
	@$(call functionInitFilesystem,$(IMAGE0),-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_FAT) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# FAT12 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

# FAT 16
test_image_operations_fat16: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_MSDOS@,)
	# FAT16
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@#
	# FAT16 zero-data
	@$(call functionCreateFileZero,$(IMAGE0),20,1M)
	@$(call functionCreateFileZero,$(IMAGE1),20,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_FAT) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# FAT16 random-data
	@$(call functionCreateFileRandom,$(IMAGE0),20,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),20,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_FAT) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# FAT16 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),32,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

# FAT 32
test_image_operations_fat32: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_MSDOS@,)
	# FAT32
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@#
	# FAT32 zero-data
	@$(call functionCreateFileZero,$(IMAGE0),64,1M)
	@$(call functionCreateFileZero,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_FAT) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# FAT32 random-data
	@$(call functionCreateFileRandom,$(IMAGE0),64,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_FAT) \
          FSCK_OPTIONS= \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# FAT32 random-data, default block size, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),64,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),64,1M)
	@$(call functionCreateFileZero,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

.PHONY: test_image_reiser test_image_reiserfs1 test_image_reiserfs2 test_image_reiserfs3 test_image_reiser4
test_image_operations_reiser: \
  test_image_operations_reiserfs1 \
  test_image_operations_reiserfs2 \
  test_image_operations_reiserfs3 \
  test_image_operations_reiser4

test_image_operations_reiserfs1:
ifneq (@MKFS_REISERFS@,)
endif

test_image_operations_reiserfs2:
ifneq (@MKFS_REISERFS@,)
endif

# ReiserFS version 3 (Note: Linux only support block size 4096)
test_image_operations_reiserfs3: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
ifneq (@MKFS_REISERFS@,)
	# ReiserFS 3
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@#
	# ReiserFS 3 zero-data
	@$(call functionCreateFileZero,$(IMAGE0),64,1M)
	@$(call functionCreateFileZero,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t reiserfs -b 4096 -q --format 3.5,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_REISERFS) \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ReiserFS 3 random-data
	@$(call functionCreateFileRandom,$(IMAGE0),64,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t reiserfs -b 4096 -q --format 3.5,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_REISERFS) \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ReiserFS 3 zero-data
	@$(call functionCreateFileZero,$(IMAGE0),64,1M)
	@$(call functionCreateFileZero,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_REISERFS) \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@#
	# ReiserFS 3 random-data
	@$(call functionCreateFileRandom,$(IMAGE0),64,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0),-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK=$(FSCK_REISERFS) \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# ReiserFS 3 random-data, delta image
	@$(call functionCreateFileZero,$(IMAGE0A),64,1M)
	@$(call functionCreateFileZero,$(IMAGE0B),64,1M)
	@$(call functionCreateFileZero,$(IMAGE1),64,1M)
	@$(call functionInitFilesystem,$(IMAGE0A),-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,$(IMAGE0B),-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=$(IMAGE0A) IMAGE0_B=$(IMAGE0B) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0B)
	$(RMF) $(IMAGE0A)
endif
endif

# Reiser4 (Note: not supported anymore)
test_image_operations_reiser4:
ifneq (@MKFS_REISER4@,)
endif

# image dry-run
.PHONY: test_image_operations_dryrun
test_image_operations_dryrun: \
  $(TEST_CONFIGS)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# delta tests
	@$(call functionInfoHeader,test image operation dryrun)
	@#
	$(INSTALL) -d intermediate
	@$(call functionTestDeviceReset)
	@
	# raw zero-data
	@$(call functionCreateFileZero,$(IMAGE0),32,1M)
	@$(call functionCreateFileZero,$(IMAGE1),32,1M)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images --dry-run,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images --dry-run) $(OPTIONS)" \
          test_image_operations_create
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@
	# raw random-data
	@$(call functionCreateFileRandom,$(IMAGE0),32,1M)
	@$(call functionCreateFileRandom,$(IMAGE1),32,1M)
	$(MAKE) \
          IMAGE0=$(IMAGE0) IMAGE1=$(IMAGE1) \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images --dry-run,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images --dry-run $(OPTIONS)run)" \
          test_image_operations_create
	$(RMF) $(IMAGE1)
	$(RMF) $(IMAGE0)
	@$(call functionInfoFooter)
endif

.PHONY: test_image_operations_base test_image_operations_check test_image_operations_diff_image test_image_operations_create
test_image_operations_base: \
  $(TEST_BAR) \
  $(TEST_FILES)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# normal tests
	@$(call functionInfoHeader,test image operation base)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@#
	@$(call functionCleanTestFiles)
	@$(call functionTestDeviceReset)
	@#
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -m $(BAR_STORAGE)/$(BAR_FILE).bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/test*.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d $(BAR_STORAGE)/test*.bar $(BAR_OPTIONS) $(LOG))
#TODO: support archive-part-size
#	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) --convert $(BAR_STORAGE)/test*.bar $(BAR_OPTIONS) --compress-algorithm=zip9 $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@#
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x $(BAR_STORAGE)/test*.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)
endif

test_image_operations_delta: \
  $(TEST_BAR) \
  $(TEST_FILES)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# delta tests
	@$(call functionInfoHeader,test image operation delta)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,IMAGE0_A)
	@$(call functionVerifyParameter,IMAGE0_B)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@#
	@$(call functionCleanTestFiles)
	@$(call functionTestDeviceReset)
	@#
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -m $(BAR_STORAGE)/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=1 $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@#
ifeq (@HAVE_XDELTA3@,1)
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -m $(BAR_STORAGE)/$(BAR_FILE)-B.bar $(DEVICE0) $(BAR_OPTIONS) --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE0))
endif
	@#
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@#
	@$(call functionCleanTestFiles)
	@#
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -m $(BAR_STORAGE)/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --compress-algorithm=zip9 --overwrite-archive-files --verbose=1 $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@#
ifeq (@HAVE_XDELTA3@,1)
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -m $(BAR_STORAGE)/$(BAR_FILE)-B.bar $(DEVICE0) $(BAR_OPTIONS) --delta-source='$(BAR_STORAGE)/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9+zip9 --force-delta-compression --overwrite-archive-files --verbose=1 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE0))
endif
	@#
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -x $(BAR_STORAGE)/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@$(call functionInfoFooter)
endif

test_image_operations_check:
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# check file systems and compare file content
	@$(call functionInfoHeader,test image operation check)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@#
	@$(call functionTestDeviceReset)
	@#
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE0) 2>/dev/null $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@#
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE1) 2>/dev/null $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@#
	@$(call functionDeviceMount,$(DEVICE0),$(IMAGE0),$(MOUNT_POINT0))
	@$(call functionDeviceMount,$(DEVICE1),$(IMAGE1),$(MOUNT_POINT1))
	$(SUDO) -n $(DIFF) -r $(MOUNT_POINT0) $(MOUNT_POINT1) $(LOG)
	@$(call functionDeviceUmount,$(DEVICE0),$(MOUNT_POINT0))
	@$(call functionDeviceUmount,$(DEVICE1),$(MOUNT_POINT1))
	@$(call functionInfoFooter)
endif

test_image_operations_diff_image:
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# compare devices
	@$(call functionInfoHeader,test image operation diff image)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@#
	@$(call functionTestDeviceReset)
	@#
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	@$(call functionTestDeviceDump,$(DEVICE0),$(DUMP0))
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@#
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	@$(call functionTestDeviceDump,$(DEVICE1),$(DUMP1))
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@#
	$(DIFF) $(DUMP0) $(DUMP1)
	@#
	@$(RMF) $(DUMP0) $(DUMP1)
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)
endif

test_image_operations_create: \
  $(TEST_BAR) \
  $(TEST_FILES)
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	# normal tests
	@$(call functionInfoHeader,test image operation create only)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,DEVICE0)
	@#
	@$(call functionCleanTestFiles)
	@$(call functionTestDeviceReset)
	@#
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -m $(BAR_STORAGE)/$(BAR_FILE).bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=1 $(LOG))
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)
endif

.PHONY: test_optical_operations
test_optical_operations: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# create optical
	@$(call functionInfoHeader,test optical opertations)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	@$(call functionCleanTestFiles)
	$(SLEEP) $(TEST_OPTICAL_SLEEP_TIME)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c cd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c dvd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c bd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank $(LOG))
	test ! -z "$(TEST_OPTICAL_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t dvd:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_OPTICAL_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d dvd:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_OPTICAL_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L dvd:///$(BAR_FILE).bar $(LOG))
	$(SLEEP) $(TEST_OPTICAL_SLEEP_TIME)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c cd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank --ecc $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c dvd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank --ecc $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c bd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank --ecc $(LOG))
	test ! -z "$(TEST_OPTICAL_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t dvd:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_OPTICAL_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d dvd:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_OPTICAL_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L dvd:///$(BAR_FILE).bar $(LOG))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_device_operations
test_device_operations: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# create device
	@$(call functionInfoHeader,test device opertations)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	@$(call functionCleanTestFiles)
	$(SLEEP) $(TEST_DEVICE_SLEEP_TIME)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c device:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank $(LOG))
	test ! -z "$(TEST_DEVICE_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t device:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_DEVICE_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d device:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_DEVICE_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L device:///$(BAR_FILE).bar $(LOG))
	@$(call functionCleanTestFiles)
	$(SLEEP) $(TEST_DEVICE_SLEEP_TIME)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c device:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank --ecc $(LOG))
	test ! -z "$(TEST_DEVICE_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -t device:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_DEVICE_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -d device:///$(BAR_FILE).bar $(LOG))
	test ! -z "$(TEST_DEVICE_EMULATION)" || ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -L device:///$(BAR_FILE).bar $(LOG))
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_index_operations
test_index_operations: \
  test_index_operations_tool \
  test_index_operations_base \
  test_index_operations_server

.PHONY: test_index_operations_tool
test_index_operations_tool: \
  $(TEST_BAR) \
  $(TEST_BAR_DEBUG) \
  $(TEST_BAR_INDEX) \
  $(TEST_FILES)
	# bar-index operations
	@$(call functionInfoHeader,test index tool operations)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,TEST_INDEX_DATABASE)
	@$(call functionVerifyParameter,TEST_INDEX_DATABASE_IMPORT)
	@#
	@$(call functionCleanTestFiles)
	@$(call functionCleanTestDatabase,$(TEST_INDEX_DATABASE))
	@$(call functionExec,$(TEST_BAR_DEBUG)) -c $(BAR_STORAGE)/test0.bar --debug-index-uuid=00000001-0000-0000-0000-000000000000 $(TEST_FILES_SIMPLE) >/dev/null
	@$(TOUCH) data/random128.dat data/zero128.dat
	@$(call functionExec,$(TEST_BAR_DEBUG)) -c $(BAR_STORAGE)/test1.bar --debug-index-uuid=00000001-0000-0000-0000-000000000000 $(TEST_FILES_SIMPLE) >/dev/null
	$(SQLITE3) $(BAR_STORAGE)/import.db < $(TEST_INDEX_DATABASE_IMPORT)
	@#
	# options
	$(TEST_BAR_INDEX) -h 1>/dev/null $(LOG)
	$(TEST_BAR_INDEX) --help 1>/dev/null $(LOG)
	$(TEST_BAR_INDEX) --xhelp 1>/dev/null $(LOG)
	$(TEST_BAR_INDEX) --version 1>/dev/null $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create --force $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create-triggers $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create-newest $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create-indizes $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create-aggregates $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --check $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --import $(BAR_STORAGE)/import.db $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --clean $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --vacuum $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --optimize $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-jobs $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-jobs=$(TEST_JOB_UUID) $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-entities $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-entities=1 $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-entries $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-entries=1 $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-entries=test $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-storages $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --info-lost-storages $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q -e $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --entries $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --entries $(TEST_JOB_UUID) $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --entries-newest $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --entries-newest $(TEST_JOB_UUID) $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q -s $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --storages $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --storages $(TEST_JOB_UUID) $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --header "SELECT * FROM storages" $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q -H "SELECT * FROM storages" $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --names "SELECT * FROM storages" $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q -n "SELECT * FROM storages" $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --time "SELECT * FROM storages" $(LOG)
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --explain-query "SELECT * FROM storages" $(LOG)
	@#
	# newest entries in index
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create --force $(LOG)
	$(call functionIndexQueryEmpty,"SELECT * FROM entriesNewest") # no entries
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR_DEBUG)) \
           -C $(SUB_DIR) \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-entity-id=1 \
           --debug-index-add-storage $(BAR_STORAGE)/test0.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) -q --create-newest $(LOG)
	$(call functionIndexQueryEmpty,"SELECT * FROM entriesNewest WHERE entityId!=1") # only entries of entity 1
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR_DEBUG)) \
           -C $(SUB_DIR) \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-entity-id=2 \
           --debug-index-add-storage $(BAR_STORAGE)/test1.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT * FROM entriesNewest WHERE entityId=1 AND    (name IN ('data/random128.dat','data/zero128.dat'))") # only entries of entity 1
	$(call functionIndexQueryEmpty,"SELECT * FROM entriesNewest WHERE entityId=2 AND NOT(name IN ('data/random128.dat','data/zero128.dat'))") # only entries of entity 2
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_index_operations_base
test_index_operations_base: \
  $(TEST_BAR) \
  $(TEST_BAR_INDEX) \
  $(TEST_FILES_SIMPLE)
	# bar index operations
	@$(call functionInfoHeader,test index opertations)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,TEST_INDEX_DATABASE)
	@#
ifeq ($(call functionHasDebugFunctions,$(TEST_BAR)),1)
	# maintain index
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) $(TEST_OPTIONS) --index-database=$(TEST_INDEX_DATABASE) --debug-index-wait-operations $(LOG))
	@#
	# import into index
	@$(call functionCleanTestFiles)
	@$(call functionCleanTestDatabase,$(TEST_INDEX_DATABASE))
	@$(call functionExec,$(TEST_BAR)) -c $(BAR_STORAGE)/test0.bar $(TEST_FILES_SIMPLE) >/dev/null
	@$(TOUCH) data/random128.dat data/zero128.dat
	@$(call functionExec,$(TEST_BAR)) -c $(BAR_STORAGE)/test1.bar $(TEST_FILES_SIMPLE) >/dev/null
	@#
	# add to index
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) --create --force $(LOG)
	$(call functionIndexQueryEmpty,"SELECT entityId FROM entriesNewest")
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) \
           -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-add-storage $(BAR_STORAGE)/test0.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entityId FROM entriesNewest WHERE entityId!=1") # only entries with entity 1
	$(call functionIndexQueryEmpty,"SELECT entityId FROM entriesNewest WHERE name NOT IN ($(call functionSQLList,$(TEST_FILES_SIMPLE)))") # only entries with known names
	@#
	# refresh index
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) \
           -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-refresh-storage $(BAR_STORAGE)/test0.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entityId FROM entriesNewest WHERE entityId!=1") # only entries with entity 1
	@#
	# remove from index
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) \
           -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-remove-storage $(BAR_STORAGE)/test0.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN entryFragments ON entryFragments.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=entryFragments.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no file/image/hardlink entries
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN directoryEntries ON directoryEntries.entryId=directoryEntries.entryId \
                                          LEFT JOIN storages ON storages.id=directoryEntries.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no directory entries
	$(call functionIndexQueryEmpty,"SELECT linkEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN linkEntries ON entryFragments.entryId=linkEntries.entryId \
                                          LEFT JOIN storages ON storages.id=linkEntries.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no link entries
	$(call functionIndexQueryEmpty,"SELECT specialEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN specialEntries ON specialEntries.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=specialEntries.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no special entries
	@#
	# newest entries in index
	$(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) --create --force $(LOG)
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) \
           -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-add-storage $(BAR_STORAGE)/test0.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN entryFragments ON entryFragments.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=entryFragments.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId!=1 \
                                       ") # only file/image/hardlink entries with entity != 1
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN directoryEntries ON directoryEntries.entryId=directoryEntries.entryId \
                                          LEFT JOIN storages ON storages.id=directoryEntries.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId!=1 \
                                       ") # only directory entries with entity != 1
	$(call functionIndexQueryEmpty,"SELECT linkEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN linkEntries ON entryFragments.entryId=linkEntries.entryId \
                                          LEFT JOIN storages ON storages.id=linkEntries.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId!=1 \
                                       ") # only link entries with entity != 1
	$(call functionIndexQueryEmpty,"SELECT specialEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN specialEntries ON specialEntries.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=specialEntries.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId!=1 \
                                       ") # only special entries with entity != 1
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-add-storage $(BAR_STORAGE)/test1.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entityId FROM entriesNewest WHERE entityId!=1 AND NOT name LIKE '%128.dat'") # only old entries with entity 1
	$(call functionIndexQueryEmpty,"SELECT entityId FROM entriesNewest WHERE entityId!=2 AND name LIKE '%128.dat'") # only new entries with entity 2
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(T\EST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-remove-storage $(BAR_STORAGE)/test0.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN entryFragments ON entryFragments.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=entryFragments.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId=1 \
                                       ") # only file/image/hardlink entries with entity 1
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN directoryEntries ON directoryEntries.entryId=directoryEntries.entryId \
                                          LEFT JOIN storages ON storages.id=directoryEntries.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId=1 \
                                       ") # only directory entries with entity 1
	$(call functionIndexQueryEmpty,"SELECT linkEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN linkEntries ON entryFragments.entryId=linkEntries.entryId \
                                          LEFT JOIN storages ON storages.id=linkEntries.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId=1 \
                                       ") # only link entries with entity 1
	$(call functionIndexQueryEmpty,"SELECT specialEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN specialEntries ON specialEntries.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=specialEntries.storageId \
                                        WHERE     storages.deletedFlag!=1 \
                                              AND entityId=1 \
                                       ") # only special entries with entity 1
	($(CD) $(UP_DIR); \
         $(ULIMIT) -Sv $(MEMORY_LIMIT); \
         $(T\EST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
           -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar \
           $(BAR_OPTIONS) \
           --index-database=$(TEST_INDEX_DATABASE) \
           --debug-index-remove-storage $(BAR_STORAGE)/test1.bar \
           --verbose=1 \
           $(LOG) \
        )
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN entryFragments ON entryFragments.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=entryFragments.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no file/image/hardlink entries
	$(call functionIndexQueryEmpty,"SELECT entriesNewest.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN directoryEntries ON directoryEntries.entryId=directoryEntries.entryId \
                                          LEFT JOIN storages ON storages.id=directoryEntries.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no directory entries
	$(call functionIndexQueryEmpty,"SELECT linkEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN linkEntries ON entryFragments.entryId=linkEntries.entryId \
                                          LEFT JOIN storages ON storages.id=linkEntries.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no link entries
	$(call functionIndexQueryEmpty,"SELECT specialEntries.entityId \
                                        FROM entriesNewest \
                                          LEFT JOIN specialEntries ON specialEntries.entryId=entriesNewest.entryId \
                                          LEFT JOIN storages ON storages.id=specialEntries.storageId \
                                        WHERE storages.deletedFlag!=1 \
                                       ") # no special entries
	@$(RMF) $(BAR_STORAGE)/test0.bar $(BAR_STORAGE)/test1.bar
else
	@$(ECHO) "server index test: debug functions not available in $(TEST_BAR) - skipped"
endif
	@$(call functionDoneTestFiles)
	@$(call functionInfoFooter)

.PHONY: test_index_operations_server
test_index_operations_server: \
  $(TEST_BAR) \
  $(TEST_BAR_INDEX) \
  $(TEST_SERVER_JOBS_DIRECTORY) \
  $(TEST_FILES)
	# bar server index operations
	@$(call functionInfoHeader,test index opertations server)
	@$(call functionVerifyParameter,TEST_INDEX_DATABASE)
	@#
ifeq ($(call functionHasDebugFunctions,$(TEST_BAR)),1)
	@$(call functionCleanTestFiles)
	@$(call functionCleanTestDatabase,$(TEST_INDEX_DATABASE))
	for i in 1 2 3 4 6 7; do \
          $(ECHO) "Import $(UP_DIR)/archive/index$$i.sql" $(LOG); \
          $(RMF) $(TEST_INDEX_DATABASE); $(TEST_BAR_INDEX) $(TEST_INDEX_DATABASE) - < archive/index$$i.sql; \
          ( \
            $(CD) $(UP_DIR); \
            $(ULIMIT) -Sv $(MEMORY_LIMIT); \
            $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
              -C $(SUB_DIR) \
              $(TEST_OPTIONS) \
              --index-database=$(TEST_INDEX_DATABASE) \
              --debug-index-wait-operations \
              $(ADDITIONAL_OPTIONS); \
          ) $(LOG); \
        done
	@$(call functionDoneTestFiles)
else
	@$(ECHO) "server index test: debug functions not available in $(TEST_BAR) - skipped"
endif
	@$(call functionInfoFooter)

.PHONY: test_index_operations-debug
test_index_operations-debug: \
  $(TEST_BAR_DEBUG) \
  $(TEST_BAR_INDEX_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_DEBUG)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_DEBUG)" test_index_operations

.PHONY: test_index_operations-gcov
test_index_operations-gcov: \
  $(TEST_BAR_DEBUG) \
  $(TEST_BAR_INDEX_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GCOV)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_GCOV)" test_index_operations

.PHONY: test_index_operations-gprof
test_index_operations-gprof: \
  $(TEST_BAR_DEBUG) \
  $(TEST_BAR_INDEX_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR="$(TEST_BAR_GPROF)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_GPROF)" test_index_operations

.PHONY: test_index_operations-valgrind
test_index_operations-valgrind: \
  $(TEST_BAR_DEBUG) \
  $(TEST_BAR_INDEX_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR="$(TEST_BAR_VALGRIND)" TEST_BAR_INDEX="$(TEST_BAR_INDEX_VALGRIND)" test_index_operations

# send command to server via socket: <host name+port>,<command>
functionServerCommandSocket = \
  id=$$(($$id+1)); \
  $(ECHO) $1: $$id $2; \
  $(ECHO) $$id $2|$(NETCAT) -w1 $1|$(TAIL) -n +2|while read id_ doneFlag errorCode s; do $(ECHO) $$id_ $$doneFlag $$errorCode $$s; if test $$errorCode -ne 0; then exit 1; fi; done; \
  if test $$? -ne 0; then exit 1; fi
# send command to batch server: <command>
functionServerCommandBatch = \
  id=$$(($$id+1)); \
  $(ECHO) $$id $1
# send command to slave via socket: <host name+port>,<command>
functionSlaveCommandSocket = \
  id=$$(($$id+1)); \
  $(ECHO) $1: $$id $2; \
  $(ECHO) $$id $2|$(NETCAT) -w1 $1|$(TAIL) -n +2|while read id_ doneFlag errorCode s; do $(ECHO) $$id_ $$doneFlag $$errorCode $$s; if test $$errorCode -ne 0; then exit 1; fi; done; \
  if test $$? -ne 0; then exit 1; fi

.PHONY: test_server_operations test_server_operations_batch test_server_operations_socket test_master_slave_operations
test_server_operations: \
  test_server_operations_batch \
  test_server_operations_socket \
  test_master_slave_operations

test_server_operations_batch: \
  $(TEST_BAR) \
  $(TEST_CONFIGS) \
  $(TEST_SERVER_JOBS_DIRECTORY) \
  $(TEST_FILES) \
  $(TEST_SERVER_DATABASE)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_JOBS_DIRECTORY)
	@#
	# create test archive
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=0 $(LOG))
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	@$(call functionTestDeviceReset)
	$(call functionCreateFileZero,$(IMAGE0),32,1M)
	$(call functionTestDeviceCreate,$(LOOP0),$(IMAGE0))
endif
	@#
	# run batch server
	$(TEST_BAR) --debug-server 1>/dev/null 2>/dev/null; \
          if test $$? -eq 0; then \
          ( \
            $(call functionServerCommandBatch,VERSION); \
            $(call functionServerCommandBatch,STATUS); \
            $(call functionServerCommandBatch,ABORT commandId=1000); \
            \
            $(call functionServerCommandBatch,SERVER_LIST); \
            $(call functionServerCommandBatch,SERVER_OPTION_GET name=tmp-directory); \
            $(call functionServerCommandBatch,SERVER_OPTION_SET name=tmp-directory value=/tmp); \
            $(call functionServerCommandBatch,SERVER_OPTION_FLUSH); \
            \
            $(call functionServerCommandBatch,DEVICE_LIST); \
            $(call functionServerCommandBatch,ROOT_LIST allMounts=yes); \
            $(call functionServerCommandBatch,FILE_INFO name=/tmp); \
            $(call functionServerCommandBatch,FILE_LIST directory=/tmp); \
            $(call functionServerCommandBatch,FILE_ATTRIBUTE_GET name=/tmp attribute=NOBACKUP); \
            $(call functionServerCommandBatch,DIRECTORY_INFO name=/tmp timeouot=10); \
            $(call functionServerCommandBatch,TEST_SCRIPT name=test script=date); \
            \
            $(call functionServerCommandBatch,MASTER_GET); \
            $(call functionServerCommandBatch,MASTER_CLEAR); \
            $(call functionServerCommandBatch,MASTER_PAIRING_START); \
            $(call functionServerCommandBatch,MASTER_PAIRING_STOP pair=yes); \
            $(call functionServerCommandBatch,MASTER_PAIRING_STATUS); \
            \
            $(call functionServerCommandBatch,MAINTENANCE_LIST); \
            $(call functionServerCommandBatch,MAINTENANCE_LIST_ADD date=*-*-* weekDays='Mon$(COMMA)Tue$(COMMA)Wed$(COMMA)Thu$(COMMA)Fri$(COMMA)Sat' beginTime=07:00 endTime=10:00); \
            $(call functionServerCommandBatch,MAINTENANCE_LIST_UPDATE id=1 date=*-*-* weekDays='Tue$(COMMA)Wed$(COMMA)Thu$(COMMA)Fri$(COMMA)Sat$(COMMA)Sun' beginTime=08:00 endTime=11:00); \
            $(call functionServerCommandBatch,MAINTENANCE_LIST); \
            $(call functionServerCommandBatch,MAINTENANCE_LIST_REMOVE id=1); \
            \
            $(call functionServerCommandBatch,SERVER_LIST); \
            $(call functionServerCommandBatch,SERVER_LIST_ADD name='foo1' serverType=FILE port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST_UPDATE id=1 name='foo' serverType=FILE port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST); \
            $(call functionServerCommandBatch,SERVER_LIST_REMOVE id=1); \
            $(call functionServerCommandBatch,SERVER_LIST_ADD name='foo2' serverType=FTP port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST_UPDATE id=1 name='foo' serverType=FTP port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST); \
            $(call functionServerCommandBatch,SERVER_LIST_REMOVE id=1); \
            $(call functionServerCommandBatch,SERVER_LIST_ADD name='foo3' serverType=SSH port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST_UPDATE id=1 name='foo' serverType=SSH port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST); \
            $(call functionServerCommandBatch,SERVER_LIST_REMOVE id=1); \
            $(call functionServerCommandBatch,SERVER_LIST_ADD name='foo4' serverType=WEBDAV port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST_UPDATE id=1 name='foo' serverType=WEBDAV port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandBatch,SERVER_LIST); \
            $(call functionServerCommandBatch,SERVER_LIST_REMOVE id=1); \
            \
            $(call functionServerCommandBatch,JOB_LIST); \
            $(call functionServerCommandBatch,JOB_NEW name=$(TEST_JOB_NAME2) jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,JOB_INFO jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,JOB_OPTION_GET jobUUID=$(TEST_JOB_UUID) name=UUID); \
            $(call functionServerCommandBatch,JOB_ABORT jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,JOB_RESET jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
            \
            $(call functionServerCommandBatch,INCLUDE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,INCLUDE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,MOUNT_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,MOUNT_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,EXCLUDE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,EXCLUDE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,EXCLUDE_COMPRESS_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,EXCLUDE_COMPRESS_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,SOURCE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,SCHEDULE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,SOURCE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,SCHEDULE_LIST_ADD jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID) archiveType=normal date=*-1-2 weekDays=* time=1:20 interval=300 beginTime=0:30 endTime=*:50 customText="test" testCreatedArchives=yes noStorage=yes enabled=no); \
            $(call functionServerCommandBatch,SCHEDULE_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID)); \
            $(call functionServerCommandBatch,PERSISTENCE_LIST_ADD jobUUID=$(TEST_JOB_UUID) archiveType=normal minKeep=1 maxKeep=2 maxAge=3); \
            $(call functionServerCommandBatch,PERSISTENCE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,ARCHIVE_LIST name=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            \
            $(call functionServerCommandBatch,JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-part-size value=0); \
            \
            $(call functionServerCommandBatch,MAINTENANCE time=600); \
            $(call functionServerCommandBatch,PAUSE time=300); \
            $(call functionServerCommandBatch,PAUSE time=300 modeMask=CREATE); \
            $(call functionServerCommandBatch,PAUSE time=300 modeMask=STORAGE); \
            $(call functionServerCommandBatch,PAUSE time=300 modeMask=RESTORE); \
            $(call functionServerCommandBatch,PAUSE time=300 modeMask=INDEX_UPDATE); \
            $(call functionServerCommandBatch,PAUSE time=300 modeMask=INDEX_MAINTENANCE); \
            $(call functionServerCommandBatch,PAUSE time=300 modeMask=ALL); \
            $(call functionServerCommandBatch,SUSPEND); \
            $(call functionServerCommandBatch,SUSPEND modeMask=CREATE); \
            $(call functionServerCommandBatch,SUSPEND modeMask=STORAGE); \
            $(call functionServerCommandBatch,SUSPEND modeMask=RESTORE); \
            $(call functionServerCommandBatch,SUSPEND modeMask=INDEX_UPDATE); \
            $(call functionServerCommandBatch,SUSPEND modeMask=INDEX_MAINTENANCE); \
            $(call functionServerCommandBatch,SUSPEND modeMask=ALL); \
            $(SLEEP) 2; \
            $(call functionServerCommandBatch,CONTINUE); \
            \
            $(call functionServerCommandBatch,DECRYPT_PASSWORD_CLEAR); \
            $(call functionServerCommandBatch,DECRYPT_PASSWORD_ADD encryptType=NONE encryptedPassword=test); \
            $(call functionServerCommandBatch,FTP_PASSWORD encryptType=NONE encryptedPassword=test); \
            $(call functionServerCommandBatch,SSH_PASSWORD encryptType=NONE encryptedPassword=test); \
            $(call functionServerCommandBatch,WEBDAV_PASSWORD encryptType=NONE encryptedPassword=test); \
            $(call functionServerCommandBatch,CRYPT_PASSWORD jobUUID=$(TEST_JOB_UUID) encryptType=NONE encryptedPassword=test); \
            $(call functionServerCommandBatch,PASSWORDS_CLEAR); \
            \
            $(call functionServerCommandBatch,JOB_DELETE jobUUID=$(TEST_JOB_UUID)); \
            \
            $(call functionServerCommandBatch,STORAGE_LIST_ADD indexIds=1$(COMMA)2$(COMMA)3); \
            $(call functionServerCommandBatch,STORAGE_LIST); \
            $(call functionServerCommandBatch,STORAGE_LIST_CLEAR); \
            $(call functionServerCommandBatch,ENTRY_LIST_ADD entryIds=1$(COMMA)2$(COMMA)3); \
            $(call functionServerCommandBatch,ENTRY_LIST); \
            $(call functionServerCommandBatch,ENTRY_LIST_CLEAR); \
            \
            $(call functionServerCommandBatch,INDEX_STORAGE_ADD pattern=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            $(SLEEP) 2; \
            $(call functionServerCommandBatch,INDEX_INFO); \
            \
            $(call functionServerCommandBatch,INDEX_UUID_LIST indexStateSet='*' indexModeSet='*' name='*'); \
            \
            $(call functionServerCommandBatch,INDEX_ENTITY_LIST indexStateSet='*' indexModeSet='*' name='*'); \
            \
            $(call functionServerCommandBatch,INDEX_STORAGE_LIST_INFO name='*' indexStateSet='*' indexModeSet='*'); \
            $(call functionServerCommandBatch,INDEX_STORAGE_LIST_INFO name='test*' indexStateSet='*' indexModeSet='*'); \
            $(call functionServerCommandBatch,INDEX_STORAGE_LIST entityId=* name='*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
            $(call functionServerCommandBatch,INDEX_STORAGE_LIST entityId=* name='test*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
            \
            $(call functionServerCommandBatch,INDEX_ENTRY_LIST_INFO name='*' indexType='*' newestOnly=yes); \
            $(call functionServerCommandBatch,INDEX_ENTRY_LIST_INFO name='test*' indexType='*' newestOnly=yes); \
            $(call functionServerCommandBatch,INDEX_ENTRY_LIST name='*' indexType='*' newestOnly=yes offset=0 limit=100); \
            $(call functionServerCommandBatch,INDEX_ENTRY_LIST name='test*' indexType='*' newestOnly=yes offset=0 limit=100); \
            $(call functionServerCommandBatch,INDEX_ENTRY_FRAGMENT_LIST entryId=21); \
            \
            $(call functionServerCommandBatch,INDEX_HISTORY_LIST); \
            \
            $(call functionServerCommandBatch,JOB_NEW name=$(TEST_JOB_NAME2) jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) archive-type=continous); \
            $(call functionServerCommandBatch,JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-name value=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            $(call functionServerCommandBatch,JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-type value=normal); \
            $(call functionServerCommandBatch,JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-file-mode value=overwrite); \
            $(call functionServerCommandBatch,INCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) entryType=file pattern=data); \
            $(call functionServerCommandBatch,INCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) entryType=image pattern=$(LOOP0)); \
            $(call functionServerCommandBatch,JOB_FLUSH); \
            $(call functionServerCommandBatch,DEVICE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,ROOT_LIST jobUUID=$(TEST_JOB_UUID) allMounts=yes); \
            $(call functionServerCommandBatch,FILE_INFO jobUUID=$(TEST_JOB_UUID) name=/tmp); \
            $(call functionServerCommandBatch,INCLUDE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandBatch,JOB_START jobUUID=$(TEST_JOB_UUID) archiveType=normal); \
            (for i in `$(SEQ) 1 12`; do \
               $(call functionServerCommandBatch,JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
               $(SLEEP) 10; \
             done; \
            ); \
            $(call functionServerCommandBatch,JOB_ABORT jobUUID=$(TEST_JOB_UUID)); \
            (for i in `$(SEQ) 1 6`; do \
               $(call functionServerCommandBatch,JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
               $(SLEEP) 10; \
             done; \
            ); \
            $(call functionServerCommandBatch,JOB_DELETE jobUUID=$(TEST_JOB_UUID)); \
            \
            $(SLEEP) 2; \
            \
            $(call functionServerCommandBatch,DEBUG_PRINT_STATISTICS); \
            $(call functionServerCommandBatch,DEBUG_PRINT_MEMORY_INFO); \
            $(call functionServerCommandBatch,DEBUG_DUMP_MEMORY_INFO); \
            \
            $(call functionServerCommandBatch,QUIT); \
          ) | \
          ( \
            $(RMF) $(BAR_JOBS_DIRECTORY)/$(TEST_JOB_NAME2); \
            $(CD) $(UP_DIR); \
            $(ULIMIT) -Sv $(MEMORY_LIMIT); \
            \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_JOBS_DIRECTORY); \
            $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
              -C $(SUB_DIR) \
              --config=$(TEST_SERVER_CONFIG) \
              --index-database=sqlite:$(TEST_SERVER_DATABASE) \
              --jobs-directory=$(TEST_SERVER_JOBS_DIRECTORY) \
              --log-file=$(TEST_SERVER_LOG_FILE) \
              --log-post-command="cat %file" \
              --log=all \
              --max-threads=1 \
              --batch \
              --debug-server \
              --debug-server-fixed-ids \
              $(ADDITIONAL_OPTIONS); \
          ) $(LOG); \
        else \
          $(ECHO) Warning: skipped $@ - BAR with debug functions required; \
        fi
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	$(call functionTestDeviceDelete,$(LOOP0))
	$(RMF) $(IMAGE0)
endif
	$(RMF) $(BAR_STORAGE)/$(BAR_FILE).bar
	@$(call functionDoneTestFiles)

test_server_operations_socket_server: \
  $(TEST_BAR) \
  $(TEST_CONFIGS) \
  $(TEST_SERVER_JOBS_DIRECTORY) \
  $(TEST_FILES) \
  $(TEST_SERVER_DATABASE)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_JOBS_DIRECTORY)
	@#
	$(TEST_BAR) --debug-server 1>/dev/null 2>/dev/null; \
          if test $$? -eq 0; then \
          ( \
            $(RMF) $(BAR_JOBS_DIRECTORY)/$(TEST_JOB_NAME2); \
            $(CD) $(UP_DIR); \
            $(ULIMIT) -Sv $(MEMORY_LIMIT); \
            \
            : start server; \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_DIRECTORY); \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_JOBS_DIRECTORY); \
            $(INSTALL) bar.cfg $(SUB_DIR)/$(TEST_SERVER_CONFIG); \
            $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
              -C $(SUB_DIR) \
              $(TEST_OPTIONS) \
              --config=$(TEST_SERVER_CONFIG) \
              --server \
              --pid-file=$(TEST_SERVER_PID_FILE) \
              --server \
              --server-port=$(TEST_SERVER_PORT) \
              --index-database=sqlite:$(TEST_SERVER_DATABASE) \
              --jobs-directory=$(TEST_SERVER_JOBS_DIRECTORY) \
              --log-file=$(TEST_SERVER_LOG_FILE) \
              --log-post-command="cat %file" \
              --log=all \
              --max-threads=1 \
              --debug-server \
              --debug-server-fixed-ids \
              $(ADDITIONAL_OPTIONS); \
          ) $(LOG); \
        else \
          $(ECHO) Warning: skipped $@ - BAR with debug functions required; \
        fi

test_server_operations_socket_client: \
  $(TEST_BAR)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(TEST_BAR) --debug-server 1>/dev/null 2>/dev/null; \
          if test $$? -eq 0; then \
          ( \
            : wait for server; \
            (for i in `$(SEQ) 1 6`; do \
               $(NETCAT) -z localhost $(TEST_SERVER_PORT); \
               if test $$? -eq 0; then \
                 exit 0; \
               fi; \
               $(SLEEP) 10; \
             done; \
            ); \
            \
            : run client commands; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),VERSION); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STATUS); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ABORT commandId=1000); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_GET name=tmp-directory); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_SET name=tmp-directory value=/tmp); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_FLUSH); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEVICE_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ROOT_LIST allMounts=yes); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FILE_INFO name=data); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FILE_LIST directory=data); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FILE_ATTRIBUTE_GET name=data attribute=NOBACKUP); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DIRECTORY_INFO name=data timeouot=10); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),TEST_SCRIPT name=test script=date); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MASTER_GET); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MASTER_CLEAR); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MASTER_PAIRING_START); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MASTER_PAIRING_STOP pair=yes); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MASTER_PAIRING_STATUS); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MAINTENANCE_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MAINTENANCE_LIST_ADD date=*-*-* weekDays=* beginTime=07:00 endTime=10:00); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MAINTENANCE_LIST_UPDATE id=1 date=*-*-* weekDays=* beginTime=08:00 endTime=11:00); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MAINTENANCE_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MAINTENANCE_LIST_REMOVE id=1); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_ADD name='foo1' serverType=FILE port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_UPDATE id=1 name='foo' serverType=FILE port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_REMOVE id=1); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_ADD name='foo2' serverType=FTP port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_UPDATE id=1 name='foo' serverType=FTP port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_REMOVE id=1); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_ADD name='foo3' serverType=SSH port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_UPDATE id=1 name='foo' serverType=SSH port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_REMOVE id=1); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_ADD name='foo4' serverType=WEBDAV port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_UPDATE id=1 name='foo' serverType=WEBDAV port=0 loginName='test' password='test' publicKey='foo' privateKey='foo' maxConnectionCount=1 maxStorageSize=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST_REMOVE id=1); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_LIST) ; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_NEW name=$(TEST_JOB_NAME2) jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_INFO jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_GET jobUUID=$(TEST_JOB_UUID) name=UUID); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_ABORT jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_RESET jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MOUNT_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MOUNT_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_COMPRESS_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_COMPRESS_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SOURCE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SOURCE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_LIST_ADD jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID) archiveType=normal date=*-1-2 weekDays=* time=1:20 interval=300 beginTime=0:30 endTime=*:50 customText="test" testCreatedArchives=yes noStorage=yes enabled=no); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PERSISTENCE_LIST_ADD jobUUID=$(TEST_JOB_UUID) archiveType=normal minKeep=1 maxKeep=2 maxAge=3); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PERSISTENCE_LIST_CLEAR jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ARCHIVE_LIST name=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_GET jobUUID=$(TEST_JOB_UUID) name=archive-type); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-type value=continuous); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-name value=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-part-size value=100000); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) entryType=file pattern=data); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) pattern=$(BAR_STORAGE)/not_existing); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SOURCE_LIST_ADD jobUUID=$(TEST_JOB_UUID) pattern=data/zero1024.dat); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_COMPRESS_LIST_ADD jobUUID=$(TEST_JOB_UUID) pattern=data/zero1024.dat); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_LIST_ADD jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID) archiveType=continuous date=*-*-* weekDays=* time=*:* interval=60 beginTime=0:30 endTime=*:50 customText="test" testCreatedArchives=yes noStorage=yes enabled=yes); \
            $(SLEEP) 10; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_OPTION_GET jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID) name=enabled); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_OPTION_SET jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID) name=enabled value=no); \
            $(SLEEP) 10; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) scheduleUUID=$(TEST_SCHEDULE_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_COMPRESS_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) id=1); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SOURCE_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) id=1); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) id=1); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST_REMOVE jobUUID=$(TEST_JOB_UUID) id=1); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MAINTENANCE time=600); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=create); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=CREATE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=STORAGE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=RESTORE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=INDEX_UPDATE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=INDEX_MAINTENANCE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=ALL); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND modeMask=CREATE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND modeMask=STORAGE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND modeMask=RESTORE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND modeMask=INDEX_UPDATE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND modeMask=INDEX_MAINTENANCE); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SUSPEND modeMask=ALL); \
            $(SLEEP) 2; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),CONTINUE); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DECRYPT_PASSWORD_CLEAR); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DECRYPT_PASSWORD_ADD encryptType=NONE encryptedPassword=74657374); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FTP_PASSWORD encryptType=NONE encryptedPassword=74657374); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SSH_PASSWORD encryptType=NONE encryptedPassword=74657374); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),WEBDAV_PASSWORD encryptType=NONE encryptedPassword=74657374); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),CRYPT_PASSWORD jobUUID=$(TEST_JOB_UUID) encryptType=NONE encryptedPassword=74657374); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PASSWORDS_CLEAR); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_DELETE jobUUID=$(TEST_JOB_UUID)); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST_ADD storageIds=1$(COMMA)2$(COMMA)3); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST_CLEAR); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST_ADD entryIds=1$(COMMA)2$(COMMA)3); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST_CLEAR); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_ADD pattern=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            $(SLEEP) 2; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_INFO); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_UUID_LIST indexStateSet='*' indexModeSet='*' name='*'); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTITY_LIST indexStateSet='*' indexModeSet='*' name='*'); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST_INFO name='*' indexStateSet='*' indexModeSet='*'); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST_INFO name='test*' indexStateSet='*' indexModeSet='*'); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST name='*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST name='test*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST_INFO name='*' indexType='*' newestOnly=yes); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST_INFO name='test*' indexType='*' newestOnly=yes); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST name='*' indexType='*' newestOnly=yes offset=0 limit=100); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST name='test*' indexType='*' newestOnly=yes offset=0 limit=100); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_HISTORY_LIST); \
            \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_NEW name=$(TEST_JOB_NAME2) jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) archive-type=continous); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-name value=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-type value=normal); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-file-mode value=overwrite); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),INCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) entryType=file pattern=data); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),INCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) entryType=image pattern=$(LOOP0)); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_FLUSH); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEVICE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ROOT_LIST jobUUID=$(TEST_JOB_UUID) allMounts=yes); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FILE_INFO jobUUID=$(TEST_JOB_UUID) name=data); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),INCLUDE_LIST jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_START jobUUID=$(TEST_JOB_UUID) archiveType=normal); \
            (for i in `$(SEQ) 1 12`; do \
               $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
               $(SLEEP) 10; \
             done; \
            ); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_ABORT jobUUID=$(TEST_JOB_UUID)); \
            (for i in `$(SEQ) 1 6`; do \
               $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
               $(SLEEP) 10; \
             done; \
            ); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_DELETE jobUUID=$(TEST_JOB_UUID)); \
            \
            $(SLEEP) 2; \
            \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_PRINT_STATISTICS); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_PRINT_MEMORY_INFO); \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_DUMP_MEMORY_INFO); \
            \
            : done; \
            $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),QUIT); \
          ) $(LOG); \
        else \
          $(ECHO) Warning: skipped $@ - BAR with debug functions required; \
        fi

test_server_operations_socket: \
  $(TEST_BAR) \
  $(TEST_FILES) \
  parallel@EXEEXT@
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	# create test archive, test device
	@$(call functionCleanTestFiles)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) -C $(SUB_DIR) -c $(BAR_STORAGE)/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=0 $(LOG))
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	@$(call functionTestDeviceReset)
	$(call functionCreateFileZero,$(IMAGE0),32,1M)
	$(call functionTestDeviceCreate,$(LOOP0),$(IMAGE0))
endif
	@#
	$(KILLALL) -w -9 $(shell basename $(call functionExec,$(TEST_BAR))) || true
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) ./parallel@EXEEXT@ \
          "$(MAKE) test_server_operations_socket_server" \
          "$(MAKE) test_server_operations_socket_client"
	$(call functionWaitProcess,$(TEST_SERVER_PID_FILE),60)
	@#
ifeq ($(TEST_IMAGE_OPERATIONS),yes)
	$(call functionTestDeviceDelete,$(LOOP0))
	$(RMF) $(IMAGE0)
endif
	$(RMF) $(BAR_STORAGE)/$(BAR_FILE).bar
	#TODO@$(call functionDoneTestFiles)
	ps auxw|grep bar-debug
	$(call functionDoneTestFiles)

.PHONY: test_master_slave_operations_master test_master_slave_operations_slave test_master_slave_operations_create test_master_slave_operations
test_master_slave_operations_master: \
  $(TEST_BAR) \
  $(TEST_MASTER_CONFIG) \
  $(TEST_MASTER_JOBS_DIRECTORY)
	@$(call functionVerifyParameter,TEST_MASTER_DIRECTORY)
	@$(call functionVerifyParameter,TEST_MASTER_JOBS_DIRECTORY)
	@$(call functionVerifyParameter,TEST_JOB_NAME2)
	@$(call functionVerifyParameter,TEST_MASTER_CONFIG)
	@$(call functionVerifyParameter,TEST_MASTER_PID_FILE)
	@$(call functionVerifyParameter,TEST_MASTER_DATABASE)
	@$(call functionVerifyParameter,TEST_MASTER_LOG_FILE)
	@#
	$(TEST_BAR) --debug-server 1>/dev/null 2>/dev/null; \
          if test $$? -eq 0; then \
          ( \
            $(RMF) $(TEST_MASTER_JOBS_DIRECTORY)/$(TEST_JOB_NAME2); \
            $(CD) $(UP_DIR); \
            $(ULIMIT) -Sv $(MEMORY_LIMIT); \
            \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_MASTER_DIRECTORY); \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_MASTER_JOBS_DIRECTORY); \
            $(INSTALL) -m 600 bar.cfg $(SUB_DIR)/$(TEST_MASTER_CONFIG); \
            $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
              -C $(SUB_DIR) \
              $(TEST_OPTIONS) \
              --config=$(TEST_MASTER_CONFIG) \
              --server \
              --pid-file=$(TEST_MASTER_PID_FILE) \
              --server-mode=master \
              --server-port=$(TEST_MASTER_PORT) \
              --index-database=sqlite:$(TEST_MASTER_DATABASE) \
              --jobs-directory=$(TEST_MASTER_JOBS_DIRECTORY) \
              --log-file=$(TEST_MASTER_LOG_FILE) \
              --log=all \
              --max-threads=1 \
              --debug-server \
              --debug-server-fixed-ids \
              $(ADDITIONAL_OPTIONS); \
            if test $$? -eq 0; then \
              $(SLEEP) 10; \
            else \
              exit 1; \
            fi; \
          ) $(LOG); \
          $(ECHO) Master server started; \
        else \
          $(ECHO) Warning: skipped $@ - BAR with debug functions required; \
        fi

test_master_slave_operations_slave: \
  $(TEST_BAR) \
  $(TEST_SLAVE_CONFIG) \
  $(TEST_SLAVE_JOBS_DIRECTORY) \
  $(TEST_FILES)
	@$(call functionVerifyParameter,TEST_SLAVE_DIRECTORY)
	@$(call functionVerifyParameter,TEST_SLAVE_JOBS_DIRECTORY)
	@$(call functionVerifyParameter,TEST_SLAVE_CONFIG)
	@$(call functionVerifyParameter,TEST_JOB_NAME2)
	@$(call functionVerifyParameter,TEST_SLAVE_PID_FILE)
	@$(call functionVerifyParameter,TEST_SLAVE_PORT)
	@$(call functionVerifyParameter,TEST_SLAVE_LOG_FILE)
	@#
	$(TEST_BAR) --debug-server 1>/dev/null 2>/dev/null; \
          if test $$? -eq 0; then \
          ( \
            $(CD) $(UP_DIR); \
            $(ULIMIT) -Sv $(MEMORY_LIMIT); \
            \
            if test -n "$(TEST_SLAVE_HOST)"; then \
              $(call functionSlaveExecute,$(KILLALL) -w -9 $(call functionExec,$(TEST_BAR)) 2>/dev/null) || true; \
              $(call functionSlaveCopy,$(call functionExec,$(TEST_BAR)),$(call functionExec,$(TEST_BAR))); \
              $(call functionSlaveExecute,$(INSTALL) -d $(TEST_SLAVE_DIRECTORY)); \
              $(call functionSlaveExecute,$(INSTALL) -d $(TEST_SLAVE_JOBS_DIRECTORY)); \
              $(call functionSlaveCopy,bar.cfg,$(TEST_SLAVE_CONFIG)); \
              $(call functionSlaveExecute,$(RMF) $(TEST_SLAVE_JOBS_DIRECTORY)/$(TEST_JOB_NAME2)); \
              $(call functionSlaveExecute,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
                -C $(SUB_DIR) \
                $(TEST_OPTIONS) \
                --config=$(TEST_SLAVE_CONFIG) \
                --server \
                --pid-file=$(TEST_SLAVE_PID_FILE) \
                --server-mode=slave \
                --server-port=$(TEST_SLAVE_PORT) \
                --index-database=sqlite:$(TEST_SLAVE_DATABASE) \
                --jobs-directory=$(TEST_SLAVE_JOBS_DIRECTORY) \
                --log-file=$(TEST_SLAVE_LOG_FILE) \
                --log-post-command="cat %file" \
                --log=all \
                --max-threads=1 \
                --debug-server \
                --debug-server-fixed-ids \
                $(ADDITIONAL_OPTIONS); \
              ); \
            else \
              $(INSTALL) -d $(SUB_DIR)/$(TEST_SLAVE_DIRECTORY); \
              $(INSTALL) -d $(SUB_DIR)/$(TEST_SLAVE_JOBS_DIRECTORY); \
              $(INSTALL) -m 600 bar.cfg $(SUB_DIR)/$(TEST_SLAVE_CONFIG); \
              $(RMF) $(TEST_SLAVE_JOBS_DIRECTORY)/$(TEST_JOB_NAME2); \
              $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(call functionExec,$(TEST_BAR)) \
                -C $(SUB_DIR) \
                $(TEST_OPTIONS) \
                --no-default-config --config=$(TEST_SLAVE_CONFIG) \
                --server \
                --pid-file=$(TEST_SLAVE_PID_FILE) \
                --server-mode=slave \
                --server-port=$(TEST_SLAVE_PORT) \
                --index-database=sqlite:$(TEST_SLAVE_DATABASE) \
                --jobs-directory=$(TEST_SLAVE_JOBS_DIRECTORY) \
                --log-file=$(TEST_SLAVE_LOG_FILE) \
                --log-post-command="cat %file" \
                --log=all \
                --max-threads=1 \
                --debug-server \
                --debug-server-fixed-ids \
                $(ADDITIONAL_OPTIONS); \
            fi; \
            if test $$? -eq 0; then \
              $(SLEEP) 10; \
            else \
              exit 1; \
            fi; \
          ) $(LOG); \
          $(ECHO) Slave server started; \
        else \
          $(ECHO) Warning: skipped $@ - BAR with debug functions required; \
        fi

test_master_slave_operations_create: \
  $(TEST_BAR)
	@$(call functionVerifyParameter,BAR_STORAGE)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,TEST_MASTER_PORT)
	@$(call functionVerifyParameter,TEST_JOB_NAME2)
	@$(call functionVerifyParameter,TEST_JOB_UUID)
	@#
	@$(call functionCleanTestFiles)
	@#
	$(TEST_BAR) --debug-server 1>/dev/null 2>/dev/null; \
          if test $$? -eq 0; then \
          ( \
            : wait for master; \
            (for i in `$(SEQ) 1 6`; do \
               $(NETCAT) -z localhost $(TEST_MASTER_PORT); \
               if test $$? -eq 0; then \
                 exit 0; \
               fi; \
               $(SLEEP) 10; \
             done; \
            ); \
            \
            : create slave job; \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_NEW name=$(TEST_JOB_NAME2) jobUUID=$(TEST_JOB_UUID)); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=remote-host-name value=localhost); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=remote-host-port value=$(TEST_SLAVE_PORT)); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-name value=$(BAR_STORAGE)/$(BAR_FILE).bar); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-type value=normal); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_OPTION_SET jobUUID=$(TEST_JOB_UUID) name=archive-file-mode value=overwrite); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),INCLUDE_LIST_ADD jobUUID=$(TEST_JOB_UUID) entryType=file pattern=data); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_FLUSH); \
            : wait for pairing; \
            (for i in `$(SEQ) 1 18`; do \
               if test -n "`$(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_LIST)|$(GREP) slaveState='PAIRED'`"; then \
                 exit 0; \
               fi; \
               $(SLEEP) 10; \
             done; \
            ); \
            \
            : run slave job; \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_START jobUUID=$(TEST_JOB_UUID) archiveType=normal); \
            (for i in `$(SEQ) 1 12`; do \
               $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
               $(SLEEP) 10; \
             done; \
            ); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_ABORT jobUUID=$(TEST_JOB_UUID)); \
            (for i in `$(SEQ) 1 6`; do \
               $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_STATUS jobUUID=$(TEST_JOB_UUID)); \
               $(SLEEP) 10; \
             done; \
            ); \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),JOB_DELETE jobUUID=$(TEST_JOB_UUID)); \
            \
            : done; \
            $(call functionServerCommandSocket,localhost $(TEST_MASTER_PORT),QUIT); \
            $(call functionSlaveCommandSocket, localhost $(TEST_SLAVE_PORT), QUIT); \
          ) $(LOG); \
        else \
          $(ECHO) Warning: skipped $@ - BAR with debug functions required; \
        fi
	@#
	@$(call functionDoneTestFiles)

test_master_slave_operations: \
  $(TEST_BAR) \
  parallel@EXEEXT@
	@$(call functionCleanTestFiles)
	@#
	@$(KILLALL) -w -9 $(shell basename $(call functionExec,$(TEST_BAR))) 2>/dev/null || true
	ls -la /home/test/intermediate
	ls -la /home/test/intermediate/master
	ls -la /home/test/intermediate/slave
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) ./parallel@EXEEXT@ \
          "$(MAKE) test_master_slave_operations_master" \
          "$(MAKE) test_master_slave_operations_slave" \
          "$(MAKE) test_master_slave_operations_create"
	@$(call functionDoneTestFiles)

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist: \
  $(TEST_FILES)
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/bar/$(TEST_DATA_DIR)
	$(INSTALL) -m 664 Makefile.in \
                          $(DIRECTORY)/bar/$(TEST_DATA_DIR)
	$(INSTALL) -d $(DIRECTORY)/bar/$(TEST_DATA_DIR)/data
	$(INSTALL) -m 664 data/zero.dat \
                          data/zero128.dat \
                          data/zero1024.dat \
                          data/zero512k.dat \
                          data/random128.dat \
                          data/random1024.dat \
                          data/random512k.dat \
                          data/zero-random512k.dat \
                          data/smallfile.dat \
                          $(DIRECTORY)/bar/$(TEST_DATA_DIR)/data
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

# end of file
