#
# $Revision: 7471 $
# $Date: 2017-06-03 11:09:42 +0200 (Sat, 03 Jun 2017) $
# $Author: torsten $
# Contents: Makefile for testing bar
# Systems: all
#
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM                = @PLATFORM@

VALGRIND_ERROR_EXITCODE = 123
TESTCODE_EXITCODE       = 124

#------------------------------------ paths ----------------------------------

BASE_DIR      = $(CURDIR)
BAR_DIR       = $(CURDIR)/..
SUB_DIR       = $(subst $(abspath $(BAR_DIR))/,,$(abspath $(BASE_DIR)))
UP_DIR        = $(subst $() $(),/,$(foreach i,$(subst /,$() $(),$(SUB_DIR)),..))

TEST_DATA_DIR ?= test

#--------------------------------- tool chain --------------------------------

# shell in Makefile must be bash
SHELL = bash

#------------------------------- test commands--------------------------------

# test bar executables
TEST_BAR          ?= $(BAR_DIR)/bar@EXEEXT@
TEST_BAR_DEBUG    ?= $(BAR_DIR)/bar-debug@EXEEXT@
TEST_BAR_GCOV     ?= $(BAR_DIR)/bar-gcov@EXEEXT@
TEST_BAR_GPROF    ?= $(BAR_DIR)/bar-gprof@EXEEXT@
TEST_BAR_VALGRIND ?= $(BAR_DIR)/bar-valgrind@EXEEXT@
TEST_BAR_SQLITE3  ?= $(BAR_DIR)/bar-sqlite3@EXEEXT@
TEST_DESTROYER    ?= $(BAR_DIR)/destroyer@EXEEXT@

#---------------------------------- commands----------------------------------

ATTR           = @ATTR@
BC             = bc
BZIP2          = bzip2
CAT            = cat
CD             = cd
CHATTR         = chattr
CHMOD          = chmod
CP             = cp
CUT            = cut
DD             = dd
DDD            = ddd
DIFF           = diff
ECHO           = echo
ECHO_NO_LF     = echo -n
FIND           = find
GREP           = grep
GETFATTR       = @GETFATTR@
HEAD           = head
INSTALL        = @INSTALL@
KILL           = kill
KILLALL        = killall
LN             = ln
LS             = ls
MKDIR          = mkdir
MKFIFO         = mkfifo
MKTEMP         = mktemp
NETCAT         = netcat
PERL           = @PERL@
READLINK       = readlink
RMDIR          = rmdir
RMF            = rm -f
RMRF           = rm -rf
SCP            = scp
SED            = sed
SETFATTR       = @SETFATTR@
SLEEP          = sleep
SSH            = ssh
SSHPASS        = sshpass
SORT           = sort
STAT           = stat
TAIL           = tail
TAR            = tar
TEE            = tee
TIME           = @TIME@
TIMEOUT        = timeout
TOUCH          = touch
ULIMIT         = ulimit
WC             = wc
XARGS          = xargs

# for tests only (create test devices)
FSCK           = fsck
LOSETUP        = /sbin/losetup
MKFS           = /sbin/mkfs
MOUNT          = /bin/mount
UMOUNT         = /bin/umount
SUDO           = sudo

LCOV           = lcov
GENHTML        = genhtml

VALGRIND       = valgrind
VALGRIND_FLAGS = --gen-suppressions=no --track-fds=yes --suppressions=$(BAR_DIR)/valgrind.supp --error-exitcode=$(VALGRIND_ERROR_EXITCODE)

#------------------------ specific variables/settings ------------------------

# quiet (no output)
QUIET ?=

# logfile
LOGFILE ?=

# supported compress algorithms
ifeq ($(COMPRESS_NAMES),)
  COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9
  ifeq ($(COMPRESS_NAMES_BZIP),)
    ifeq (@HAVE_BZ2@,1)
      COMPRESS_NAMES += bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_BZIP)
  endif
  ifeq ($(COMPRESS_NAMES_LZMA),)
    ifeq (@HAVE_LZMA@,1)
      COMPRESS_NAMES += lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_LZMA)
  endif
  ifeq ($(COMPRESS_NAMES_LZO),)
    ifeq (@HAVE_LZO@,1)
      COMPRESS_NAMES += lzo1 lzo2 lzo3 lzo4 lzo5
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_LZO)
  endif
  ifeq ($(COMPRESS_NAMES_LZ4),)
    ifeq (@HAVE_LZ4@,1)
      COMPRESS_NAMES += lz4-0 lz4-1 lz4-9
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_LZ4)
  endif
  ifeq ($(COMPRESS_NAMES_ZSTD),)
    ifeq (@HAVE_ZSTD@,1)
      COMPRESS_NAMES += zstd0 zstd9 zstd19
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_ZSTD)
  endif
endif

ifeq ($(COMPRESS_NAMES_HUGE),)
  COMPRESS_NAMES_HUGE = none zip9
  ifeq (@HAVE_LZMA@,1)
    COMPRESS_NAMES_HUGE += lzma9
  endif
  ifeq (@HAVE_LZO@,1)
    COMPRESS_NAMES_HUGE += lzo5
  endif
  ifeq (@HAVE_LZ4@,1)
    COMPRESS_NAMES_HUGE += lz4-16
  endif
endif

# supported crypt algorithms
CRYPT_NAMES  = none
ifeq (@HAVE_GCRYPT@,1)
CRYPT_NAMES  += 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256 SERPENT128 SERPENT192 SERPENT256 CAMELLIA128 CAMELLIA192 CAMELLIA256
endif

# SQLite flags
SQLITE_FLAGS = $(if @HAVE_USLEEP@,-DHAVE_USLEEP=1) -DSQLITE_DEFAULT_FILE_PERMISSIONS=0600 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT $(if @HAVE_ICU@,-DSQLITE_ENABLE_ICU)
#-DSQLITE_DEBUG -DSQLITE_LOCK_TRACE

# xdelta3 flags
XDELTA3_FLAGS =

# additional options
OPTIONS ?=

# image types used for tests
TEST_IMAGE_OPERATIONS = test_image_operations

# test settings
TEST_CONFIG                      = intermediate/bar.cfg
TEST_JOBS_DIRECTORY              = intermediate/jobs
TEST_KEY_CRYPT                   = intermediate/key-crypt
TEST_KEY_CRYPT_PUBLIC            = intermediate/key-crypt.public
TEST_KEY_CRYPT_PRIVATE           = intermediate/key-crypt.private
TEST_KEY_CRYPT_OTHER_PUBLIC      = intermediate/key-crypt-other.public
TEST_KEY_CRYPT_OTHER_PRIVATE     = intermediate/key-crypt-other.private
TEST_KEY_SIGNATURE               = intermediate/key-signature
TEST_KEY_SIGNATURE_PUBLIC        = intermediate/key-signature.public
TEST_KEY_SIGNATURE_PRIVATE       = intermediate/key-signature.private
TEST_KEY_SIGNATURE_OTHER_PUBLIC  = intermediate/key-signature-other.public
TEST_KEY_SIGNATURE_OTHER_PRIVATE = intermediate/key-signature-other.private

TEST_SERVER_PORT                 = 39909
TEST_SERVER_SSL_PORT             = 39910
TEST_SERVER_DIRECTORY            = intermediate/master
TEST_SERVER_CONFIG               = $(TEST_SERVER_DIRECTORY)/bar.cfg
TEST_SERVER_PID_FILE             = $(TEST_SERVER_DIRECTORY)/barserver.pid
TEST_SERVER_JOBS_DIRECTORY       = $(TEST_SERVER_DIRECTORY)/jobs
TEST_SERVER_DATABASE             = $(TEST_SERVER_DIRECTORY)/index.db
TEST_SERVER_CONTINUOUS_DATABASE  = $(TEST_SERVER_DIRECTORY)/continuous.db
TEST_SERVER_LOG_FILE             = $(TEST_SERVER_DIRECTORY)/bar.log

# hosts, ports, passwords, keys for tests
TEST_HOST                        ?= localhost
TEST_LOGIN_NAME                  ?= $(LOGNAME)
TEST_PASSWORD                    =

TEST_HOST_FTP                    ?= $(TEST_HOST)
TEST_LOGIN_NAME_FTP              ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_FTP                ?= $(TEST_PASSWORD)

TEST_HOST_SSH                    ?= $(TEST_HOST)
TEST_PORT_SSH                    ?= 22
TEST_LOGIN_NAME_SSH              ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_SSH                ?= $(TEST_PASSWORD)
TEST_PUBLIC_KEY_SSH              =  $(HOME)/.ssh/id_rsa.pub
TEST_PRIVATE_KEY_SSH             =  $(HOME)/.ssh/id_rsa

TEST_HOST_SCP                    ?= $(TEST_HOST)
TEST_PORT_SCP                    ?= 22
TEST_LOGIN_NAME_SCP              ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_SCP                ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SCP              =  $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SCP             =  $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_SFTP                   ?= $(TEST_HOST)
TEST_PORT_SFTP                   ?= 22
TEST_LOGIN_NAME_SFTP             ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_SFTP               ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SFTP             =  $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SFTP            =  $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_WEBDAV                 ?= $(TEST_HOST)/webdav
TEST_LOGIN_NAME_WEBDAV           ?= $(TEST_LOGIN_NAME)
TEST_PASSWORD_WEBDAV             ?= $(TEST_PASSWORD)

TEST_PASSWORD_CRYPT              =  Franz_Kafka:Die_Verwandlung
TEST_PASSWORD_CRYPT_OTHER        =  Heinrich_BÃ¶ll:Ansichten_eines_Clown

TEST_SLAVE_HOST                  =
TEST_SLAVE_PORT                  = 39911
TEST_SLAVE_USERNAME              ?= test
TEST_SLAVE_PASSWORD              ?= test
TEST_SLAVE_DIRECTORY             = intermediate/slave
TEST_SLAVE_CONFIG                = $(TEST_SLAVE_DIRECTORY)/bar.cfg
TEST_SLAVE_PID_FILE              = $(TEST_SLAVE_DIRECTORY)/barserver.pid
TEST_SLAVE_JOBS                  = $(TEST_SLAVE_DIRECTORY)/jobs
TEST_SLAVE_DATABASE              = $(TEST_SLAVE_DIRECTORY)/index.db
TEST_SLAVE_LOG_FILE              = $(TEST_SLAVE_DIRECTORY)/bar.log

# crypt/compress used for all-test (do not select all available compress and
# crypt algorithms, because this would take a long time)
TEST_COMBINED_COMPRESS_NAMES=zip9
ifeq (@HAVE_BZ2@,1)
TEST_COMBINED_COMPRESS_NAMES += bzip9
endif
ifeq (@HAVE_LZMA@,1)
TEST_COMBINED_COMPRESS_NAMES += lzma9
endif
TEST_COMBINED_CRYPT_NAMES=none
ifeq (@HAVE_GCRYPT@,1)
TEST_COMBINED_CRYPT_NAMES += AES256
endif

# for tests only
LOOP0          = /dev/loop0
LOOP1          = /dev/loop1
DEVICE_ZERO    = /dev/zero
DEVICE_RANDOM  = /dev/urandom

# memory limits for tests
MEMORY_LIMIT     = $(shell $(ECHO) 10*1024*1024|$(BC))    # 10G
MEMORY_LIMIT_LOW = $(shell $(ECHO) 70*1024|$(BC))         # 50M

#---------------------------------- rules ------------------------------------

# source search paths

#--------------------------------- objects -----------------------------------

TARGETS              =

#------------------------------ dependencies ---------------------------------

# default target
.PHONY: all clean distclean depend
all: $(TARGETS)

# clean
clean:
ifeq (@HAVE_SUDO_COMMAND_CHATTR_A@,1)
	-$(SUDO) -n $(CHATTR) -a data/append-only.dat 2>/dev/null
endif
ifeq (@HAVE_SUDO_COMMAND_CHATTR_I@,1)
	-$(SUDO) -n $(CHATTR) -i data/immutable.dat 2>/dev/null
endif
	$(RMRF) data
	$(RMRF) restore
	$(RMRF) intermediate

distclean: \
  clean
	$(RMF) Makefile

# help
.PHONY: help help_outout
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(MAKE) help_output

help_output:
	@$(ECHO) "  test[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test1[-debug|-gcov|-gprof|-valgrind], test_basic[-debug|-valgrind]"
	@$(ECHO) "  test2[-debug|-gcov|-gprof|-valgrind], test_compress[-debug], test_delta_compress[-debug|-valgrind]"
	@$(ECHO) "  test3[-debug|-gcov|-gprof|-valgrind], test_crypt[-debug|-valgrind]"
	@$(ECHO) "  test4[-debug|-gcov|-gprof|-valgrind], test_asymmetric_crypt[-debug|-valgrind]"
	@$(ECHO) "  test5[-debug|-gcov|-gprof|-valgrind], test_signatures[-debug|-valgrind]"
	@$(ECHO) "  test6[-debug|-gcov|-gprof|-valgrind], test_split[-debug|-valgrind]"
	@$(ECHO) "  test7[-debug|-gcov|-gprof|-valgrind], test_convert[-debug|-valgrind]"
	@$(ECHO) "  test8[-debug|-gcov|-gprof|-valgrind], test_image[-debug|-valgrind]"
	@$(ECHO) "  test9[-debug|-gcov|-gprof|-valgrind], test_storage[-debug|-valgrind]"
	@$(ECHO) "  test_storage_(file|ftp|scp|sftp|webdav)[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test10[-debug|-valgrind], test_hugefiles[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test11[-debug|-valgrind], test_dvd[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test12[-debug|-valgrind], test_server[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test13[-debug|-valgrind], test_master_slave[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test13_master[-debug|-valgrind], test_master[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test13_slave[-debug|-valgrind], test_slave[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test_combined[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test_arguments[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test_misc[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test_all[-debug|-gcov|-gprof|-valgrind]"
	@$(ECHO) "  test_data"
	@$(ECHO) "  test_hugedata"
	@$(ECHO) "  test_data_clean"
	@$(ECHO) "  test_data_dist_clean"
	@$(ECHO) ""
	@$(ECHO) "  test_file_operations"
	@$(ECHO) "  test_file_operations_dryrun"
	@$(ECHO) ""
	@$(ECHO) "  test_image_operations"
	@$(ECHO) "  test_image_operations_raw"
	@$(ECHO) "  test_image_operations_ext"
	@$(ECHO) "  test_image_operations_ext(2|3|4)"
	@$(ECHO) "  test_image_operations_fat"
	@$(ECHO) "  test_image_operations_fat(12|16|32)"
	@$(ECHO) "  test_image_operations_reiser"
	@$(ECHO) "  test_image_operations_reiser(fs3)"
	@$(ECHO) "  test_image_operations_dryrun"
	@$(ECHO) ""
	@$(ECHO) "  test_keys"
	@$(ECHO) "  test_keys_clean"
	@$(ECHO) "  test_keys_distclean"
	@$(ECHO) ""
	@$(ECHO) "Variables:"
	@$(ECHO) "  COMPRESS_NAMES"
        ifeq (@HAVE_BZ2@,1)
	@$(ECHO) "    bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9"
        endif
        ifeq (@HAVE_LZMA@,1)
	@$(ECHO) "    lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9"
        endif
        ifeq (@HAVE_LZO@,1)
	@$(ECHO) "    lzo1 lzo2 lzo3 lzo4 lzo5"
        endif
        ifeq (@HAVE_LZ4@,1)
	@$(ECHO) "    lz4-0 lz4-1 lz4-2 lz4-3 lz4-4 lz4-5 lz4-6 lz4-7 lz4-8 lz4-9"
        endif
        ifeq (@HAVE_ZSTD@,1)
	@$(ECHO) "    zstd0 zstd1 zstd2 zstd3 zstd4 zstd5 zstd6 zstd7 zstd8 zstd9 zstd10 zstd11 zstd12 zstd13 zstd14 zstd15 zstd16 zstd17 zstd18 zstd19"
        endif
	@$(ECHO) "  CRYPT_NAMES"
        ifeq (@HAVE_GCRYPT@,1)
	@$(ECHO) "    3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256 SERPENT128 SERPENT192 SERPENT256 CAMELLIA128 CAMELLIA192 CAMELLIA256"
        endif



# ----------------------------------------------------------------------------

.PHONY: $(BAR_DIR)/bar@EXEEXT@
$(BAR_DIR)/bar@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

.PHONY: $(BAR_DIR)/bar-debug@EXEEXT@
$(BAR_DIR)/bar-debug@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

.PHONY: $(BAR_DIR)/bar-gcov@EXEEXT@
$(BAR_DIR)/bar-gcov@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

.PHONY: $(BAR_DIR)/bar-gprof@EXEEXT@
$(BAR_DIR)/bar-gprof@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

.PHONY: $(BAR_DIR)/bar-valgrind@EXEEXT@
$(BAR_DIR)/bar-valgrind@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

.PHONY: $(BAR_DIR)/bar-sqlite3@EXEEXT@
$(BAR_DIR)/bar-sqlite3@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

.PHONY: $(BAR_DIR)/destroyer@EXEEXT@
$(BAR_DIR)/destroyer@EXEEXT@:
	$(MAKE) -C $(@D) $(@F)

# ----------------------------------------------------------------------------

COLUMNS := $(shell tput cols)

# log redirection
LOG = $(if $(QUIET),</dev/null) $(if $(LOGFILE),| $(TEE) -a $(LOGFILE)) $(if $(QUIET),1>/dev/null)

# helper function to output a info line
functionInfo = $(ECHO) `$(ECHO) "--- $1 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" | $(HEAD) -c $(COLUMNS)` $(if $(QUIET),1>/dev/null)

# helper function to check valid exitcode
# call functionTestCheckExitcode,<min. valid exitcode>,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $3 2>/dev/null; if test $$? -lt $1 -o $$? -gt $2; then false; fi

# helper functions for slave tests
functionSlaveExecute = \
  $(SSHPASS) -p $(TEST_SLAVE_PASSWORD) $(SSH) $(TEST_SLAVE_USERNAME)@$(TEST_SLAVE_HOST) "$1"
functionSlaveCopy = \
  $(SSHPASS) -p $(TEST_SLAVE_PASSWORD) $(SCP) $1 $(TEST_SLAVE_USERNAME)@$(TEST_SLAVE_HOST):$2

# do tests
#
# Tests:
#   create, list, test, compare, extract
#   with compression defined in COMPRESS_NAMES
#   with encryption defined in CRYPT_NAMES
#   asymmetric crypt
#   signature
#   splitting
#   convert
#   everything together
#   parameters and errors
#   images
#   dvd
#
# For special file and image tests some sudo-commands are required:
#  sudo chattr +i|-i <file>
#  sudo chattr +a|-a <file>
#  sudo losetup <loop device> <file>
#  sudo losetup -d <loop device>
#  sudo chmod o+rw <loop device>
#  sudo mkfs <options> <loop device>
#  sudo mount <loop device> test/dev
#  sudo umount <loop device>
#  sudo cp data test/dev
#  sudo dd <loop device> <file>
#  sudo diff -r <mount point> <mount point>

# test files
TEST_FILE_NAMES = \
  zero128.dat \
  zero1024.dat \
  zero512k.dat \
  random128.dat \
  random1024.dat \
  random512k.dat \
  zero-random512k.dat \
  zero.dat \
  readonly.dat \
  readonly512k.dat \
  unreadable.dat \
  smallfile.dat \
  sub_dir \
  sub_ignore_dir \
  linkdata.dat \
  link.dat \
  link_not_existing_file.dat \
  circular_link.dat.marker \
  hardlinkdata.dat \
  hardlink1.dat \
  hardlink2.dat \
  file400.dat \
  file640.dat \
  file644.dat \
  file664.dat \
  file666.dat \
  nodump.dat \
  fifo \
  name\'.dat \
  name\".dat \
  name\\.dat \
  name\\n.dat \
  name%d%f%s%p.dat \
  delta1/test.dat \
  delta2/test.dat
ifneq ($(ATTR)$(SETFATTR),)
TEST_FILE_NAMES += \
  extended_attribute.dat \
  sub_dir_extended_attribute \
  hardlink_extended_attribute.dat \
  hardlinkdata_extended_attribute.dat
endif
ifeq (@HAVE_SUDO_COMMAND_CHATTR_I@,1)
TEST_FILE_NAMES += \
  immutable.dat
endif
ifeq (@HAVE_SUDO_COMMAND_CHATTR_A@,1)
TEST_FILE_NAMES += \
  append-only.dat
endif

TEST_FILES = $(foreach z,$(TEST_FILE_NAMES),data/$z)

# huge test files
TEST_HUGEFILE_NAMES1 = \
  zero5G.dat \
  random5G.dat \

TEST_HUGEFILE_NAMES2 = \
  hardlinkdata512M.dat \
  hardlink512M1.dat \
  hardlink512M2.dat \

TEST_HUGEFILES1 = $(foreach z,$(TEST_HUGEFILE_NAMES1),data/$z)
TEST_HUGEFILES2 = $(foreach z,$(TEST_HUGEFILE_NAMES2),data/$z)
TEST_HUGEFILES  = $(TEST_HUGEFILES1) $(TEST_HUGEFILES2)

# temporary test files
TEST_FILES_CLEAN = \
  intermediate/*.bar \
  intermediate/*.bar_destroyed \
  intermediate/*.bid \
  intermediate/new \
  intermediate/*.image \
  intermediate/index.db \
  restore \
  intermediate/output.txt \

# test keys
TEST_KEYS = $(TEST_KEY_CRYPT_PUBLIC) \
            $(TEST_KEY_CRYPT_PRIVATE) \
            $(TEST_KEY_CRYPT_OTHER_PUBLIC) \
            $(TEST_KEY_CRYPT_OTHER_PRIVATE) \
            $(TEST_KEY_SIGNATURE_PUBLIC) \
            $(TEST_KEY_SIGNATURE_PRIVATE) \
            $(TEST_KEY_SIGNATURE_OTHER_PUBLIC) \
            $(TEST_KEY_SIGNATURE_OTHER_PRIVATE)

# default test options
TEST_OPTIONS = --no-default-config --config=$(CURDIR)/$(TEST_CONFIG) --jobs-directory=$(CURDIR)/$(TEST_JOBS_DIRECTORY)

# test environment variables
TEST_ENVIRONMENT = DISPLAY= SSH_ASKPASS=

# test timeout command (Note: older versions of the timeout command may not support --kill-after)
TEST_TIMEOUT = $(TIMEOUT) --signal=KILL 1200 $(TIMEOUT) --signal=ABRT 800 $(TIMEOUT) --signal=QUIT 600

.PHONY: test test_win
.PHONY: test-debug test_win-debug
.PHONY: test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11 test12 test13 test13_master test13_slave
.PHONY: test1-debug test2-debug test3-debug test4-debug test5-debug test6-debug test7-debug test8-debug test9-debug test10-debug test11-debug test12-debug test13-debug test13_master-debug test13_slave-debug
.PHONY: test1-gcov test2-gcov test3-gcov test4-gcov test5-gcov test6-gcov test7-gcov test8-gcov test9-gcov test10-gcov test11-gcov test12-gcov test13-gcov test13_master-gcov test13_slave-gcov
.PHONY: test1-gprof test2-gprof test3-gprof test4-gprof test5-gprof test6-gprof test7-gprof test8-gprof test9-gprof test10-gprof test11-gprof test12-gprof test13-gprof test13_master-gprof test13_slave-gprof
.PHONY: test1-valgrind test2-valgrind test3-valgrind test4-valgrind test5-valgrind test6-valgrind test7-valgrind test8-valgrind test9-valgrind test10-valgrind test11-valgrind test12-valgrind test13-valgrind test13_master-valgrind test13_slave-valgrind
.PHONY: test_basic test_compress test_crypt test_asymmetric_crypt test_signatures test_split test_convert test_image test_storage test_dvd test_combined test_server test_slave test_arguments test_misc
.PHONY: test_basic-debug test_compress-debug test_crypt-debug test_asymmetric_crypt-debug test_signatures-debug test_split-debug test_convert-debug test_image-debug test_storage-debug test_dvd-debug test_combined-debug test_server-debug test_slave-debug test_arguments-debug test_misc-debug
.PHONY: test_basic-gcov test_compress-gcov test_crypt-gcov test_asymmetric_crypt-gcov test_signatures-gcov test_split-gcov test_convert-gcov test_image-gcov test_storage-gcov test_dvd-gcov test_combined-gcov test_server-gcov test_slave-gcov test_arguments-gcov test_misc-gcov
.PHONY: test_basic-gprof test_compress-gprof test_crypt-gprof test_asymmetric_crypt-gprof test_signatures-gprof test_split-gprof test_convert-gprof test_image-gprof test_storage-gprof test_dvd-gprof test_combined-gprof test_server-gprof test_slave-gprof test_arguments-gprof test_misc-gprof
.PHONY: test_basic-valgrind test_compress-valgrind test_crypt-valgrind test_asymmetric_crypt-valgrind test_signatures-valgrind test_split-valgrind test_convert-valgrind test_image-valgrind test_storage-valgrind test_dvd-valgrind test_combined-valgrind test_server-valgrind test_slave-valgrind test_arguments-valgrind test_misc-valgrind
.PHONY: test_storage_file test_storage_ftp test_storage_scp test_storage_sftp test_storage_webdav
.PHONY: test_storage_file-debug test_storage_ftp-debug test_storage_scp-debug test_storage_sftp-debug test_storage_webdav-debug
.PHONY: test_storage_file-gcov test_storage_ftp-gcov test_storage_scp-gcov test_storage_sftp-gcov test_storage_webdav-gcov
.PHONY: test_storage_file-gprof test_storage_ftp-gprof test_storage_scp-gprof test_storage_sftp-gprof test_storage_webdav-gprof
.PHONY: test_storage_file-valgrind test_storage_ftp-valgrind test_storage_scp-valgrind test_storage_sftp-valgrind test_storage_webdav-valgrind
.PHONY: test_all test_all-debug test_all-gcov test_all-gprof test_all-valgrind
.PHONY: test_keys test_keys_clean test_keys_distclean
.PHONY: test_data test_data_clean test_data_distclean
test:
	@$(MAKE) QUIET=1 --no-print-directory -s \
          test_basic \
          test_compress \
          test_crypt \
          test_asymmetric_crypt \
          test_signatures \
          test_split \
          test_convert \
          test_image \
          test_combined \
          test_server \
          test_arguments \
          test_misc

test-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test

test-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test

test-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test

test-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_VALGRIND) test

test_win: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	$(TEST_BAR) -o -c c:\\tmp\\x.bar -# c:\\users\\torsten
	$(TEST_BAR) -L c:\\tmp\\x.bar

test-win-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test-win

test_keys: \
  $(TEST_KEYS)

test_keys_clean:
	$(RMF) $(TEST_KEYS)

test_data: \
  $(TEST_FILES)

test_hugedata: \
  $(TEST_HUGEFILES)

test_data_clean:
	$(RMRF) $(TEST_FILES_CLEAN)
	$(RMF)  $(TEST_CONFIG) $(TEST_SERVER_CONFIG)
	$(RMRF) $(TEST_JOBS_DIRECTORY)

test_data_dist_clean: \
  test_data_clean
	if test -f data/append-only.dat; then $(SUDO) -n $(CHATTR) -a data/append-only.dat; fi
	if test -f data/immutable.dat; then $(SUDO) -n $(CHATTR) -i data/immutable.dat; fi
	$(RMRF) data

test1 test_basic: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 1: basic..."
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=intermediate/index.db --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations \
          ;
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=intermediate/index.db --skip-verify-signatures $(OPTIONS)" \
          test_file_operations \
          ;
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=intermediate/index.db --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_dryrun \
          ;
	@$(ECHO) "ok"

test1-debug test_basic-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_basic

test1-gcov test_basic-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_basic

test1-gprof test_basic-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_basic

test1-valgrind test_basic-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_basic

test2 test_compress: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 2: compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test2-debug test_compress-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_compress

test2-gcov test_compress-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_compress

test2-gprof test_compress-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_compress

test2-valgrind test_compress-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_compress

test_delta_compress: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 2: delta compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress+xdelta9 --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress+xdelta9 --crypt-algorithm=none $(OPTIONS)" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test_delta_compress-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_delta_compress

test_delta_compress-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_delta_compress

test_delta_compress-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_delta_compress

test_delta_compress-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_delta_compress

test3 test_crypt: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 3: crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password='$(TEST_PASSWORD_CRYPT)' --skip-verify-signatures  --max-threads=1 $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

# multi-crypt
#	$(MAKE) \
#          BAR_FILE="test" \
#          BAR_PATTERN="test" \
#          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=3DES+CAST5+AES256+CAMELLIA256 --crypt-password='$(TEST_PASSWORD_CRYPT)' --max-threads=1 $(OPTIONS)" \
#          test_file_operations \
#          ;

test3-debug test_crypt-debug:  \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_crypt

test3-gcov test_crypt-gcov:  \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_crypt

test3-gprof test_crypt-gprof:  \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_crypt

test3-valgrind test_crypt-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_crypt

test4 test_asymmetric_crypt: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_KEYS)
	@$(ECHO_NO_LF) "Test 4: asymmetric crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures $(OPTIONS)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	# wrong public key
	for crypt in $(CRYPT_NAMES); do \
          if test ! $$crypt = "none"; then \
            $(RMF) intermediate/test.bar; \
            $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_OTHER_PUBLIC) --skip-verify-signatures -c intermediate/test.bar $(TEST_FILES); \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --skip-verify-signatures intermediate/test.bar); \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
          fi; \
        done
	@$(ECHO) "ok"

test4-debug test_asymmetric_crypt-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_asymmetric_crypt

test4-gcov test_asymmetric_crypt-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_asymmetric_crypt

test4-gprof test_asymmetric_crypt-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_asymmetric_crypt

test4-valgrind test_asymmetric_crypt-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_asymmetric_crypt

test5 test_signatures: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_KEYS)
	@$(ECHO_NO_LF) "Test 5: signatures..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --max-threads=1 $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) $(OPTIONS)" \
          test_file_operations_dryrun \
          ;
	# wrong signature key, no signature key
	@$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(TEST_OPTIONS) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) -c intermediate/test.bar $(TEST_FILES))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(TEST_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --info intermediate/test.bar))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(TEST_OPTIONS) --info --skip-verify-signatures intermediate/test.bar))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(TEST_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --info --force-verify-signatures intermediate/test.bar))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(TEST_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --info --force-verify-signatures intermediate/test.bar))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(TEST_OPTIONS) --info --force-verify-signatures intermediate/test.bar))
	@$(ECHO) "ok"

test5-debug test_signatures-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_signatures

test5-gcov test_signatures-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_signatures

test5-gprof test_signatures-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_signatures

test5-valgrind test_signatures-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_signatures

test6 test_split: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 6: split..."
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_dryrun \
          ;
	@$(ECHO) "ok"

test6-debug test_split-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_split

test6-gcov test_split-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_split

test6-gprof test_split-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_split

test6-valgrind test_split-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_split

test7 test_convert: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 7: convert..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --max-threads=1 $(OPTIONS)" \
          test_convert_operations \
          ;
	@$(ECHO) "ok"

test7-debug test_convert-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_convert

test7-gcov test_convert-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_convert

test7-gprof test_convert-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_convert

test7-valgrind test_convert-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_convert

test8 test_image: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 8: image..."
	for compress in none zip9; do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
            $(TEST_IMAGE_OPERATIONS) \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            $(TEST_IMAGE_OPERATIONS) \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test8-debug test_image-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_image

test8-gcov test_image-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_image

test8-gprof test_image-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_image

test8-valgrind test_image-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_image

test9 test_storage:
	@$(ECHO_NO_LF) "Test 9: storage..."
	@$(MAKE) test_storage_file \
	         test_storage_ftp \
	         test_storage_scp \
	         test_storage_sftp \
	         test_storage_webdav

test9-debug test_storage-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage

test9-gcov test_storage-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_storage

test9-gprof test_storage-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_storage

test9-valgrind test_storage-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage

test_storage_file: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	$(MAKE) \
          BAR_STORAGE="file://test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="file://test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="file://" \
          BAR_OPTIONS="$(TEST_OPTIONS) --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_directory_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="file://test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_directory_operations \
          ;
# delta test?

test_storage_file-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_file

test_storage_file-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_storage_file

test_storage_file-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_storage_file

test_storage_file-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_file

test_storage_ftp: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO) Info : TEST_HOST_FTP=$(TEST_HOST_FTP)
	@$(ECHO) Info : TEST_LOGIN_NAME_FTP=$(TEST_LOGIN_NAME_FTP)
	@$(call functionVerifyParameter,TEST_HOST_FTP,parameter TEST_HOST_FTP nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_PASSWORD_FTP,parameter TEST_PASSWORD_FTP nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' $(OPTIONS)" \
          test_directory_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/test" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ftp-login-name='$(TEST_LOGIN_NAME_FTP)' --ftp-password='$(TEST_PASSWORD_FTP)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_ftp-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_ftp

test_storage_ftp-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_storage_ftp

test_storage_ftp-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_storage_ftp

test_storage_ftp-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_ftp

test_storage_scp: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO) Info : TEST_HOST_SCP=$(TEST_HOST_SCP)
	@$(ECHO) Info : TEST_LOGIN_NAME_SCP=$(TEST_LOGIN_NAME_SCP)
	@$(call functionVerifyParameter,TEST_HOST_SCP,parameter TEST_HOST_SCP nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_PASSWORD_SCP,parameter TEST_PASSWORD_SCP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PUBLIC_KEY_SCP,parameter TEST_PUBLIC_KEY_SCP nor TEST_PUBLIC_KEY_SSH set)
	@$(call functionVerifyParameter,TEST_PRIVATE_KEY_SCP,parameter TEST_PRIVATE_KEY_SCP nor TEST_PRIVATE_KEY_SSH set)
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-public-key=$(TEST_PUBLIC_KEY_SCP) --ssh-private-key=$(TEST_PRIVATE_KEY_SCP) --ssh-login-name='$(TEST_LOGIN_NAME_SCP)' --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-public-key=$(TEST_PUBLIC_KEY_SCP) --ssh-private-key=$(TEST_PRIVATE_KEY_SCP) --ssh-login-name='$(TEST_LOGIN_NAME_SCP)' --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;

test_storage_scp-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_scp

test_storage_scp-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_storage_scp

test_storage_scp-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_storage_scp

test_storage_scp-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_scp

test_storage_sftp: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO) Info : TEST_HOST_SFTP=$(TEST_HOST_SFTP)
	@$(ECHO) Info : TEST_LOGIN_NAME_SFTP=$(TEST_LOGIN_NAME_SFTP)
	@$(call functionVerifyParameter,TEST_HOST_SFTP,parameter TEST_HOST_SFTP nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_PASSWORD_SFTP,parameter TEST_PASSWORD_SFTP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PUBLIC_KEY_SFTP,parameter TEST_PUBLIC_KEY_SFTP nor TEST_PUBLIC_KEY_SSH set)
	@$(call functionVerifyParameter,TEST_PRIVATE_KEY_SFTP,parameter TEST_PRIVATE_KEY_SFTP nor TEST_PRIVATE_KEY_SSH set)
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)'  --ssh-password='$(TEST_PASSWORD_SFTP)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' $(OPTIONS)" \
          test_directory_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/test" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-login-name='$(TEST_LOGIN_NAME_SFTP)' --ssh-password='$(TEST_PASSWORD_SFTP)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_sftp-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_sftp

test_storage_sftp-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_storage_sftp

test_storage_sftp-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_storage_sftp

test_storage_sftp-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_sftp

test_storage_webdav: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO) Info : TEST_HOST_WEBDAV=$(TEST_HOST_WEBDAV)
	@$(ECHO) Info : TEST_LOGIN_NAME_WEBDAV=$(TEST_LOGIN_NAME_WEBDAV)
	@$(call functionVerifyParameter,TEST_HOST_WEBDAV,parameter TEST_HOST_WEBDAV nor TEST_HOST set)
	@$(call functionVerifyParameter,TEST_PASSWORD_WEBDAV,parameter TEST_PASSWORD_WEBDAV nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' --skip-verify-signatures --max-threads=1 $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' --skip-verify-signatures $(OPTIONS)" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' $(OPTIONS)" \
          test_directory_operations \
          ;
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/test" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --webdav-login-name='$(TEST_LOGIN_NAME_WEBDAV)' --webdav-password='$(TEST_PASSWORD_WEBDAV)' $(OPTIONS)" \
          test_directory_operations \
          ;

test_storage_webdav-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_webdav

test_storage_webdav-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_storage_webdav

test_storage_webdav-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_storage_webdav

test_storage_webdav-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_webdav

test10 test_hugefiles: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 10: huge files..."
	for compress in $(COMPRESS_NAMES_HUGE); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
            test_hugefiles_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test10-debug test_hugefiles-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_hugefiles

test10-gcov test_hugefiles-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_hugefiles

test10-gprof test_hugefiles-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_hugefiles

test10-valgrind test_hugefiles-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_hugefiles

test11 test_dvd: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 11: dvd..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_dvd_operations \
          ;
	@$(ECHO) "ok"

test11-debug test_dvd-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_dvd

test11-gcov test_dvd-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_dvd

test11-gprof test_dvd-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_dvd

test11-valgrind test_dvd-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_dvd

test12 test_server: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 12: server..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --server-mode=master --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_server_operations \
          ;
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --server-mode=slave --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_server_operations \
          ;
	@$(ECHO) "ok"

test12-debug test_server-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_server

test12-gcov test_server-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_server

test12-gprof test_server-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_server

test12-valgrind test_server-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_server

test13: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 13: slave..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_master_slave_operations \
          ;
	@$(ECHO) "ok"

test13-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_slave

test13-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_slave

test13-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_slave

test13-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_slave

test13_master test_master: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 13: master..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_master_slave_operations_master \
          ;
	@$(ECHO) "ok"

test13_master-debug test_master-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_master

test13_master-gcov test_master-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_master

test13_master-gprof test_master-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_master

test13_master-valgrind test_master-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_master

test13_slave test_slave: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test 13: slave..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --skip-verify-signatures $(OPTIONS)" \
          test_master_slave_operations_slave \
          ;
	@$(ECHO) "ok"

test13_slave-debug test_slave-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_slave

test13_slave-gcov test_slave-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_slave

test13_slave-gprof test_slave-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_slave

test13_slave-valgrind test_slave-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_slave

test_combined: \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_JOBS_DIRECTORY)
	@$(ECHO_NO_LF) "Test combined..."
	for compress in $(TEST_COMBINED_COMPRESS_NAMES); do \
          for crypt in $(TEST_COMBINED_CRYPT_NAMES); do \
            $(MAKE) \
              BAR_FILE=test-### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --archive-part-size=100K $(OPTIONS)" \
              test_file_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            $(MAKE) \
              BAR_FILE=test-### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-type=asymmetric --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --archive-part-size=10M $(OPTIONS)" \
              $(TEST_IMAGE_OPERATIONS) \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
          done; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done; \
        rc=$$?; \
        if test $$rc -ne 0; then \
          exit $$rc; \
        fi
	@$(ECHO) "ok"

test_combined-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_combined

test_combined-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_combined

test_combined-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_combined

test_combined-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_combined

test_all:
	@$(MAKE) QUIET=1 --no-print-directory -s \
          test_basic \
          test_compress \
          test_crypt \
          test_asymmetric_crypt \
          test_split \
          test_image \
          test_storage \
          test_hugefiles \
          test_dvd \
          test_combined \
          test_arguments \
          test_misc

test_arguments: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	@$(ECHO_NO_LF) "Test parameters..."
	@$(ECHO) "# test config" >intermediate/test.cfg
	#
	# help
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -h 1>/dev/null $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --help 1>/dev/null $(LOG))
	#
	# working directory
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C intermediate $(TEST_OPTIONS) -c test.bar ../data/zero.dat $(LOG))
	#
	# normal/full/incremental/differential
	@$(RMRF) $(TEST_FILES_CLEAN)
	@$(RMF) intermediate/test-full.bid
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test-full.bar --full --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test ! -f intermediate/test-full.bid $(LOG)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test-full.bar --full --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	$(INSTALL) -d intermediate/new; $(CP) data/random1024.dat intermediate/random1024-new.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test-differential.bar --differential --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) intermediate/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test `$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test-differential.bar --no-header-footer 2>/dev/null|$(WC) -l` = "1" $(LOG)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test-incremental.bar --incremental --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) intermediate/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test `$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test-incremental.bar --no-header-footer 2>/dev/null|$(WC) -l` = "1" $(LOG)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test-incremental-empty.bar --incremental --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) intermediate/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	test `$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test-incremental-empty.bar --no-header-footer 2>/dev/null|$(WC) -l` = "0" $(LOG)
	@$(RMF) intermediate/random1024-new.dat
	@$(RMF) intermediate/test-full.bid
	#
	# patterns
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar data/zero.dat $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l "intermediate/test*.bar" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t intermediate/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t "intermediate/test*.bar" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d intermediate/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d "intermediate/test*.bar" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/not-existing-file-test*.bar $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l "intermediate/not-existing-file-test*.bar" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t intermediate/not-existing-file-test*.bar $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t "intermediate/not-existing-file-test*.bar" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d intermediate/not-existing-file-test*.bar $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d "intermediate/not-existing-file-test*.bar" $(LOG))
	#
	# compress
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=none $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -z none $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=zip0 $(LOG))
ifeq (@HAVE_BZIP@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=bzip1 $(LOG))
endif
ifeq (@HAVE_LZMA@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=lzma1 $(LOG))
endif
ifeq (@HAVE_LZO@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=lzo1 $(LOG))
endif
ifeq (@HAVE_LZ4@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=lz4-0 $(LOG))
endif
ifeq (@HAVE_ZSTD@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=zstd0 $(LOG))
endif
ifeq (@HAVE_XDELTA3@,1)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=none+zip0 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --compress-algorithm=xdelta1+zip0 $(LOG))
endif
	#
	# crypt
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=none        $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=3DES        $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=CAST5       $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=BLOWFISH    $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=AES128      $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=AES192      $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=AES256      $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=TWOFISH128  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=TWOFISH256  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=SERPENT128  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=SERPENT192  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=SERPENT256  $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=CAMELLIA128 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=CAMELLIA192 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --crypt-algorithm=CAMELLIA256 $(LOG))
	#
	# commands (test parsing command line options only for commands only used in server)
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar --pre-command="echo" --post-command="echo" data/zero.dat --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar --file-write-pre-command="echo" --file-write-post-command="echo" data/zero.dat --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar --include-file-command="find data" --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar --include-image-command="find data" --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar --exclude-command="find data" --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --storage-command="find . -type f -name test.bar" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --mount-command="echo" --overwrite-archive-files $(LOG))
	#
	# special file names
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar not-existing-file-%d%f%p%s.dat --overwrite-archive-files $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar not-existing-file-%d%f%p%s.dat --overwrite-archive-files --skip-unreadable=no $(LOG))
	#
	# different options
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar --verbose=2 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --comment 'Hello World!' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar -z zip0 $(TEST_FILES) /dev/ram0 /dev/zero --overwrite-archive-files --comment 'Hello World!' --verbose=2 $(LOG))
	#
	$(call functionTestCheckExitcode,0,0,$(ECHO) intermediate/test*.bar | $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l --storage-list-stdin $(LOG))
	$(ECHO) 'intermediate/test*.bar' > intermediate/storage.list
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l --storage-list intermediate/storage.list $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l --storage-command '$(CAT) intermediate/storage.list' $(LOG))
	$(RMF) intermediate/storage.list
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar --info $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -g $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -H $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -L $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -g -H -L $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -g -H -L --numeric-uid-gid $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -g -H -L --numeric-permissions $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -g -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -H -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -L -# '*rand*' -! '*512*' $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l intermediate/test*.bar -g -H -L -# '*rand*' -! '*512*' $(LOG))
	#
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --config=intermediate/test.cfg -l intermediate/test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --verbose=2 --dry-run $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l cd://test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l cd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t cd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d cd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l dvd://test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l dvd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t dvd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d dvd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l bd://test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l bd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t bd:///test*.bar $(LOG))
	$(call functionTestCheckExitcode,0,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d bd:///test*.bar $(LOG))
#	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c /media/ramdisk/test.bar $(TEST_FILES) --overwrite-archive-files --verbose=2 --mount=/media/ramdisk $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --remote-bar-executable=$(TEST_BAR) $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --config=intermediate/bar.cfg $(LOG))
	#
	# server
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-mode=master $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-mode=slave $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-port=1234 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-tls-port=1234 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-password=test $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-max-connections=1234 $(LOG))
	#
	# owner
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --owner=test:test $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --owner=:test $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --owner=test: $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --owner=test $(LOG))
	#
	# permissions
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=r--:r--:r-- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=-w-:-w-:-w- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=--x:--x:--x $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=r--:r-- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=-w-:-w- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=--x:--x $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=r-- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=-w- $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=--x $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --permissions=644 $(LOG))
	#
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --permissions=644 $(LOG))
	#
	# bandwidth
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width=1000000 $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width=1000K $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width=1M $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 23:*" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width=/tmp/foo $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M foo-1-1 Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-foo-1 Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-foo Mon 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 foo 23:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon foo:*" $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --max-band-width="1M *-*-1 Mon 23:foo" $(LOG))
	#
	# file/entry modes
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=stop $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=append $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=overwrite $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --archive-file-mode=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --overwrite-archive-files=yes $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=stop $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=append $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=overwrite $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --restore-entry-mode=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --overwrite-files=yes $(LOG))
	#
	# templates
	@$(RMF) intermediate/test-????-??-??-??-??-??-#.bar; \
        $(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test-%Y-%m-%d-%H-%M-%S-%#.bar $(TEST_FILES) --overwrite-archive-files $(LOG)); \
        test -f intermediate/test-????-??-??-??-??-??-#.bar;
	@$(RMF) intermediate/test-????-??-??-??-??-??-#.bar
	#
	# scripts
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="echo pre > intermediate/output.txt" --file-write-post-command="echo post echo pre > intermediate/output.txt" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="true;" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="false;" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-post-command="true;" $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-post-command="false;" $(LOG))
	#
	# keys
	@$(RMRF) intermediate/keys
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password=foo intermediate/keys/key-crypt $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --crypt-public-key=intermediate/keys/key-crypt.public $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --crypt-public-key="base64:`$(CAT) intermediate/keys/key-crypt.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --crypt-public-key="`$(CAT) intermediate/keys/key-crypt.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient intermediate/keys/key-signature $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --signature-public-key=intermediate/keys/key-signature.public $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --signature-public-key="base64:`$(CAT) intermediate/keys/key-signature.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --verbose=2 --signature-public-key="`$(CAT) intermediate/keys/key-signature.public`" $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient $(LOG))
	#
	$(BAR_DIR)/bar-keygen --tls-directory=intermediate/keys --private-directory=intermediate/keys --certs-directory=intermediate/keys --openssl --force $(LOG)
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --server-ca-file=intermediate/keys/bar-ca.pem  --server-cert-file=intermediate/keys/bar-server-cert.pem --server-key-file=intermediate/keys/bar-server-key.pem $(LOG))
	@$(RMRF) intermediate/keys
	#
	# wrong options
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --not-existing-option  $(LOG))
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C not-existing-directory $(TEST_OPTIONS) $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --compress-algorithm=not-existing-compress  $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --crypt-algorithm=not-existing-crypt $(LOG))
	$(call functionTestCheckExitcode,5,5,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --crypt-algorithm=3DES+CAST5+AES128+AES192+AES256 $(LOG))
ifeq (@HAVE_XDELTA3@,1)
	$(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c intermediate/test.bar $(TEST_FILES) --delta-source=does-not-exists --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files $(LOG))
endif
	$(call functionTestCheckExitcode,6,6,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test-not-exists.cfg -l intermediate/test*.bar $(LOG))
	#
	# deprecated command line options
	@$(RMRF) $(TEST_FILES_CLEAN)
	#
	# deprecated configuration values
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(ECHO) "mount-device = foo" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --mount-device=foo $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	$(ECHO) "overwrite-archive-files = yes" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	$(ECHO) "overwrite-files = yes" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	$(ECHO) "stop-on-error = yes" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --stop-on-error $(LOG))
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	($(ECHO) "[schedule full]"; $(ECHO) "min-keep = 1"; $(ECHO) "max-keep = 2"; $(ECHO) "max-age = 3"; $(ECHO) "[end]") >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,6,6,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	$(ECHO) "remote-host-name = foo" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	$(ECHO) "remote-host-port = 1234" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	$(ECHO) "remote-host-force-ssl = no" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,0,0,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	#
	# wrong configuration values
	$(ECHO) "does-not-exist = foo" >intermediate/test-deprecated.cfg
	$(call functionTestCheckExitcode,6,6,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=intermediate/test.cfg --config=intermediate/test-deprecated.cfg $(LOG))
	#
	# test not implemented functions
	@$(RMRF) $(TEST_FILES_CLEAN)
	$(call functionTestCheckExitcode,127,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) device://test/test.bar $(LOG))
	$(call functionTestCheckExitcode,127,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t device://test/test.bar $(LOG))
	$(call functionTestCheckExitcode,127,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d device://test/test.bar $(LOG))
	$(call functionTestCheckExitcode,127,127,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -x device://test/test.bar $(LOG))
	#
	@$(RMF) intermediate/test.cfg
	@$(RMF) intermediate/test-deprecated.cfg
	@$(ECHO) "ok"

test_arguments-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_arguments

test_arguments-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_arguments

test_arguments-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_arguments

test_arguments-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_arguments

test_misc: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_FILES)
	@$(ECHO_NO_LF) "Test miscellaneous..."
	@$(RMRF) $(TEST_FILES_CLEAN)
	#
	if test ! "$(TEST_BAR)" = "$(TEST_BAR_VALGRIND)"; then \
	  $(call functionTestCheckExitcode,134,134,($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT_LOW); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c intermediate/test.bar $(TEST_FILES) --overwrite-archive-files $(LOG))); \
        fi
	#
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	@
	$(call functionCreateFileZero,test/dev0.dat,32,1M)
	$(call functionTestDeviceCreate,$(LOOP0),test/dev0.dat)
	$(call functionTestDeviceInitFilesystem,$(LOOP0),-t ext2)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) \
          $(TEST_OPTIONS) \
          --mount test/dev0,$(LOOP0) \
          --mount-command='sudo -n /bin/mount -p 0 %directory' \
          --mount-device-command='sudo /bin/mount -p 0 %device %directory' \
          --unmount-command='sudo -n /bin/umount %directory' \
          -c intermediate/test.bar $(LOOP0)/zero*.dat \
          $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG) \
        )
	$(call functionTestDeviceDelete,$(LOOP0))
	$(RMF) test/dev0.dat

test_misc-debug: \
  $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_misc

test_misc-gcov: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GCOV) test_misc

test_misc-gprof: \
  $(TEST_BAR_GPROF)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_GPROF) test_misc

test_misc-valgrind: \
  $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full --show-leak-kinds=all" TEST_BAR=$(TEST_BAR_VALGRIND) test_misc

show_debug_test_code test_code:
	@$(FIND) . -maxdepth 1 -type f -a \( -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -print | \
          ( \
            while read fileName; do \
              cat $$fileName | $(PERL) -n -e 'if (/DEBUG_TEST_CODE\("(.*)"\)/) { print "'$$fileName': $$1=1\n"; };'; \
            done; \
          )

run_debug_test_code:
	$(call functionTestCheckExitcode,125,125,initAll1=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll2=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll3=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll4=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll5=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll6=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll7=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll8=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll9=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll10=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll11=1 $(TEST_BAR))

$(TEST_KEY_CRYPT_PUBLIC) $(TEST_KEY_CRYPT_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	$(RMF) $(TEST_KEY_CRYPT_PUBLIC) $(TEST_KEY_CRYPT_PRIVATE)
	$(TEST_BAR) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password="$(TEST_PASSWORD_CRYPT)" intermediate/key-crypt

$(TEST_KEY_CRYPT_OTHER_PUBLIC) $(TEST_KEY_CRYPT_OTHER_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	$(RMF) $(TEST_KEY_CRYPT_OTHER_PUBLIC) $(TEST_KEY_CRYPT_OTHER_PRIVATE)
	$(TEST_BAR) $(TEST_OPTIONS) --generate-keys --generate-keys-mode=transient --crypt-password="$(TEST_PASSWORD_CRYPT_OTHER)" intermediate/key-crypt-other

$(TEST_KEY_SIGNATURE_PUBLIC) $(TEST_KEY_SIGNATURE_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	$(RMF) $(TEST_KEY_SIGNATURE_PUBLIC) $(TEST_KEY_SIGNATURE_PRIVATE)
	$(TEST_BAR) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient intermediate/key-signature

$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) $(TEST_KEY_SIGNATURE_OTHER_PRIVATE): \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	$(RMF) $(TEST_KEY_SIGNATURE_OTHER_PUBLIC) $(TEST_KEY_SIGNATURE_OTHER_PRIVATE)
	$(TEST_BAR) $(TEST_OPTIONS) --generate-signature-keys --generate-keys-mode=transient intermediate/key-signature-other

data/zero128.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=128 2>/dev/null
data/zero1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=1024 2>/dev/null
data/zero512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1k count=512 2>/dev/null
data/random128.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
data/random1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=1024 2>/dev/null
data/random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null
data/zero-random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>$@  2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
data/zero.dat:
	$(INSTALL) -d $(@D)
	$(RMF) $0; touch $@
data/readonly.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@; $(CHMOD) 440 $@
data/readonly512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null; $(CHMOD) 440 $@
data/unreadable.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@; $(CHMOD) 000 $@
data/smallfile.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
data/sub_dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World >$@/test.dat
data/sub_ignore_dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World >$@/test.dat
	touch $@/.nobackup
data/linkdata.dat data/link.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/linkdata.dat bs=1k count=512 2>/dev/null
	($(CD) $(@D); $(RMF) link.dat; $(LN) -s linkdata.dat link.dat)
data/link_not_existing_file.dat:
	$(INSTALL) -d $(@D)
	($(CD) data; $(RMF) link_not_existing_file.dat; $(LN) -s not-existing-file link_not_existing_file.dat)
data/circular_link.dat.marker:
	$(INSTALL) -d $(@D)
	($(CD) data; $(LN) -s circular_link.dat circular_link.dat)
	touch $@
data/hardlinkdata.dat data/hardlink1.dat data/hardlink2.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata.dat bs=1k count=512 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink1.dat hardlink2.dat; $(LN) hardlinkdata.dat hardlink1.dat; $(LN) hardlinkdata.dat hardlink2.dat)
data/file400.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 400 $@
data/file640.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 640 $@
data/file644.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 644 $@
data/file664.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 664 $@
data/file666.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 666 $@
data/nodump.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 440 $@; $(CHATTR) +d $@
ifneq ($(ATTR),)
data/extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $@ 1>/dev/null
data/sub_dir_extended_attribute:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $@ 1>/dev/null
data/hardlinkdata_extended_attribute.dat data/hardlink_extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata_extended_attribute.dat bs=1 count=1024 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink_extended_attribute.dat; $(LN) hardlinkdata_extended_attribute.dat hardlink_extended_attribute.dat); $(ATTR) -s foo1 -V test data/hardlink_extended_attribute.dat 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" data/hardlink_extended_attribute.dat 1>/dev/null
else
ifneq ($(SETFATTR),)
data/extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(SETFATTR) -n foo2 -v "Hello World" $@ 1>/dev/null
data/sub_dir_extended_attribute:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(SETFATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -n foo2 -v "Hello World" $@ 1>/dev/null
data/hardlinkdata_extended_attribute.dat data/hardlink_extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata_extended_attribute.dat bs=1 count=1024 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink_extended_attribute.dat; $(LN) hardlinkdata_extended_attribute.dat hardlink_extended_attribute.dat); $(SETFATTR) -s foo1 -V test data/hardlink_extended_attribute.dat 1>/dev/null; $(ATTR) -n foo2 -v "Hello World" data/hardlink_extended_attribute.dat 1>/dev/null
endif
endif
data/immutable.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) An immutable file >$@; $(SUDO) -n $(CHATTR) +i $@ 1>/dev/null
data/append-only.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Append-only file >$@; $(SUDO) -n $(CHATTR) +a $@ 1>/dev/null
data/fifo:
	$(INSTALL) -d $(@D)
	($(CD) data; $(MKFIFO) fifo)
data/name\'.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/name\".dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/name\\.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/name\\n.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/name%d%f%s%p.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/name%d%f%s%p.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
data/delta1/test.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1k count=512 2>/dev/null; \
        ) >$@
data/delta2/test.dat: data/delta1/test.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=data/delta1/test.dat skip=0 bs=1k count=255 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1k count=1 2>/dev/null; \
          $(DD) if=data/delta1/test.dat skip=256 bs=1k count=256 2>/dev/null; \
        ) >$@

data/zero5G.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=5120 2>/dev/null
data/random5G.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=5120 2>/dev/null
data/hardlinkdata512M.dat data/hardlink512M1.dat data/hardlink512M2.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=data/hardlinkdata512M.dat bs=1M count=512 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink512M1.dat hardlink512M2.dat; $(LN) hardlinkdata512M.dat hardlink512M1.dat; $(LN) hardlinkdata512M.dat hardlink512M2.dat)

$(TEST_CONFIG):
	$(INSTALL) -d $(@D)
	( \
          echo '# bar test configuration'; \
        ) >$@
	$(CHMOD) 600 $@

$(TEST_JOBS_DIRECTORY):
	$(INSTALL) -d $@

$(TEST_SERVER_DATABASE): \
  $(TEST_BAR_SQLITE3)
	@$(call functionVerifyParameter,TEST_SERVER_DATABASE)
	@
	$(INSTALL) -d $(@D)
	$(TEST_BAR_SQLITE3) --create $(TEST_SERVER_DATABASE) "INSERT INTO entities (id,jobUUID) VALUES (1,'test')"

data/zero128.dat:

# helper function to check if parameter exists
# call functionVerifyParameter,<name>[,message]
functionVerifyParameter = \
  if test -z "$($1)"; then \
    if test -n "$2"; then \
      $(ECHO) >&2 "ERROR: $2"; \
    else \
      $(ECHO) >&2 "ERROR: parameter '$1' not set"; \
    fi; \
    exit 1; \
  fi

.PHONY: test_file_operations
test_file_operations: \
  test_file_operations_base \
  test_file_operations_delta \
  test_file_operations_incremental \
  test_file_operations_differential \
  test_file_operations_destroyed

.PHONY: test_file_operations_base test_file_operations_delta test_file_operations_dryrun test_file_operations_incremental test_file_operations_differential test_file_operations_destroyed
test_file_operations_base: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@# normal tests
	@$(call functionInfo,test file operations base)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)    $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -l $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -x $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --destination restore $(LOG))
	$(DIFF) -r \
          -x unreadable.dat \
          -x link_not_existing_file.dat \
          -x circular_link.dat \
          -x circular_link.dat.marker \
          -x fifo \
          -x sub_ignore_dir \
          -x nodump.dat \
          -x zero5G.dat \
          -x random5G.dat \
          -x hardlinkdata512M.dat \
          -x hardlink512M1.dat \
          -x hardlink512M2.dat \
          -x gmon.out \
          data restore/data
	$(READLINK) restore/data/link.dat 2>/dev/null $(LOG)
	test `$(STAT) --format "%a" restore/data/file400.dat 2>/dev/null` = "400" $(LOG)
	test `$(STAT) --format "%a" restore/data/file640.dat 2>/dev/null` = "640" $(LOG)
	test `$(STAT) --format "%a" restore/data/file644.dat 2>/dev/null` = "644" $(LOG)
	test `$(STAT) --format "%a" restore/data/file664.dat 2>/dev/null` = "664" $(LOG)
	test `$(STAT) --format "%a" restore/data/file666.dat 2>/dev/null` = "666" $(LOG)
	test `$(STAT) --format "%h" restore/data/hardlink1.dat 2>/dev/null` -eq 3 $(LOG)
	test `$(STAT) --format "%h" restore/data/hardlink2.dat 2>/dev/null` -eq 3 $(LOG)

test_file_operations_delta: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@$(call functionInfo,test file operations delta)
ifeq (@HAVE_XDELTA3@,1)
	@# delta tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) data/delta1; $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -c ../../intermediate/$(BAR_FILE)-A.bar test.dat $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	#
	$(RMF) intermediate/$(BAR_PATTERN)-B.bar restore/test.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -c ../../intermediate/$(BAR_FILE)-B.bar test.dat --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)             -t intermediate/$(BAR_PATTERN)-B.bar --delta-source='intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -d ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -x ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(LOG))
	$(DIFF) data/delta2/test.dat restore/test.dat
	#
	$(RMF) intermediate/$(BAR_PATTERN)-B.bar restore/test.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -c ../../intermediate/$(BAR_FILE)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)             -t intermediate/$(BAR_PATTERN)-B.bar --delta-source='intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -d ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -x ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(LOG))
	$(DIFF) data/delta2/test.dat restore/test.dat
	#
ifeq (@HAVE_BZ2@,1)
	$(RMF) intermediate/$(BAR_PATTERN)-B.bar restore/test.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -c ../../intermediate/$(BAR_FILE)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)             -t intermediate/$(BAR_PATTERN)-B.bar --delta-source='intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -d ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -x ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(LOG))
	$(DIFF) data/delta2/test.dat restore/test.dat
endif
	#
ifeq (@HAVE_LZMA@,1)
	$(RMF) intermediate/$(BAR_PATTERN)-B.bar restore/test.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -c ../../intermediate/$(BAR_FILE)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)             -t intermediate/$(BAR_PATTERN)-B.bar --delta-source='intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -d ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR)/data/delta2 -x ../../intermediate/$(BAR_PATTERN)-B.bar --delta-source='../../intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(LOG))
	$(DIFF) data/delta2/test.dat restore/test.dat
endif
endif

test_file_operations_dryrun: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@# normal tests
	@$(call functionInfo,test file operations dryrun)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --dry-run --verbose=2 $(LOG))
	test ! -f $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar

test_file_operations_incremental: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@# incremental tests
	@$(call functionInfo,test file operations incremental)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c intermediate/$(BAR_FILE)-full.bar --full --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	$(INSTALL) -d intermediate/new; $(CP) data/random1024.dat intermediate/new/random1024-new.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c intermediate/$(BAR_FILE)-incremental.bar --incremental --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) intermediate/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t intermediate/$(BAR_PATTERN)-full.bar intermediate/$(BAR_PATTERN)-incremental.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d intermediate/$(BAR_PATTERN)-full.bar intermediate/$(BAR_PATTERN)-incremental.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -x intermediate/$(BAR_PATTERN)-full.bar intermediate/$(BAR_PATTERN)-incremental.bar $(BAR_OPTIONS) --destination restore $(LOG))

test_file_operations_differential: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@# differential tests
	@$(call functionInfo,test file operations differential)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c intermediate/$(BAR_FILE)-full.bar --full --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	$(INSTALL) -d intermediate/new; $(CP) data/random1024.dat intermediate/new/random1024-new.dat
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c intermediate/$(BAR_FILE)-differential.bar --differential --incremental-list-file=intermediate/$(BAR_FILE).bid $(TEST_FILES) intermediate/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t intermediate/$(BAR_PATTERN)-full.bar intermediate/$(BAR_PATTERN)-differential.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d intermediate/$(BAR_PATTERN)-full.bar intermediate/$(BAR_PATTERN)-differential.bar $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -x intermediate/$(BAR_PATTERN)-full.bar intermediate/$(BAR_PATTERN)-differential.bar $(BAR_OPTIONS) --destination restore $(LOG))

.PHONY: test_file_operations_destroyed
test_file_operations_destroyed: \
  $(TEST_BAR) \
  $(TEST_DESTROYER) \
  $(TEST_FILES)
	@# tests which must cause errors
	@$(call functionInfo,test file operations destroyed)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c intermediate/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null))
	$(LS) intermediate/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:16:FIL0 >$${fileName}_destroyed; done
	-($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t intermediate/test*.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	$(LS) intermediate/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:20:XXXX >$${fileName}_destroyed; done
	-($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t intermediate/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	$(LS) intermediate/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:32:XXXX >$${fileName}_destroyed; done
	-($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t intermediate/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	$(LS) intermediate/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName d:1000:10 >$${fileName}_destroyed; done
	-($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t intermediate/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

.PHONY: test_directory_operations
test_directory_operations: \
  $(TEST_BAR)
	@$(call functionInfo,test directory operations)
	@$(call functionVerifyParameter,TEST_BAR)
	@#
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(BAR_STORAGE) $(BAR_OPTIONS) $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(BAR_STORAGE)/ $(BAR_OPTIONS) $(LOG))
	@#
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) $(BAR_STORAGE)/not_existing $(BAR_OPTIONS) $(LOG)))

.PHONY: test_convert_operations
test_convert_operations: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@$(call functionInfo,test file operations convert)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(TEST_BAR) -C $(SUB_DIR) -L $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) | $(GREP) -i none`")
	@# convert compress
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --compress-algorithm=zip9 --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(TEST_BAR) -C $(SUB_DIR) -L $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) | $(GREP) -i zip9`")
	@# convert job
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --job=01234567-89ab-cdef-0123-456789abcdef --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(TEST_BAR) -C $(SUB_DIR) --info $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) | $(GREP) -i 01234567-89ab-cdef-0123-456789abcdef`")
	@# convert comment
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --comment='Franz Kafka: Das Schloss' --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(TEST_BAR) -C $(SUB_DIR) --info $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) | $(GREP) 'Franz Kafka: Das Schloss'`")
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(BAR_OPTIONS) --comment='Franz Kafka: Die Verwandlung' --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(TEST_BAR) -C $(SUB_DIR) --info $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) | $(GREP) 'Franz Kafka: Die Verwandlung'`")
	#
ifeq (@HAVE_GCRYPT@,1)
	# convert encrypted AES256
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --crypt-algorithm=none --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-new-password='$(TEST_PASSWORD_CRYPT)' --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) test -n "`$(TEST_BAR) -C $(SUB_DIR) -L $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' | $(GREP) -i AES256`")
	# convert encrypted new password
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-new-password='$(TEST_PASSWORD_CRYPT_OTHER)' --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT_OTHER)' --verbose=2 $(LOG))
	# convert asymmetric encrypted new key
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --crypt-algorithm=AES256 --crypt-type=asymmetric --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-type=asymmetric --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --crypt-new-password='$(TEST_PASSWORD_CRYPT_OTHER)' --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_OTHER_PUBLIC) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT_OTHER)' --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_OTHER_PRIVATE) --verbose=2 $(LOG))
	# convert signature
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c        $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --info    $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(BAR_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --convert $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(BAR_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_OTHER_PRIVATE) --verbose=2 $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) --info    $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(BAR_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --verbose=2 $(LOG))
	# wrong key
	#($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(call functionTestCheckExitcode,1,1,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --crypt-password='$(TEST_PASSWORD_CRYPT)' --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --verbose=2 $(LOG)))
endif

HAVE_SUDO_COMMAND_CHATTR=@HAVE_SUDO_COMMAND_CHATTR@
HAVE_SUDO_COMMAND_MOUNT_UMOUNT=@HAVE_SUDO_COMMAND_MOUNT_UMOUNT@
HAVE_SUDO_COMMAND_LOSETUP=@HAVE_SUDO_COMMAND_LOSETUP@
HAVE_SUDO_COMMAND_MKFS=@HAVE_SUDO_COMMAND_MKFS@
HAVE_SUDO_COMMAND_CP=@HAVE_SUDO_COMMAND_CP@
HAVE_SUDO_COMMAND_DIFF=@HAVE_SUDO_COMMAND_DIFF@

# helper function to create a test device
# call functionTestDeviceReset
functionTestDeviceReset = \
  ( \
    $(ECHO) $(SUDO) -n $(UMOUNT) test/dev0; \
    $(SUDO) -n $(UMOUNT) test/dev0 2>/dev/null; \
    $(ECHO) $(SUDO) -n $(UMOUNT) test/dev1; \
    $(SUDO) -n $(UMOUNT) test/dev1 2>/dev/null; \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $(LOOP0); \
    $(SUDO) -n $(LOSETUP) -d $(LOOP0) 2>/dev/null; \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $(LOOP1); \
    $(SUDO) -n$(LOSETUP) -d $(LOOP1) 2>/dev/null; \
    true; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileZero,<file>,<count>,<size>
functionCreateFileZero = \
  ( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 bs=$3 count=$2; \
    $(DD) if=$(DEVICE_ZERO) of=$1 bs=$3 count=$2 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create huge spare test file
# call functionCreateFileSpare,<file>,<size>
functionCreateFileSpare = \
  ( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1; \
    $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileRandom,<file>,<count>,<size>
functionCreateFileRandom = \
  ( \
    $(ECHO) $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$3 count=$2; \
    $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$3 count=$2 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionTestDeviceCreate,<loop device>,<image file>
functionTestDeviceCreate = \
  ( \
    $(ECHO) $(SUDO) -n $(LOSETUP) $1 $2; \
    $(SUDO) -n $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) -n $(CHMOD) o+rw $1; \
    $(SUDO) -n $(CHMOD) o+rw $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to delete a test device
# call functionTestDeviceDelete,<loop device>
functionTestDeviceDelete = \
  ( \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $1; \
    $(SLEEP) 5; \
    $(SUDO) -n $(LOSETUP) -d $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create file system on test device
# call functionTestDeviceDelete,<loop device>,<mkfs options>
functionTestDeviceInitFilesystem = \
  ( \
    $(ECHO) $(SUDO) -n $(MKFS) $2 $1; \
    $(SUDO) -n $(MKFS) $2 $1 1>/dev/null 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to initialize file system on a test device
# call functionInitFilesystem,<image file>,<mkfs options>[,<files>]
functionInitFilesystem = \
  ( \
    $(call functionTestDeviceCreate,$(LOOP0),$1); \
    $(call functionTestDeviceInitFilesystem,$2,$(LOOP0)); \
    $(if $3,$(ECHO) $(INSTALL) -d test/dev0; \
            $(INSTALL) -d test/dev0; \
            $(ECHO) $(SUDO) -n $(MOUNT) $(LOOP0) test/dev0; \
            $(SUDO) -n $(MOUNT) $(LOOP0) test/dev0; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
            $(ECHO) $(SUDO) -n $(CP) -r -p $3 test/dev0; \
            $(SUDO) -n $(CP) -r -p $3 test/dev0 1>/dev/null 2>/dev/null; \
            $(SLEEP) 5; \
            $(ECHO) $(SUDO) -n $(UMOUNT) test/dev0; \
            $(SUDO) -n $(UMOUNT) test/dev0; \
    ) \
    $(call functionTestDeviceDelete,$(LOOP0)); \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to mount a test device
# call functionDeviceMount,<loop device>,<image file>,<mount point>
functionDeviceMount = \
  ( \
    $(ECHO) $(SUDO) -n $(LOSETUP) $1 $2; \
    $(SUDO) -n $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) -n $(CHMOD) o+rw $1; \
    $(SUDO) -n $(CHMOD) o+rw $1; \
    $(ECHO) $(INSTALL) -d $3; \
    $(INSTALL) -d $3; \
    $(ECHO) $(SUDO) -n $(MOUNT) $1 $3; \
    $(SUDO) -n $(MOUNT) $1 $3; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to umount a test device
# call functionDeviceUmount,<loop device>,<mount point>
functionDeviceUmount = \
  ( \
    $(ECHO) $(SUDO) -n $(UMOUNT) $2; \
    $(SUDO) -n $(UMOUNT) $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) -n $(LOSETUP) -d $1; \
    $(SLEEP) 5; \
    $(SUDO) -n $(LOSETUP) -d $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to dump content of device to file
# call functionTestDeviceDump,<loop device>,<file>
functionTestDeviceDump = \
  ( \
    $(ECHO) $(SUDO) -n $(DD) if=$1 of=- \> $2; \
    ($(SUDO) -n $(DD) if=$1 of=-) >$2 2>/dev/null; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

.PHONY: test_image_operations
test_image_operations: \
  test_image_operations_raw \
  test_image_operations_ext \
  test_image_operations_fat \
  test_image_operations_reiser

.PHONY: test_image_operations_raw
test_image_operations_raw:  \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	# raw
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	@
	# raw zero-data
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data, delta image
	@$(call functionCreateFileRandom,test/dev0a.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev0b.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat

.PHONY: test_image_ext test_image_ext2 test_image_ext3 test_image_ext4
test_image_operations_ext: \
  test_image_operations_ext2 \
  test_image_operations_ext3 \
  test_image_operations_ext4

# Ext2
test_image_operations_ext2: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_EXT2@,)
	# ext2
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	@
	# ext2 zero-data, default block size
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, default block size
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext2,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 1024 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 1024 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 1024 bytes, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 2048 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 2048 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 2048 bytes, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 4096 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 4096 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 4096 bytes, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Ext3
test_image_operations_ext3: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_EXT3@,)
	# ext3
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	#
	# ext3 zero-data, default block size
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, default block size
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext3,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 1024 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 1024 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 2048 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 2048 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 4096 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 4096 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Ext4
test_image_operations_ext4: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_EXT4@,)
	# ext4
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	#
	# ext4 zero-data, default block size
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, default block size
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext4,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 1024 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 1024 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 1024,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 2048 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 2048 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 2048,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 4096 bytes
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 4096 bytes
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	#$(call functionCreateSpare,test/dev0.dat,512G)
	#$(call functionCreateSpare,test/dev1.dat,512G)
	#@$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	#$(MAKE) test_image_operations_base \
        #   DEVICE0=$(LOOP0) DEVICE1=$(LOOP1)
	#@$(call functionTestDeviceDelete,$(LOOP1),test/dev1)
	#@$(call functionTestDeviceDelete,$(LOOP0),test/dev0)
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 4096,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

.PHONY: test_image_fat test_image_fat12 test_image_fat16 test_image_fat32
test_image_operations_fat: \
  test_image_operations_fat12 \
  test_image_operations_fat16 \
  test_image_operations_fat32

# FAT 12
test_image_operations_fat12: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_MSDOS@,)
	# FAT12
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	#
	# FAT12 zero-data
	@$(call functionCreateFileZero,test/dev0.dat,1,1440K)
	@$(call functionCreateFileZero,test/dev1.dat,1,1440K)
	@$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT12 random-data
	@$(call functionCreateFileRandom,test/dev0.dat,1,1440K)
	@$(call functionCreateFileRandom,test/dev1.dat,1,1440K)
	@$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT12 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 12,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# FAT 16
test_image_operations_fat16: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_MSDOS@,)
	# FAT16
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	#
	# FAT16 zero-data
	@$(call functionCreateFileZero,test/dev0.dat,20,1M)
	@$(call functionCreateFileZero,test/dev1.dat,20,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT16 random-data
	@$(call functionCreateFileRandom,test/dev0.dat,20,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,20,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT16 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,32,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 16,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# FAT 32
test_image_operations_fat32: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_MSDOS@,)
	# FAT32
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	#
	# FAT32 zero-data
	@$(call functionCreateFileZero,test/dev0.dat,64,1M)
	@$(call functionCreateFileZero,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT32 random-data
	@$(call functionCreateFileRandom,test/dev0.dat,64,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT32 random-data, default block size, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,64,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,64,1M)
	@$(call functionCreateFileZero,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 32,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

.PHONY: test_image_reiser test_image_reiserfs1 test_image_reiserfs2 test_image_reiserfs3 test_image_reiser4
test_image_operations_reiser: \
  test_image_operations_reiserfs1 \
  test_image_operations_reiserfs2 \
  test_image_operations_reiserfs3 \
  test_image_operations_reiser4

test_image_operations_reiserfs1:
ifneq (@MKFS_REISERFS@,)
endif

test_image_operations_reiserfs2:
ifneq (@MKFS_REISERFS@,)
endif

# ReiserFS version 3 (Note: Linux only support block size 4096)
test_image_operations_reiserfs3: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
ifneq (@MKFS_REISERFS@,)
	# ReiserFS 3
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	#
	# ReiserFS 3 zero-data
	@$(call functionCreateFileZero,test/dev0.dat,64,1M)
	@$(call functionCreateFileZero,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.5,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 random-data
	@$(call functionCreateFileRandom,test/dev0.dat,64,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.5,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 zero-data
	@$(call functionCreateFileZero,test/dev0.dat,64,1M)
	@$(call functionCreateFileZero,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 random-data
	@$(call functionCreateFileRandom,test/dev0.dat,64,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ReiserFS 3 random-data, delta image
	@$(call functionCreateFileZero,test/dev0a.dat,64,1M)
	@$(call functionCreateFileZero,test/dev0b.dat,64,1M)
	@$(call functionCreateFileZero,test/dev1.dat,64,1M)
	@$(call functionInitFilesystem,test/dev0a.dat,-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	@$(call functionInitFilesystem,test/dev0b.dat,-t reiserfs -b 4096 -q --format 3.6,data/random* data/zero*.dat data/readonly*.dat data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images) $(OPTIONS)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Reiser4 (Note: not supported anymore)
test_image_operations_reiser4:
ifneq (@MKFS_REISER4@,)
endif

# image dry-run
.PHONY: test_image_operations_dryrun
test_image_operations_dryrun: \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY)
	# delta tests
	@$(call functionInfo,test image operation dryrun)
	@$(call functionVerifyParameter,TEST_BAR)
	#
	$(INSTALL) -d test
	@$(call functionTestDeviceReset)
	@
	# raw zero-data
	@$(call functionCreateFileZero,test/dev0.dat,32,1M)
	@$(call functionCreateFileZero,test/dev1.dat,32,1M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images --dry-run,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images --dry-run) $(OPTIONS)" \
          test_image_operations_create
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data
	@$(call functionCreateFileRandom,test/dev0.dat,32,1M)
	@$(call functionCreateFileRandom,test/dev1.dat,32,1M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images --dry-run,$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --raw-images --dry-run $(OPTIONS)run)" \
          test_image_operations_create
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat

.PHONY: test_image_operations_base test_image_operations_check test_image_operations_diff_image test_image_operations_create
test_image_operations_base: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# normal tests
	@$(call functionInfo,test image operation base)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -m intermediate/$(BAR_FILE).bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -t intermediate/test*.bar $(BAR_OPTIONS) $(LOG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -d intermediate/test*.bar $(BAR_OPTIONS) $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -x intermediate/test*.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE1))

test_image_operations_delta: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# delta tests
	@$(call functionInfo,test image operation delta)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0_A)
	@$(call functionVerifyParameter,IMAGE0_B)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -m intermediate/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@
ifeq (@HAVE_XDELTA3@,1)
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -m intermediate/$(BAR_FILE)-B.bar $(DEVICE0) $(BAR_OPTIONS) --delta-source='intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files --verbose=2 $(LOG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -t intermediate/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -d intermediate/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))
endif
	@
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -x intermediate/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -m intermediate/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --compress-algorithm=zip9 --overwrite-archive-files --verbose=2 $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@
ifeq (@HAVE_XDELTA3@,1)
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -m intermediate/$(BAR_FILE)-B.bar $(DEVICE0) $(BAR_OPTIONS) --delta-source='intermediate/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9+zip9 --force-delta-compression --overwrite-archive-files --verbose=2 $(LOG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -t intermediate/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG)
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -d intermediate/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))
endif
	@
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -x intermediate/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE1))

test_image_operations_check:
	# check file systems and compare file content
	@$(call functionInfo,test image operation check)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@
	@# ---
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE0) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE1) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@
	@$(call functionDeviceMount,$(DEVICE0),$(IMAGE0),test/dev0)
	@$(call functionDeviceMount,$(DEVICE1),$(IMAGE1),test/dev1)
	$(SUDO) -n $(DIFF) -r test/dev0 test/dev1 $(LOG)
	$(SLEEP) 5
	@$(call functionDeviceUmount,$(DEVICE0),test/dev0)
	@$(call functionDeviceUmount,$(DEVICE1),test/dev1)

test_image_operations_diff_image:
	# compare devices
	@$(call functionInfo,test image operation diff image)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@
	@# ---
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	@$(call functionTestDeviceDump,$(DEVICE0),test/dev0.dump)
	@$(call functionTestDeviceDelete,$(DEVICE0))
	@
	@$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1))
	@$(call functionTestDeviceDump,$(DEVICE1),test/dev1.dump)
	@$(call functionTestDeviceDelete,$(DEVICE1))
	@
	$(DIFF) test/dev0.dump test/dev1.dump

test_image_operations_create: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# normal tests
	@$(call functionInfo,test image operation create only)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	@$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0))
	$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -m intermediate/$(BAR_FILE).bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG)
	@$(call functionTestDeviceDelete,$(DEVICE0))

.PHONY: test_hugefiles_operations
test_hugefiles_operations: \
  $(TEST_BAR) \
  $(TEST_HUGEFILES)
	# normal tests
	@$(call functionInfo,test huge file opertations)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	$(INSTALL) -d data/tmp
	for z in $(TEST_HUGEFILES1); do \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $$z $(BAR_OPTIONS) --overwrite-archive-files --tmp-directory=data/tmp --verbose=2 $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -l $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG)); \
          ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -x $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --destination restore $(LOG)); \
        done; \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_HUGEFILES2) $(BAR_OPTIONS) --overwrite-archive-files --tmp-directory=data/tmp --verbose=2 $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -l $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(LOG)); \
        ($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -x $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --destination restore $(LOG)); \

.PHONY: test_dvd_operations
test_dvd_operations: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# create DVD
	@$(call functionInfo,test DVD opertations)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	$(SLEEP) 30
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c dvd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t dvd:///$(BAR_FILE).bar $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d dvd:///$(BAR_FILE).bar $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L dvd:///$(BAR_FILE).bar $(LOG))
	$(SLEEP) 30
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c dvd:///$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --blank  --ecc $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -t dvd:///$(BAR_FILE).bar $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -d dvd:///$(BAR_FILE).bar $(LOG))
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -L dvd:///$(BAR_FILE).bar $(LOG))

# send command to server
functionServerCommandSocket = \
  $(ECHO) $2; $(ECHO) 1 $2|$(NETCAT) $1|$(TAIL) -n +2
functionServerCommandBatch = \
  $(ECHO) 1 $1

.PHONY: test_server_operations test_server_operations_socket test_server_operations_batch
test_server_operations: \
  test_server_operations_batch

#  test_server_operations_socket \

test_server_operations_socket_server: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_SERVER_JOBS_DIRECTORY) \
  $(TEST_FILES)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	( \
	  $(CD) $(UP_DIR); \
          $(ULIMIT) -Sv $(MEMORY_LIMIT); \
          \
	  : start server; \
          $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_DIRECTORY); \
          $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_JOBS_DIRECTORY); \
          $(INSTALL) bar.cfg $(SUB_DIR)/$(TEST_SERVER_CONFIG); \
          $(RMF) $(SUB_DIR)/$(TEST_SERVER_JOBS_DIRECTORY)/__test__; \
	  $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) \
            -C $(SUB_DIR) \
	    $(TEST_OPTIONS) \
            --daemon \
	    --pid-file=$(TEST_SERVER_PID_FILE) \
	    --server-port=$(TEST_SERVER_PORT) \
	    --index-database=$(TEST_SERVER_DATABASE) \
            --continuous-database=$(TEST_SERVER_CONTINUOUS_DATABASE) \
            --jobs-directory=$(TEST_SERVER_JOBS_DIRECTORY) \
	    --server-debug \
            --log-file=$(TEST_SERVER_LOG_FILE) \
            --log-post-command="cat %file" \
            --log=all \
            --max-threads=1 \
            $(ADDITIONAL_OPTIONS) \
            ; \
          if test $$? -eq 0; then \
	    $(SLEEP) 20; \
          else \
            exit 1; \
          fi; \
        ) $(LOG)

test_server_operations_socket_client: \
  $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	( \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),VERSION); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STATUS); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_GET name=tmp-directory); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_SET name=tmp-directory value=/tmp); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_FLUSH); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEVICE_LIST); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ROOT_LIST); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FILE_LIST directory=/tmp) 1>/dev/null; \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_LIST) 1>/dev/null; \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_NEW name=__test__ jobUUID=test); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_SET jobUUID=test name=archive-part-size value=0); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MOUNT_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_COMPRESS_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SOURCE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ARCHIVE_LIST name=$(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar) 1>/dev/null; \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=CREATE); \
	  $(SLEEP) 2; \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),CONTINUE); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DECRYPT_PASSWORD_CLEAR); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DECRYPT_PASSWORD_ADD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FTP_PASSWORD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SSH_PASSWORD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),WEBDAV_PASSWORD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),CRYPT_PASSWORD jobUUID=test encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PASSWORDS_CLEAR); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_DELETE jobUUID=test); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STORAGE_LIST_CLEAR); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STORAGE_LIST_ADD indexId=0); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_ADD pattern=$(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar); \
	  $(SLEEP) 2; \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_UUID_LIST indexStateSet='*' indexModeSet='*' name='*'); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGES_INFO name='*' indexStateSet='*' indexModeSet='*'); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST name='*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRIES_INFO name='*' indexType='*' newestOnly=yes); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST name='*' indexType='*' newestOnly=yes offset=0 limit=100); \
	  $(SLEEP) 2; \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_PRINT_STATISTICS); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_PRINT_MEMORY_INFO); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_DUMP_MEMORY_INFO); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),QUIT); \
	  $(SLEEP) 5; \
        ) $(LOG)

test_server_operations_socket: \
  $(TEST_FILES) \
  $(TEST_SERVER_DATABASE)
	# create test archive
	($(CD) $(SUB_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	@$(MAKE) test_server_operations_socket_server
	@$(MAKE) test_server_operations_socket_client
	if test -f $(TEST_SERVER_PID_FILE); then $(KILL) -9 `$(CAT) $(TEST_SERVER_PID_FILE)` 2>/dev/null; fi; \

test_server_operations_batch: \
  $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	# create test archive
	($(CD) $(UP_DIR); $(ULIMIT) -Sv $(MEMORY_LIMIT); $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) -C $(SUB_DIR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(LOG))
	@
	( \
          $(call functionServerCommandBatch,VERSION); \
          $(call functionServerCommandBatch,STATUS); \
          \
          $(call functionServerCommandBatch,JOB_LIST); \
          \
          $(call functionServerCommandBatch,PAUSE time=120 modeMask=ALL); \
	  $(SLEEP) 2; \
          $(call functionServerCommandBatch,CONTINUE); \
          \
          $(call functionServerCommandBatch,DECRYPT_PASSWORD_CLEAR); \
          $(call functionServerCommandBatch,DECRYPT_PASSWORD_ADD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,FTP_PASSWORD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,SSH_PASSWORD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,WEBDAV_PASSWORD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,CRYPT_PASSWORD jobUUID=test encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,PASSWORDS_CLEAR); \
          \
          $(call functionServerCommandBatch,STORAGE_LIST_CLEAR); \
          $(call functionServerCommandBatch,STORAGE_LIST_ADD uuid='*' enityId=0 storageId=0); \
          \
          $(call functionServerCommandBatch,INDEX_STORAGE_ADD pattern=$(if $(BAR_STORAGE),$(BAR_STORAGE),intermediate/)$(BAR_FILE).bar); \
	  $(SLEEP) 2; \
          $(call functionServerCommandBatch,INDEX_UUID_LIST indexStateSet='*' indexModeSet='*' name='*'); \
          \
          $(call functionServerCommandBatch,INDEX_STORAGES_INFO name='*' indexStateSet='*'); \
          $(call functionServerCommandBatch,INDEX_STORAGE_LIST entityId=0 name='*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
          \
          $(call functionServerCommandBatch,INDEX_ENTRIES_INFO name='*' indexType='*' newestOnly=yes); \
          $(call functionServerCommandBatch,INDEX_ENTRY_LIST name='*' indexType='*' newestOnly=yes offset=0 limit=100); \
	  $(SLEEP) 2; \
          \
          $(call functionServerCommandBatch,DEBUG_PRINT_STATISTICS); \
          \
          $(call functionServerCommandBatch,QUIT); \
	  $(SLEEP) 5; \
        ) | \
        ( \
	  $(ULIMIT) -Sv $(MEMORY_LIMIT); \
	  $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) \
            --log-file=$(TEST_SERVER_LOG_FILE) \
            --log=all \
            --log-post-command="cat %file" \
	    --index-database=$(TEST_SERVER_DATABASE) \
	    --batch \
	    --server-debug; \
        ) $(LOG)

.PHONY: test_master_slave_operations test_master_slave_operations_create
test_master_slave_operations: \
  test_master_slave_operations_create \

# TODO: test_options?
test_master_slave_operations_master: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_SERVER_JOBS_DIRECTORY)
	@
	( \
	  $(CD) $(UP_DIR); \
          $(ULIMIT) -Sv $(MEMORY_LIMIT); \
          \
	  : start master server; \
          $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_DIRECTORY); \
          $(INSTALL) -d $(SUB_DIR)/$(TEST_SERVER_JOBS_DIRECTORY); \
          $(INSTALL) -m 600 bar.cfg $(SUB_DIR)/$(TEST_SERVER_CONFIG); \
          $(RMF) $(SUB_DIR)/$(TEST_SERVER_JOBS_DIRECTORY)/__test__; \
	  $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) \
            -C $(SUB_DIR) \
	    $(TEST_OPTIONS) \
            --daemon \
            $(if $(TEST_DETACH),,-D) \
	    --pid-file=$(TEST_SERVER_PID_FILE) \
            --server-mode=master \
	    --server-port=$(TEST_SERVER_PORT) \
	    --index-database=$(TEST_SERVER_DATABASE) \
            --jobs-directory=$(TEST_SERVER_JOBS_DIRECTORY) \
	    --server-debug \
            --log-file=$(TEST_SERVER_LOG_FILE) \
            --log=all \
            --max-threads=1 \
            $(ADDITIONAL_OPTIONS) \
            ; \
          if test $$? -eq 0; then \
	    $(SLEEP) 5; \
          else \
            exit 1; \
          fi; \
        ) $(LOG)

test_master_slave_operations_slave: \
  $(TEST_BAR) \
  $(TEST_SLAVE_CONFIG) \
  $(TEST_JOBS_DIRECTORY) \
  $(TEST_FILES)
	@$(call functionVerifyParameter,TEST_SLAVE_PORT)
	@$(call functionVerifyParameter,TEST_SLAVE_USERNAME)
	@$(call functionVerifyParameter,TEST_SLAVE_PASSWORD)
	@
	( \
	  $(CD) $(UP_DIR); \
          $(ULIMIT) -Sv $(MEMORY_LIMIT); \
          \
	  : start slave server; \
          if test -n "$(TEST_SLAVE_HOST)"; then \
            $(call functionSlaveExecute,$(KILLALL) $(TEST_BAR)); \
            $(call functionSlaveCopy,$(TEST_BAR),$(TEST_BAR)); \
            $(call functionSlaveExecute,$(INSTALL) -d $(TEST_SLAVE_DIRECTORY)); \
            $(call functionSlaveExecute,$(INSTALL) -d $(TEST_SLAVE_JOBS)); \
            $(call functionSlaveCopy,bar.cfg,$(TEST_SLAVE_CONFIG)); \
            $(call functionSlaveExecute,$(RMF) $(TEST_SLAVE_JOBS)/__test__); \
	    $(call functionSlaveExecute,$(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) \
              -C $(SUB_DIR) \
	      --no-default-config --config=$(TEST_SLAVE_CONFIG) \
              --daemon \
              $(if $(TEST_DETACH),,-D) \
	      --pid-file=$(TEST_SLAVE_PID_FILE) \
              --server-mode=slave \
	      --server-port=$(TEST_SLAVE_PORT) \
	      --index-database=$(TEST_SLAVE_DATABASE) \
              --jobs-directory=$(TEST_SLAVE_JOBS) \
	      --server-debug \
              --log-file=$(TEST_SLAVE_LOG_FILE) \
              --log=all \
              --max-threads=1 \
              $(ADDITIONAL_OPTIONS) \
            ); \
          else \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_SLAVE_DIRECTORY); \
            $(INSTALL) -d $(SUB_DIR)/$(TEST_SLAVE_JOBS); \
            $(INSTALL) -m 600 bar.cfg $(SUB_DIR)/$(TEST_SLAVE_CONFIG); \
            $(RMF) $(TEST_SLAVE_JOBS)/__test__; \
	    $(TEST_ENVIRONMENT) $(TEST_TIMEOUT) $(TEST_BAR_PREFIX) $(TEST_BAR) \
              -C $(SUB_DIR) \
	      --no-default-config --config=$(TEST_SLAVE_CONFIG) \
              --daemon \
              $(if $(TEST_DETACH),,-D) \
	      --pid-file=$(TEST_SLAVE_PID_FILE) \
              --server-mode=slave \
	      --server-port=$(TEST_SLAVE_PORT) \
	      --index-database=$(TEST_SLAVE_DATABASE) \
              --jobs-directory=$(TEST_SLAVE_JOBS) \
	      --server-debug \
              --log-file=$(TEST_SLAVE_LOG_FILE) \
              --log=all \
              --max-threads=1 \
              $(ADDITIONAL_OPTIONS); \
          fi; \
          if test $$? -eq 0; then \
	    $(SLEEP) 5; \
          else \
            exit 1; \
          fi; \
        ) $(LOG)

test_master_slave_operations_create: \
  $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	$(MAKE) test_master_slave_operations_slave TEST_DETACH=1
	$(MAKE) test_master_slave_operations_master TEST_DETACH=1
	@
	( \
$(call functionSlaveExecute,"ps auxw|grep bar"); \
        ) $(LOG)
	@
	( \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_NEW name=__test__ jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_OPTION_SET jobUUID=test name=remote-host-name value=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_FLUSH); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_START jobUUID=test archiveType=NORMAL); \
          for i in `seq 1 100`; do \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_STATUS jobUUID=test); \
          $(SLEEP) 2; \
          done; \
        ) $(LOG)
	@
	@
	@$(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),QUIT); \
	@$(call functionSlaveExecute,"$(KILLALL) $(TEST_BAR)"); \

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist: \
  $(TEST_FILES)
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/bar/$(TEST_DATA_DIR)
	$(INSTALL) -m 664 Makefile.in \
                          $(DIRECTORY)/bar/$(TEST_DATA_DIR)
	$(INSTALL) -d $(DIRECTORY)/bar/$(TEST_DATA_DIR)/data
	$(INSTALL) -m 664 data/zero.dat \
                          data/zero128.dat \
                          data/zero1024.dat \
                          data/zero512k.dat \
                          data/random128.dat \
                          data/random1024.dat \
                          data/random512k.dat \
                          data/zero-random512k.dat \
                          data/smallfile.dat \
                          $(DIRECTORY)/bar/$(TEST_DATA_DIR)/data
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

# end of file
