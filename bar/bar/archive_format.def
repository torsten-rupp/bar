#***********************************************************************
#
# $Source: /home/torsten/cvs/bar/bar/archive_format.def,v $
# $Revision$
# $Author$
# Contents: Backup ARchiver file format definition
# Systems: all
#
#***********************************************************************

# BAR files are organized in 'chunks' (a sequence of bytes prefixed by
# a header). Chunks are stored continously in a file. Chunks may contain
# sub-chunks. Each chunk have a header. The format of a chunk
# header is:
#
# 4 bytes: id, 4 8bit-characters
# 8 bytes: length (excluding size of header), 64bit big-endian
#
# The chunk id of top-level chunks usually have 3 characters and one
# digit (0-9). Details: see below.
#
# Chunks can contain sub-chunks. Future versions of BAR may contain new
# chunks. Older versions of BAR skip unknown chunks.
#
# The general structure of a BAR file is (sub-chunks are indented, chunk
# ids in [...] are optional chunks):
#
# BAR0
# KEY0
# FIL0
#   FENT
#   [FDLT]
#   FDAT
# IMG0
#   IENT
#   [IDLT]
#   IDATA
# DIR0
#   DENT
# LNK0
#   LENT
# HKN0
#   HENT
#   HDAT
# SPE0
#   SENT
#
# The ordering of the chunks *0 is arbitrary. The sub-chunks should always
# be ordered like shown above.
#
# The following syntax is used for specification in this file:
#
# CHUNK <name> <id, 4 character string> <data type name>
#   [ENCRYPT]
#   [COMPRESS]
#   <data definition>
#   ...
# <empty line>
#
# ENCRYPT means chunk can be encrypted (without header).
# COMPRESS means data in chunk can be compressed (data only).
#
#
# Available data types:
#   uint8  unsigned integer 8bit
#   uint16 unsigned integer 16bit
#   uint32 unsigned integer 32bit
#   uint64 unsigned integer 64bit
#   int8   signed integer 8bit
#   int16  signed integer 16bit
#   int32  signed integer 32bit
#   int64  signed integer 64bit
#   string string
#            uint16 length
#            char   string data (UTF-8)
#   data   data bytes
#   crc32  32bit CRC of the previous data types
#
# Notes:
#   - all data types except 'data' are stored in big-endian format.
#   - encrypted data is padded with 0-bytes to a multiple-size of
#     encryption block size
#
# Current version notes:
#   - encrypted meta data is read/written with cipher block chaining
#     mode enabled.
#   - encrypted meta data (all except "data") is read/written with
#     cipher text stealing (CTS) mode enabled. Encrypted data is
#     read/written _without_ cipher text stealing mode enabled!

# ----------------------------------------------------------------------

# encryption algorithms
CONST CRYPT_ALGORITHM_NONE         = 0

CONST CRYPT_ALGORITHM_3DES         = 1
CONST CRYPT_ALGORITHM_CAST5        = 2
CONST CRYPT_ALGORITHM_BLOWFISH     = 3
CONST CRYPT_ALGORITHM_AES128       = 4
CONST CRYPT_ALGORITHM_AES192       = 5
CONST CRYPT_ALGORITHM_AES256       = 6
CONST CRYPT_ALGORITHM_TWOFISH128   = 7
CONST CRYPT_ALGORITHM_TWOFISH256   = 8
CONST CRYPT_ALGORITHM_SERPENT128   = 9
CONST CRYPT_ALGORITHM_SERPENT192   = 10
CONST CRYPT_ALGORITHM_SERPENT256   = 11
CONST CRYPT_ALGORITHM_CAMELLIA128  = 12
CONST CRYPT_ALGORITHM_CAMELLIA192  = 13
CONST CRYPT_ALGORITHM_CAMELLIA256  = 14

# compress algorithms
CONST COMPRESS_ALGORITHM_NONE      = 0

CONST COMPRESS_ALGORITHM_ZIP_0     = 1
CONST COMPRESS_ALGORITHM_ZIP_1     = 2
CONST COMPRESS_ALGORITHM_ZIP_2     = 3
CONST COMPRESS_ALGORITHM_ZIP_3     = 4
CONST COMPRESS_ALGORITHM_ZIP_4     = 5
CONST COMPRESS_ALGORITHM_ZIP_5     = 6
CONST COMPRESS_ALGORITHM_ZIP_6     = 7
CONST COMPRESS_ALGORITHM_ZIP_7     = 8
CONST COMPRESS_ALGORITHM_ZIP_8     = 9
CONST COMPRESS_ALGORITHM_ZIP_9     = 10

CONST COMPRESS_ALGORITHM_BZIP2_1   = 11
CONST COMPRESS_ALGORITHM_BZIP2_2   = 12
CONST COMPRESS_ALGORITHM_BZIP2_3   = 13
CONST COMPRESS_ALGORITHM_BZIP2_4   = 14
CONST COMPRESS_ALGORITHM_BZIP2_5   = 15
CONST COMPRESS_ALGORITHM_BZIP2_6   = 16
CONST COMPRESS_ALGORITHM_BZIP2_7   = 18
CONST COMPRESS_ALGORITHM_BZIP2_8   = 19
CONST COMPRESS_ALGORITHM_BZIP2_9   = 20

CONST COMPRESS_ALGORITHM_LZMA_1    = 21
CONST COMPRESS_ALGORITHM_LZMA_2    = 22
CONST COMPRESS_ALGORITHM_LZMA_3    = 23
CONST COMPRESS_ALGORITHM_LZMA_4    = 24
CONST COMPRESS_ALGORITHM_LZMA_5    = 25
CONST COMPRESS_ALGORITHM_LZMA_6    = 26
CONST COMPRESS_ALGORITHM_LZMA_7    = 27
CONST COMPRESS_ALGORITHM_LZMA_8    = 28
CONST COMPRESS_ALGORITHM_LZMA_9    = 29

CONST COMPRESS_ALGORITHM_XDELTA_1  = 30
CONST COMPRESS_ALGORITHM_XDELTA_2  = 31
CONST COMPRESS_ALGORITHM_XDELTA_3  = 32
CONST COMPRESS_ALGORITHM_XDELTA_4  = 33
CONST COMPRESS_ALGORITHM_XDELTA_5  = 34
CONST COMPRESS_ALGORITHM_XDELTA_6  = 35
CONST COMPRESS_ALGORITHM_XDELTA_7  = 36
CONST COMPRESS_ALGORITHM_XDELTA_8  = 37
CONST COMPRESS_ALGORITHM_XDELTA_9  = 38

# ---

# Archive info header. Only used to identify file as a BAR
# file.
#
# parent: none
# never compress/encrypted
CHUNK BAR "BAR0" Bar
  crc32  crc

# ----------------------------------------------------------------------

# asymmetric encryption key
#
# Used for the following chunks which could be encrypted by
# the specified symmetric entryption. A random generated key
# for symmetric encryption is encrypted itself with the
# asymmetric RSA entryption and the public key (hybrid
# encryption). To decrypt the random key the private key is
# required.
#
# Asymmetric encryption keys may be stored multiple times to
# change the key for the following chunks.
#
# parent: none
# never compress/encrypted
CHUNK KEY "KEY0" Key
  data   data
  crc32  crc

# ----------------------------------------------------------------------

# file info header
#
# parent: none
# never compress/encrypted
CHUNK FILE "FIL0" File
  uint16 compressAlgorithm;
  uint16 cryptAlgorithm;
  crc32  crc

# file entry
#
# parent: FIL0
# never compress, encrypted as specified in FIL0
CHUNK FILE_ENTRY "FENT" FileEntry
  ENCRYPT
  uint64 size
  uint64 timeLastAccess
  uint64 timeModified
  uint64 timeLastChanged
  uint32 userId
  uint32 groupId
  uint32 permission
  string name
  crc32  crc

# file delta compression
#
# parent: FIL0
# never compress, encrypted as specified in FIL0
CHUNK FILE_DELTA "FDLT" FileDelta
  ENCRYPT
  uint16 deltaAlgorithm;
  string name
  uint64 size
  crc32  crc

# file data
#
# parent: FIL0
# compress/encrypted as specified in FIL0
CHUNK FILE_DATA "FDAT" FileData
  ENCRYPT
  COMPRESS
  uint64 fragmentOffset
  uint64 fragmentSize
  crc32  crc
  data   data

# ----------------------------------------------------------------------

# image info header
#
# parent: none
# never compress/encrypted
CHUNK IMAGE "IMG0" Image
  uint16 compressAlgorithm;
  uint16 cryptAlgorithm;
  crc32  crc

# image entry
#
# parent: IMG0
# never compress, encrypted as specified in IMG0
CHUNK IMAGE_ENTRY "IENT" ImageEntry +encrypted
  ENCRYPT
  uint16 fileSystemType
  uint64 size
  uint32 blockSize
  string name
  crc32  crc

# image delta compression
#
# parent: IMG0
# never compress, encrypted as specified in IMG0
CHUNK IMAGE_DELTA "IDLT" ImageDelta
  ENCRYPT
  uint16 deltaAlgorithm;
  string name
  uint64 size
  crc32  crc

# image data
#
# parent: IMG0
# compress/encrypted as specified in IMG0
CHUNK IMAGE_DATA "IDAT" ImageData
  ENCRYPT
  COMPRESS
  uint64 blockOffset
  uint64 blockCount
  crc32  crc
  data   data

# ----------------------------------------------------------------------

# directory info header
#
# parent: none
# never compress/encrypted
CHUNK DIRECTORY "DIR0" Directory
  uint16 cryptAlgorithm;
  crc32  crc

# directory entry
#
# parent: DIR0
# never compress, encrypted as specified in DIR0
CHUNK DIRECTORY_ENTRY "DENT" DirectoryEntry
  ENCRYPT
  uint64 timeLastAccess
  uint64 timeModified
  uint64 timeLastChanged
  uint32 userId
  uint32 groupId
  uint32 permission
  string name
  crc32  crc

# ----------------------------------------------------------------------

# (symbolic) link info header
#
# parent: none
# never compress/encrypted
CHUNK LINK "LNK0" Link
  uint16 cryptAlgorithm;
  crc32  crc

# (symbolic) link entry
#
# parent: LNK0
# never compress, encrypted as specified in LNK0
CHUNK LINK_ENTRY "LENT" LinkEntry
  ENCRYPT
  uint64 timeLastAccess
  uint64 timeModified
  uint64 timeLastChanged
  uint32 userId
  uint32 groupId
  uint32 permission
  string name
  string destinationName
  crc32  crc

# ----------------------------------------------------------------------

# hard link info header
#
# parent: none
# never compress/encrypted
CHUNK HARDLINK "HLN0" HardLink
  uint16 compressAlgorithm;
  uint16 cryptAlgorithm;
  crc32  crc

# hard link entry
#
# parent: HLN0
# never compress, encrypted as specified in HLN0
CHUNK HARDLINK_ENTRY "HENT" HardLinkEntry
  ENCRYPT
  uint64 size
  uint64 timeLastAccess
  uint64 timeModified
  uint64 timeLastChanged
  uint32 userId
  uint32 groupId
  uint32 permission
  crc32  crc

# hard link name
#
# parent: HLN0
# never compress, encrypted as specified in HLN0
CHUNK HARDLINK_NAME "HNAM" HardLinkName
  ENCRYPT
  string name
  crc32  crc

# hard link delta compression
#
# parent: HLN0
# never compress, encrypted as specified in HLN0
CHUNK HARDLINK_DELTA "HDLT" HardLinkDelta
  ENCRYPT
  uint16 deltaAlgorithm;
  string name
  uint64 size
  crc32  crc

# hard link data
#
# parent: HLN0
# compress/encrypted as specified in HLN0
CHUNK HARDLINK_DATA "HDAT" HardLinkData
  ENCRYPT
  COMPRESS
  uint64 fragmentOffset
  uint64 fragmentSize
  crc32  crc
  data   data

# ----------------------------------------------------------------------

# special info header
#
# parent: none
# never compress/encrypted
CHUNK SPECIAL "SPE0" Special
  uint16 cryptAlgorithm;
  crc32  crc

# special entry
#
# parent: SPE0
# never compress/encrypted as specified in SPE0
CHUNK SPECIAL_ENTRY "SENT" SpecialEntry
  ENCRYPT
  uint16 specialType
  uint64 timeLastAccess
  uint64 timeModified
  uint64 timeLastChanged
  uint32 userId
  uint32 groupId
  uint32 permission
  uint32 major
  uint32 minor
  string name
  crc32  crc

# ----------------------------------------------------------------------

# end of file
