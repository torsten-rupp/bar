#
# $Revision$
# $Date$
# $Author$
# Contents: Makefile for bar
# Systems: all
#
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM                = @PLATFORM@

VALGRIND_ERROR_EXITCODE = 123
TESTCODE_EXITCODE       = 124

#------------------------------------ paths ----------------------------------

BASE_DIR           = $(CURDIR)
SOURCE_DIR         = $(abspath @srcdir@)
CONFIG_DIR         = @CONFIG_DIR@
TLS_DIR            = @TLS_DIR@

ifeq ($(DESTDIR),)
INSTALL_DIR        = $(if $(prefix),$(prefix),@INSTALL_DIR@)
INSTALL_BIN_DIR    = $(if $(bindir),$(bindir),@INSTALL_BIN_DIR@)
INSTALL_LOCALE_DIR = $(if $(datadir),$(datadir)/locale,@LOCALE_DIR@)
INSTALL_ETC_DIR    = $(if $(sysconfdir),$(sysconfdir),/etc)
INSTALL_CONFIG_DIR = $(if $(sysconfdir),$(sysconfdir)/bar,@CONFIG_DIR@)
INSTALL_MAN_DIR    = $(if $(mandir),$(mandir),@MAN_DIR@)
else
INSTALL_DIR        = @INSTALL_DIR@
INSTALL_BIN_DIR    = @INSTALL_BIN_DIR@
INSTALL_LOCALE_DIR = @LOCALE_DIR@
INSTALL_ETC_DIR    = /etc
INSTALL_CONFIG_DIR = @CONFIG_DIR@
INSTALL_MAN_DIR    = @MAN_DIR@
endif
INSTALL_TLS_DIR    = @TLS_DIR@

TEST_DATA_DIR      ?= test

#--------------------------------- tool chain --------------------------------

# shell in Makefile must be bash
SHELL                     = bash

CC                        = @CC@
CC_FLAGS                  = @CC_FLAGS@ -g
CC_WARN_FLAGS             = @CC_WARN_FLAGS@
CXX                       = @CXX@
CXX_FLAGS                 = @CXX_FLAGS@ -g
CXX_WARN_FLAGS            = @CXX_WARN_FLAGS@
CC_FLAGS_RELEASE          = @CC_FLAGS_RELEASE@
CC_FLAGS_DEBUG            = @CC_FLAGS_DEBUG@ -finstrument-functions
#-fno-sanitize-recover=all -fstack-protector-all -fsanitize=undefined
CC_FLAGS_OPTIMIZE         = @CC_FLAGS_OPTIMIZE@
CC_FLAGS_OPTIMIZE_RELEASE = @CC_FLAGS_OPTIMIZE_RELEASE@
CC_FLAGS_OPTIMIZE_DEBUG   = @CC_FLAGS_OPTIMIZE_DEBUG@
CC_FLAGS_GCOV             = @CC_FLAGS_GCOV@ -DGCOV -fprofile-arcs -ftest-coverage
CC_FLAGS_GPROF            = @CC_FLAGS_GPROF@ -DGPROF -pg
CC_FLAGS_VALGRIND         = @CC_FLAGS_VALGRIND@ -fno-builtin
CC_DEFINES                = PLATFORM_$(PLATFORM) @CC_DEFINES@ _GNU_SOURCE _LONG_LONG "tr(s)=s"
CC_DEFINES_RELEASE        = @CC_DEFINES_RELEASE@
CC_DEFINES_DEBUG          = @CC_DEFINES_DEBUG@
# -D_LONG_LONG
CC_INCLUDES               = . @CC_INCLUDES@ extern $(SOURCE_DIR)
ifdef WERROR
  CC_FLAGS   += -Werror
  CC_DEFINES += WERROR
endif

LD                        = $(if @CXX@,@CXX@,@CC@)
LD_FLAGS                  = @LD_FLAGS@
LD_FLAGS_RELEASE          = @LD_FLAGS_RELEASE@
LD_FLAGS_DEBUG            = @LD_FLAGS_DEBUG@ -Wl,-wrap,pthread_create
ifneq (@HEAPVIEW_DIR@,)
LD_FLAGS_DEBUG            += -Wl,-wrap,malloc -Wl,-wrap,calloc -Wl,-wrap,realloc -Wl,-wrap,free
else
LD_FLAGS_DEBUG            +=
endif
LD_FLAGS_GCOV             = @LD_FLAGS_GCOV@ -Wl,-wrap,pthread_create -fprofile-arcs
LD_FLAGS_GPROF            = @LD_FLAGS_GCOV@ -Wl,-wrap,pthread_create -pg
LD_FLAGS_VALGRIND         = @LD_FLAGS_VALGRIND@
LD_LIBRARY_PATHS          = @LIBRARY_PATHS@
ifneq (@HEAPVIEW_DIR@,)
  LD_LIBRARY_PATHS += @HEAPVIEW_DIR@
endif
LD_LIBRARIES              = @LIBRARIES@
#ubsan
LD_STATIC_LIBRARIES       = @STATIC_LIBRARIES@
ifneq (@HEAPVIEW_DIR@,)
  LD_STATIC_LIBRARIES += HeapView
endif
LD_STATIC_PREFIX          = -Wl,-Bstatic
LD_DYNAMIC_PREFIX         = -Wl,-Bdynamic

ifneq ($(SANITIZER),)
  CC_FLAGS_DEBUG += -fno-sanitize-recover=all -fstack-protector-all
  ifeq ($(SANITIZER),address)
    CC_FLAGS_DEBUG += -fsanitize=address
    LD_FLAGS       += -static-libasan
    LD_LIBRARIES   += asan
  else ifeq ($(SANITIZER),leak)
    CC_FLAGS_DEBUG += -fsanitize=leak
    LD_FLAGS       += -static-liblsan
    LD_LIBRARIES   += lsan
  else ifeq ($(SANITIZER),thread)
    CC_FLAGS_DEBUG += -fsanitize=thread
    LD_FLAGS       += -static-libtsan
    LD_LIBRARIES   += tsan
  else ifeq ($(SANITIZER),undefined)
    CC_FLAGS_DEBUG += -fsanitize=undefined
    LD_FLAGS       += -static-libubsan
    LD_LIBRARIES   += ubsan
  else ifeq ($(SANITIZER),help)
    $(error available sanitizers: address, leak, thread, undefined)
  else
    $(warning available sanitizers: address, leak, thread, undefined)
    $(error ERROR: unknown sanitizer function '$(SANITIZER)')
  endif
endif

STRIP                  = @STRIP@
OBJDUMP                = @OBJDUMP@
OBJCOPY                = @OBJCOPY@

XGETTEXT               = @XGETTEXT@
XGETTEXT_FLAGS         = -L C -k -ktr
MSGMERGE               = @MSGMERGE@
MSGFMT                 = @MSGFMT@

SVNVERSION             = @SVNVERSION@

DUMP_SYMS              = @DUMP_SYMS@

#---------------------------------- commands----------------------------------

ATTR           = @ATTR@
BC             = bc
BZIP2          = bzip2
CAT            = cat
CD             = cd
CHATTR         = chattr
CHMOD          = chmod
CP             = cp
CUT            = cut
DD             = dd
DDD            = ddd
DIFF           = diff
ECHO           = echo
ECHO_NO_LF     = echo -n
FIND           = find
GDB            = gdb
GREP           = grep
GETFATTR       = @GETFATTR@
INSTALL        = @INSTALL@
KILL           = kill
KILLALL        = killall
LN             = ln
LS             = ls
MKDIR          = mkdir
MKFIFO         = mkfifo
MKTEMP         = mktemp
NETCAT         = netcat
PERL           = @PERL@
READLINK       = readlink
RMDIR          = rmdir
RMF            = rm -f
RMRF           = rm -rf
SCP            = scp
SED            = sed
SETFATTR       = @SETFATTR@
SLEEP          = sleep
SSH            = ssh
SSHPASS        = sshpass
SORT           = sort
STAT           = stat
SUDO           = sudo
TAIL           = tail
TAR            = tar
TIME           = @TIME@
TIMEOUT        = timeout
TOUCH          = touch
ULIMIT         = ulimit
XARGS          = xargs

LCOV           = @LCOV@
GENHTML        = @GENHTML@

VALGRIND       = valgrind
VALGRIND_FLAGS = --gen-suppressions=no --track-fds=yes --suppressions=$(BASE_DIR)/valgrind.supp --error-exitcode=$(VALGRIND_ERROR_EXITCODE)

#------------------------ specific variables/settings ------------------------

# major, minor version number
VERSION_MAJOR := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) MINOR|$(SED) 's/MINOR=//g')
ifneq ($(SVNVERSION),)
  VERSION_REPOSITORY := $(shell ($(CAT) $(SOURCE_DIR)/../version|$(GREP) RELEASE= || $(SVNVERSION) . 2>/dev/null)|$(SED) 's/RELEASE=//g')
else
  VERSION_REPOSITORY := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) RELEASE=|$(SED) 's/RELEASE=//g')
endif

# supported min. compress algorithms
ifeq ($(MIN_COMPRESS_NAMES),)
  MIN_COMPRESS_NAMES = none
  MIN_COMPRESS_NAMES += zip9
  ifeq (@HAVE_BZ2@,1)
    MIN_COMPRESS_NAMES += bzip9
  endif
  ifeq (@HAVE_LZMA@,1)
    MIN_COMPRESS_NAMES += lzma9
  endif
  ifeq (@HAVE_LZO@,1)
    MIN_COMPRESS_NAMES += lzo5
  endif
  ifeq (@HAVE_LZ4@,1)
    MIN_COMPRESS_NAMES += lz4-9
  endif
  ifeq (@HAVE_ZSTD@,1)
    MIN_COMPRESS_NAMES += zstd19
  endif
endif

# supported min. crypt algorithms
MIN_CRYPT_NAMES  = none
ifeq (@HAVE_GCRYPT@,1)
  MIN_CRYPT_NAMES  += 3DES CAST5 BLOWFISH AES256 TWOFISH256 SERPENT256 CAMELLIA256
endif

# SQLite flags
SQLITE_FLAGS         = $(if @HAVE_USLEEP@,-DHAVE_USLEEP=1) -DSQLITE_DEFAULT_FILE_PERMISSIONS=0600 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT $(if @HAVE_ICU@,-DSQLITE_ENABLE_ICU)
SQLITE_FLAGS_RELEASE =
SQLITE_FLAGS_DEBUG   = -DSQLITE_DEBUG
#-DSQLITE_LOCK_TRACE

# xdelta3 flags
XDELTA3_FLAGS =

# additional options
OPTIONS ?=

# test settings
TEST_CONFIG                      = intermediate/bar.cfg
TEST_KEY_CRYPT_PUBLIC            = intermediate/key-crypt.public
TEST_KEY_CRYPT_PRIVATE           = intermediate/key-crypt.private
TEST_KEY_SIGNATURE_PUBLIC        = intermediate/signature-key.public
TEST_KEY_SIGNATURE_PRIVATE       = intermediate/signature-key.private

TEST_SERVER_PORT                 = 39909
TEST_SERVER_SSL_PORT             = 39910
TEST_SERVER_DIRECTORY            = test
TEST_SERVER_CONFIG               = $(TEST_SERVER_DIRECTORY)/bar.cfg
TEST_SERVER_PID_FILE             = $(TEST_SERVER_DIRECTORY)/barserver.pid
TEST_SERVER_JOBS                 = $(TEST_SERVER_DIRECTORY)/jobs
TEST_SERVER_DATABASE             = $(TEST_SERVER_DIRECTORY)/index.db
TEST_SERVER_LOG_FILE             = $(TEST_SERVER_DIRECTORY)/bar.log

# hosts, ports, passwords, keys for tests
TEST_HOST                        ?= localhost
TEST_PASSWORD                    =

TEST_HOST_FTP                    ?= $(TEST_HOST)
TEST_PASSWORD_FTP                ?= $(TEST_PASSWORD)

TEST_HOST_SSH                    ?= $(TEST_HOST)
TEST_PORT_SSH                    ?= 22
TEST_PASSWORD_SSH                ?= $(TEST_PASSWORD)
TEST_PUBLIC_KEY_SSH              =  $(HOME)/.ssh/id_rsa.pub
TEST_PRIVATE_KEY_SSH             =  $(HOME)/.ssh/id_rsa

TEST_HOST_SCP                    ?= $(TEST_HOST)
TEST_PORT_SCP                    ?= 22
TEST_PASSWORD_SCP                ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SCP              =  $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SCP             =  $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_SFTP                   ?= $(TEST_HOST)
TEST_PORT_SFTP                   ?= 22
TEST_PASSWORD_SFTP               ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SFTP             =  $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SFTP            =  $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_WEBDAV                 ?= localhost/webdav
TEST_PASSWORD_WEBDAV             ?= $(TEST_PASSWORD)

TEST_PASSWORD_CRYPT              =  Franz_Kafka:Die_Verwandlung

TEST_SLAVE_HOST                  =
TEST_SLAVE_PORT                  = 39911
TEST_SLAVE_USERNAME              ?= test
TEST_SLAVE_PASSWORD              ?= test
TEST_SLAVE_DIRECTORY             = slave
TEST_SLAVE_CONFIG                = $(TEST_SLAVE_DIRECTORY)/bar.cfg
TEST_SLAVE_PID_FILE              = $(TEST_SLAVE_DIRECTORY)/barserver.pid
TEST_SLAVE_JOBS                  = $(TEST_SLAVE_DIRECTORY)/jobs
TEST_SLAVE_DATABASE              = $(TEST_SLAVE_DIRECTORY)/index.db
TEST_SLAVE_LOG_FILE              = $(TEST_SLAVE_DIRECTORY)/bar.log

# languages
LANGUAGES = de jp

#---------------------------------- rules ------------------------------------

# source search paths
vpath %.c   $(SOURCE_DIR)
vpath %.cpp $(SOURCE_DIR)
ifeq (@HAVE_BREAKPAD@,1)
vpath %.cc  ../packages/breakpad/src/processor
endif

# disable implicit rule for *.y -> *.c
%.c: %.y

# compile C source
release/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o release/$*.o

debug/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o debug/$*.o

gcov/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gcov/$*.o

gprof/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gprof/$*.o

valgrind/%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o valgrind/$*.o

common/%.o: $(SOURCE_DIR)/common/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/common/$*.c -o common/$*.o

%.o: $(SOURCE_DIR)/%.c | errors.h archive_format.h archive_format_const.h index_definition.h
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $*.o

release/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o release/$*.o

debug/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o debug/$*.o

gcov/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gcov/$*.o

gprof/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o gprof/$*.o

valgrind/%.o: %.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o valgrind/$*.o

%.o: %.c
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $*.o

# compile C++ source
release/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_RELEASE) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o release/$*.o

debug/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_DEBUG) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o debug/$*.o

gcov/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_GCOV) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o gcov/$*.o

gprof/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_GPROF) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o gprof/$*.o

valgrind/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_VALGRIND) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o valgrind/$*.o

common/%.o: common/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c common/$*.cpp -o common/$*.o

%.o: %.cpp
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.cpp -o $*.o

%.o: %.cc
	$(CXX) $(CXX_FLAGS) $(CC_FLAGS_OPTIMIZE) $(CC_FLAGS_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_REPOSITORY="$(VERSION_REPOSITORY)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.cc -o $*.o

%.o:
	$(error Unkown object file '$*.o': do not know how to create it)

#--------------------------------- objects -----------------------------------

BAR_SOURCES              = bar.c \
                           commands_create.c \
                           commands_list.c \
                           commands_test.c \
                           commands_compare.c \
                           commands_restore.c \
                           commands_convert.c \
                           archive.c \
                           chunks.c \
                           entrylists.c \
                           compress.c \
                           deltasources.c \
                           deltasourcelists.c \
                           crypt.c \
                           storage.c \
                           index.c \
                           jobs.c \
                           continuous.c \
                           server.c \
                           server_io.c \
                           connector.c \

COMMON_SOURCES           = common/arrays.c \
                           common/autofree.c \
                           common/bitmaps.c \
                           common/cmdoptions.c \
                           common/configvalues.c \
                           common/database.c \
                           common/devices.c \
                           common/dictionaries.c \
                           common/files.c \
                           common/filesystems.c \
                           common/fragmentlists.c \
                           common/global.c \
                           common/lists.c \
                           common/minidump.cpp \
                           common/misc.c \
                           common/msgqueues.c \
                           common/network.c \
                           common/patternlists.c \
                           common/patterns.c \
                           common/passwords.c \
                           common/ringbuffers.c \
                           common/semaphores.c \
                           common/stacktraces.c \
                           common/stringlists.c \
                           common/stringmaps.c \
                           common/strings.c \
                           common/threads.c \

BAR_SOURCES_FILTER       = $(if @HAVE_BFD@,,stacktraces.c) \

BAR_HEADERS              = $(patsubst %.c,  %.h,$(filter %.c,  $(BAR_SOURCES))) \
                           $(patsubst %.cpp,%.h,$(filter %.cpp,$(BAR_SOURCES))) \
                           bar_global.h \

COMMON_SOURCES_FILTER    = $(if @HAVE_BREAKPAD@,,minidump.cpp) \

COMMON_HEADERS           = $(patsubst %.c,  %.h,$(filter %.c,  $(COMMON_SOURCES))) \
                           $(patsubst %.cpp,%.h,$(filter %.cpp,$(COMMON_SOURCES))) \

BAR_OBJECTS              = $(foreach z,$(filter %.c,  $(filter-out $(BAR_SOURCES_FILTER),$(BAR_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(filter-out $(BAR_SOURCES_FILTER),$(BAR_SOURCES))),$(patsubst %.cpp,%.o,$z)) \
                           errors.o \
                           archive_format.o \
                           $(foreach z,$(filter %.c,  $(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.cpp,%.o,$z)) \

BAR_OBJECTS_RELEASE      = $(addprefix release/,$(BAR_OBJECTS))

BAR_OBJECTS_DEBUG        = $(addprefix debug/,$(BAR_OBJECTS))

BAR_OBJECTS_GCOV         = $(addprefix gcov/,$(BAR_OBJECTS))

BAR_OBJECTS_GPROF        = $(addprefix gprof/,$(BAR_OBJECTS))

BAR_OBJECTS_VALGRIND     = $(addprefix valgrind/,$(BAR_OBJECTS))

SQLITE3_SOURCES          = $(if $(wildcard ../sqlite/sqlite3.c),../sqlite/sqlite3.c,sqlite3.c)

SQLITE3_HEADERS          = $(if $(wildcard ../sqlite/sqlite3.h),../sqlite/sqlite3.h,sqlite3.h)

SQLITE3_OBJECTS          = $(foreach z,$(filter %.c,  $(notdir $(SQLITE3_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(notdir $(SQLITE3_SOURCES))),$(patsubst %.cpp,%.o,$z)) \

SQLITE3_OBJECTS_RELEASE  = $(addprefix release/,$(SQLITE3_OBJECTS))

EXTERN_SOURCES           = $(SQLITE3_SOURCES) \

EXTERN_HEADERS           = $(patsubst %.c,%.h,$(EXTERN_SOURCES)) \

EXTERN_OBJECTS           = $(foreach z,$(filter %.c,  $(notdir $(EXTERN_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(notdir $(EXTERN_SOURCES))),$(patsubst %.cpp,%.o,$z)) \
                           $(if @HAVE_XDELTA3@,xdelta3.o) \

EXTERN_OBJECTS_RELEASE   = $(addprefix release/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_DEBUG     = $(addprefix debug/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_GCOV      = $(addprefix gcov/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_GPROF     = $(addprefix gprof/,$(EXTERN_OBJECTS))

EXTERN_OBJECTS_VALGRIND  = $(addprefix valgrind/,$(EXTERN_OBJECTS))

DESTROYER_SOURCES        = destroyer.c \

DESTROYER_HEADERS        = $(patsubst %.c,%.h,$(DESTROYER_SOURCES)) \

DESTROYER_OBJECTS        = $(foreach z,$(filter %.c,  $(DESTROYER_SOURCES)),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(DESTROYER_SOURCES)),$(patsubst %.cpp,%.o,$z)) \
                           errors.o \
                           $(foreach z,$(filter %.c,  $(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(filter-out $(COMMON_SOURCES_FILTER),$(COMMON_SOURCES))),$(patsubst %.cpp,%.o,$z)) \


BAR_MINIDUMP_SOURCES     = bar-minidump.cpp \

BAR_MINIDUMP_HEADERS     = \

BAR_MINIDUMP_OBJECTS     = $(foreach z,$(filter %.c,  $(BAR_MINIDUMP_SOURCES)),$(patsubst %.c,  %.o,$z)) \
                           $(foreach z,$(filter %.cpp,$(BAR_MINIDUMP_SOURCES)),$(patsubst %.cpp,%.o,$z)) \
                           $(foreach z,$(filter %.cc, $(BAR_MINIDUMP_SOURCES)),$(patsubst %.cc, %.o,$z)) \
                           stackwalk_common.o \

BAR_SQLITE3_SOURCES      = bar-sqlite3.c \
                           \
                           common/global.c \
                           common/lists.c \
                           common/strings.c \
                           common/stringlists.c \
                           common/files.c \
                           common/devices.c \
                           common/database.c \
                           common/threads.c \
                           common/misc.c \
                           common/arrays.c \
                           common/semaphores.c \
                           common/stacktraces.c \

BAR_SQLITE3_HEADERS      = $(patsubst %.c,%.h,$(filter-out bar-sqlite3.c,$(BAR_SQLITE3_SOURCES))) \

BAR_SQLITE3_OBJECTS      = $(addprefix release/,$(foreach z,$(BAR_SQLITE3_SOURCES),$(patsubst %.c,%.o,$z))) \
                           release/errors.o \

SHOWCHUNKS_SOURCES       = showchunks.c \

SHOWCHUNKS_OBJECTS       = $(addprefix release/,$(foreach z,$(SHOWCHUNKS_SOURCES),$(patsubst %.c,%.o,$z))) \
                           release/errors.o \

OTHER_SOURCES            = forward.h \
                           \
                           compress_zip.c \
                           compress_bz2.c \
                           compress_lzma.c \
                           compress_lzo.c \
                           compress_lz4.c \
                           compress_zstd.c \
                           compress_xd3.c \
                           \
                           storage_file.c \
                           storage_ftp.c \
                           storage_scp.c \
                           storage_sftp.c \
                           storage_webdav.c \
                           storage_optical.c \
                           storage_device.c \
                           storage_master.c \
                           \
                           index_version1.c \
                           index_version2.c \
                           index_version3.c \
                           index_version4.c \
                           index_version5.c \
                           index_version6.c \
                           \
                           archive_format.pl \
                           archive_format.def \
                           index_definition.pl \
                           index_definition.def \
                           valgrind.supp \
                           bar.cfg \
                           bar-keygen.in \
                           \
                           common/filesystems_ext.c \
                           common/filesystems_fat.c \
                           common/filesystems_reiserfs.c \

INTERMEDIATE_SOURCES     = errors.c \
                           archive_format.c \

INTERMEDIATE_HEADERS     = errors.h \
                           archive_format.h \
                           archive_format_const.h \
                           index_definition.h \

TARGETS                  = bar@EXEEXT@ \
                           bar-debug@EXEEXT@ \
                           bar-gcov@EXEEXT@ \
                           bar-gprof@EXEEXT@ \
                           bar-valgrind@EXEEXT@ \
                           $(foreach z,$(LANGUAGES),po/$z/LC_MESSAGES/bar.mo) \
                           $(if @HAVE_BREAKPAD@,release/bar.sym debug/bar.sym) \
                           bar-keygen \
                           bar-sqlite3@EXEEXT@ \
                           destroyer@EXEEXT@ \
                           $(if @HAVE_BREAKPAD@,bar-minidump@EXEEXT@) \

#------------------------------ dependencies ---------------------------------

# default target
.PHONY: all clean distclean depend
all: $(TARGETS)

# clean
clean: \
  testcode_clean \
  gcov_clean \
  test_clean
	$(RMF) $(BAR_OBJECTS_RELEASE)
	$(RMF) $(BAR_OBJECTS_DEBUG)
	$(RMF) $(BAR_OBJECTS_GCOV)
	$(RMF) $(BAR_OBJECTS_GPROF)
	$(RMF) $(BAR_OBJECTS_VALGRIND)
	$(RMF) $(EXTERN_OBJECTS_RELEASE)
	$(RMF) $(EXTERN_OBJECTS_DEBUG)
	$(RMF) $(EXTERN_OBJECTS_GCOV)
	$(RMF) $(EXTERN_OBJECTS_VALGRIND)
	$(RMF) $(DESTROYER_OBJECTS)
	$(RMF) $(BAR_MINIDUMP_OBJECTS)
	$(RMF) $(INTERMEDIATE_SOURCES) $(INTERMEDIATE_HEADERS)
	$(RMF) /tmp/bar.cfg /tmp/bar-slave.cfg /tmp/bar.log /tmp/bar-slave.log /tmp/pairing
	$(RMF) bar-gcov.info
	$(RMF) $(TARGETS)

distclean: \
  clean \
  test_distclean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h
	$(RMRF) release debug valgrind

# help
.PHONY: help
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(ECHO) "  bar"
	@$(ECHO) "  bar-debug [SANITIZER=<sanitizer>]"
	@$(ECHO) "  bar-valgrind"
	@$(ECHO) "  bar-gcov"
	@$(ECHO) ""
	@$(ECHO) "  po"
	@$(ECHO) ""
	@$(ECHO) "  run                                       run server"
	@$(ECHO) "  run_slave                                 run server slave"
	@$(ECHO) "  run_en"
	@$(ECHO) "  run_de"
	@$(ECHO) "  run_jp"
	@$(ECHO) "  run_ssl                                   run server with SSL"
	@$(ECHO) ""
	@$(ECHO) "  rundev                                    run development server"
	@$(ECHO) "  rundevd, rundevd1                         run development server (debug version)"
	@$(ECHO) "  rundevd2                                  run development server 2 (debug version)"
	@$(ECHO) "  rundevgdb                                 run development server with GDB"
	@$(ECHO) "  rundevddd                                 run development server with DDD"
	@$(ECHO) "  rundevgcov                                run development server with gcov"
	@$(ECHO) "  rundevvalgrind                            run development server with valgrind"
	@$(ECHO) "  rundev_slave                              run development server slave"
	@$(ECHO) "  rundevd_slave                             run development server slave (debug version)"
	@$(ECHO) "  rundevgdb_slave                           run development server slave with GDB"
	@$(ECHO) "  rundevddd_slave                           run development server slave with DDD"
	@$(ECHO) "  rundev_en"
	@$(ECHO) "  rundev_de"
	@$(ECHO) "  rundev_jp"
	@$(ECHO) "  rundev_ssl"
	@$(ECHO) "  rundev_test"
	@$(ECHO) ""
	@$(MAKE) -C test --no-print-directory -s help_output
	@$(ECHO) ""
	@$(ECHO) "  show_debug_test_code"
	@$(ECHO) "  run_debug_test_code"
	@$(ECHO) ""
	@$(ECHO) "  gcov [CHECK=1|2|3|4|5|6|7|8]"
	@$(ECHO) "  gcov_clean"
	@$(ECHO) "  gcov_zero                                 reset gcov data"
	@$(ECHO) "  gcov<1|2|3|4|5|6|7|8>"
	@$(ECHO) "  gcov_html                                 re-generate gcov HTML report"
	@$(ECHO) ""
	@$(ECHO) "  memcheck [CHECK=1|2|2a|2b|2c|2d|2e|3|4|5|6|7]"
	@$(ECHO) "  memcheck_extended [CHECK=1|2|2a|2b|2c|2d|2e|3|4|5|6|7]"
	@$(ECHO) "  memcheck<1|2|2a|2b|2c|2d|2e|3|4|5|6|7>"
	@$(ECHO) ""
	@$(ECHO) "  testcode_init                             init test code name"
	@$(ECHO) "  testcode_all                              run all test code"
	@$(ECHO) "  testcode_list                             list test code names"
	@$(ECHO) "  testcode [TESTCODE=<name>]                run test code or test code <name>"
	@$(ECHO) ""
	@$(ECHO) "  performance"
	@$(ECHO) "  performance1, performance_none"
	@$(ECHO) "  performance2, performance_zip_compress"
	@$(ECHO) "  performance3, performance_bzip2_compress"
	@$(ECHO) "  performance4, performance_lzma_compress"
	@$(ECHO) "  performance5, performance_delta_compress"
	@$(ECHO) ""
	@$(ECHO) "  crashdump MINIDUMP=<file name>"
	@$(ECHO) ""
	@$(ECHO) "  dist"

# create dependencies
.PHONY: depend
depend: Makefile.depend

Makefile.depend: $(SOURCE_DIR)/Makefile $(SOURCE_DIR)/Makefile.in
	$(MAKE) NO_DEPEND=1 $(INTERMEDIATE_SOURCES) $(INTERMEDIATE_HEADERS)
	$(ECHO) >Makefile.depend
	for z in $(BAR_SOURCES) $(EXTERN_SOURCES) $(DESTROYER_SOURCES) $(BAR_MINIDUMP_SOURCES) $(BAR_SQLITE3_SOURCES); do \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(foreach header,$(INTERMEDIATE_HEADERS),\
              $(SED) 's|$(SOURCE_DIR)/$(header)|$(header)|g' | \
            ) \
            $(SED) 's|\(.*\.o:\)|release/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(foreach header,$(INTERMEDIATE_HEADERS),\
              $(SED) 's|$(SOURCE_DIR)/$(header)|$(header)|g' | \
            ) \
            $(SED) 's|\(.*\.o:\)|debug/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(foreach header,$(INTERMEDIATE_HEADERS),\
              $(SED) 's|$(SOURCE_DIR)/$(header)|$(header)|g' | \
            ) \
            $(SED) 's|\(.*\.o:\)|gcov/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(foreach header,$(INTERMEDIATE_HEADERS),\
              $(SED) 's|$(SOURCE_DIR)/$(header)|$(header)|g' | \
            ) \
            $(SED) 's|\(.*\.o:\)|gprof/\1|g' | \
            $(CAT) >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(foreach header,$(INTERMEDIATE_HEADERS),\
              $(SED) 's|$(SOURCE_DIR)/$(header)|$(header)|g' | \
            ) \
            $(SED) 's|\(.*\.o:\)|valgrind/\1|g' | \
            $(CAT) >> Makefile.depend; \
        done;
	for z in $(COMMON_SOURCES); do \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's|\(.*\.o:\)|release/common/\1|g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's|\(.*\.o:\)|debug/common/\1|g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's|\(.*\.o:\)|gcov/common/\1|g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's|\(.*\.o:\)|gprof/common/\1|g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's|\(.*\.o:\)|valgrind/common/\1|g' >> Makefile.depend; \
        done;

# ----------------------------------------------------------------------------

# create BAR
bar@EXEEXT@: \
  $(BAR_OBJECTS_RELEASE) \
  $(EXTERN_OBJECTS_RELEASE)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq (@HAVE_BREAKPAD@,1)
	$(MAKE) release/bar.sym.bz2.o
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ release/bar.sym.bz2.o $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
endif

bar-debug@EXEEXT@: \
  $(BAR_OBJECTS_DEBUG) \
  $(EXTERN_OBJECTS_DEBUG)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_DEBUG) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
	$(OBJCOPY) --only-keep-debug bar-debug@EXEEXT@ $@.sym
ifeq (@HAVE_BREAKPAD@,1)
	$(MAKE) debug/bar.sym.bz2.o
	$(LD) $(LD_FLAGS) $(LD_FLAGS_DEBUG) -o $@ $^ debug/bar.sym.bz2.o $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)
endif

bar-debug@EXEEXT@.sym: bar-debug@EXEEXT@
	$(OBJCOPY) --only-keep-debug bar-debug@EXEEXT@ $@

bar-gcov@EXEEXT@: \
  $(BAR_OBJECTS_GCOV) \
  $(EXTERN_OBJECTS_GCOV)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GCOV) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

bar-gprof@EXEEXT@: \
  $(BAR_OBJECTS_GPROF) \
  $(EXTERN_OBJECTS_GPROF)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GPROF) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

# Note: a special valgrind version is needed because of a bug in valgrind
#       reporting false positives when gcc builtin-functions are used.
#       See: https://bugs.launchpad.net/ubuntu/+source/valgrind/+bug/852760
bar-valgrind@EXEEXT@: \
  $(BAR_OBJECTS_VALGRIND) \
  $(EXTERN_OBJECTS_VALGRIND)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_VALGRIND) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

# i18n
.PHONY: i18n po
i18n po: \
  po/german.po \
  po/japanese.po

po/bar.pot: $(SOURCE_DIR)/*.c
	$(INSTALL) -d $(@D)
	$(XGETTEXT) $(XGETTEXT_FLAGS) -o $@ *.c

po/german.po: po/bar.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ po/bar.pot
	$(TOUCH) $@

po/japanese.po: po/bar.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ po/bar.pot
	$(TOUCH) $@

po/de/LC_MESSAGES/bar.mo: po/german.po
	$(INSTALL) -d $(@D)
	$(MSGFMT) -o $@ po/german.po

po/jp/LC_MESSAGES/bar.mo: po/japanese.po
	$(INSTALL) -d $(@D)
	$(MSGFMT) -o $@ po/japanese.po

# create BAR symbol files
ifeq (@HAVE_BREAKPAD@,1)
release/bar.sym: bar@EXEEXT@
	$(DUMP_SYMS) ./bar@EXEEXT@ >$@
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol file."
endif

ifeq (@HAVE_BREAKPAD@,1)
release/bar.sym.bz2.o: release/bar.sym
	$(BZIP2) -c < release/bar.sym >release/bar.sym.bz2
	(format=$(shell $(OBJDUMP) -a release/bar.o|grep 'file format'|sed 's/.*file format\s*//g'); \
         name=$(subst .,_,$(subst /,_,release/bar.sym.bz2)); \
         $(OBJCOPY) \
           -I binary \
           -O $$format \
           -B i386 \
           --redefine-sym _binary_$${name}_start=_minidump_symbols_start \
           --redefine-sym _binary_$${name}_end=_minidump_symbols_end \
           --redefine-sym _binary_$${name}_size=_minidump_symbols_size \
           release/bar.sym.bz2 $@; \
        )
	$(RMF) release/bar.sym.bz2
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol object file."
endif

ifeq (@HAVE_BREAKPAD@,1)
debug/bar.sym: bar-debug@EXEEXT@
	$(DUMP_SYMS) ./bar-debug@EXEEXT@ >$@
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol file."
endif

ifeq (@HAVE_BREAKPAD@,1)
debug/bar.sym.bz2.o: debug/bar.sym
	$(BZIP2) -c < debug/bar.sym >debug/bar.sym.bz2
	(format=$(shell $(OBJDUMP) -a debug/bar.o|grep 'file format'|sed 's/.*file format\s*//g'); \
         name=$(subst .,_,$(subst /,_,debug/bar.sym.bz2)); \
         $(OBJCOPY) \
           -I binary \
           -O $$format \
           -B i386 \
           --redefine-sym _binary_$${name}_start=_minidump_symbols_start \
           --redefine-sym _binary_$${name}_end=_minidump_symbols_end \
           --redefine-sym _binary_$${name}_size=_minidump_symbols_size \
           debug/bar.sym.bz2 $@; \
        )
	$(RMF) debug/bar.sym.bz2
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol object file."
endif

# compile SQLite, xdelta C source without warning flags
release/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(SQLITE_FLAGS)                       $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
debug/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
gcov/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
gprof/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
valgrind/sqlite3.o: $(SQLITE3_SOURCES) $(SQLITE3_HEADERS)
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(SQLITE_FLAGS) $(SQLITE_FLAGS_DEBUG) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@

ifeq (@HAVE_XDELTA3@,1)
release/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(XDELTA3_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
debug/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(XDELTA3_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
gcov/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(XDELTA3_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
gprof/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(XDELTA3_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
valgrind/xdelta3.o: ../xdelta3/xdelta3.c
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_FLAGS_OPTIMIZE) -DHAVE_CONFIG_H -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(XDELTA3_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
endif

# create bar-keygen script
bar-keygen@SHELLEXT@: $(SOURCE_DIR)/bar-keygen.in
	$(CAT) $(SOURCE_DIR)/bar-keygen.in | \
        ( \
          while IFS="" read -r line; do \
            if   test "$$line" = "@CERTTOOL/CA.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/certtool/ca.tmpl; \
            elif test "$$line" = "@CERTTOOL/SERVER.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/certtool/server.tmpl; \
            elif test "$$line" = "@OPENSSL/CA.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/openssl/ca.tmpl; \
            elif test "$$line" = "@OPENSSL/SERVER.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/openssl/server.tmpl; \
            else \
              line=`$(ECHO) "$$line"|$(SED) 's|\@TLS_DIR\@|$(DESTDIR)$(TLS_DIR)|g'`; \
              line=`$(ECHO) "$$line"|$(SED) 's|\@CONFIG_DIR\@|$(DESTDIR)$(CONFIG_DIR)|g'`; \
              $(ECHO) "$$line"; \
            fi; \
          done; \
        ) >$@
	$(CHMOD) 775 $@

# error definition
errors.h: $(SOURCE_DIR)/../errors.def $(SOURCE_DIR)/../errors.pl
	$(PERL) $(SOURCE_DIR)/../errors.pl < $^ -h $@
errors.c: $(SOURCE_DIR)/../errors.def $(SOURCE_DIR)/../errors.pl
	$(PERL) $(SOURCE_DIR)/../errors.pl < $^ -c $@
release/errors.o: errors.c errors.h
debug/errors.o: errors.c errors.h
gcov/errors.o: errors.c errors.h
gprof/errors.o: errors.c errors.h
valgrind/errors.o: errors.c errors.h

# archive format definition
archive_format.h: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -h $@
archive_format_const.h: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -n $@
archive_format.c: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -c $@ -i archive.h -i archive_format.h
release/archive_format.o: archive_format.c archive_format.h
debug/archive_format.o: archive_format.c archive_format.h
gcov/archive_format.o: archive_format.c archive_format.h
gprof/archive_format.o: archive_format.c archive_format.h
valgrind/archive_format.o: archive_format.c archive_format.h

# index database definition
index_definition.h: $(SOURCE_DIR)/index_definition.pl $(SOURCE_DIR)/index_definition.def
	$(PERL) $(SOURCE_DIR)/index_definition.pl < $(SOURCE_DIR)/index_definition.def >$@

# create destroyer (for testing only!)
destroyer@EXEEXT@: \
  $(DESTROYER_OBJECTS) \
  $(EXTERN_OBJECTS_RELEASE)
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

# create bar-minidump
bar-minidump.o: bar-minidump.cc

stackwalk_common.o: ../packages/breakpad/src/processor/stackwalk_common.cc

bar-minidump@EXEEXT@: $(BAR_MINIDUMP_OBJECTS)
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          -lbreakpad -ldisasm

# create show chunks program
showchunks@EXEEXT@: \
  $(SHOWCHUNKS_OBJECTS)
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

# create bar-sqlite3
bar-sqlite3@EXEEXT@: \
  $(BAR_SQLITE3_OBJECTS) \
  $(SQLITE3_OBJECTS_RELEASE)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z)

# ----------------------------------------------------------------------------

/tmp/bar.cfg: bar.cfg
	$(INSTALL) -m 600 bar.cfg /tmp/bar.cfg

/tmp/bar-slave.cfg: bar.cfg
	$(INSTALL) -m 600 bar.cfg /tmp/bar-slave.cfg

../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem:
	$(MAKE) -C .. keys

# run server
.PHONY: rund runserverd run_ssl runserver_ssl
.PHONY: run_slave runserver_slave rund_slave runserverd_slave
run runserver: bar@EXEEXT@
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          $(OPTIONS)

rund runserverd: bar-debug@EXEEXT@
	$(INSTALL) -d jobs
	nice ./bar-debug@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          $(OPTIONS)

run_ssl runserver_ssl: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          $(OPTIONS)

run_slave runserver_slave: bar@EXEEXT@
	$(INSTALL) -d jobs
	touch /tmp/pairing
	nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=slave \
          --index-database=bar-index-slave.db \
          --jobs-directory=jobs-slave \
          --incremental-data-directory=/tmp \
          --pairing-master-file=/tmp/pairing \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rund_slave runserverd_slave: bar-debug@EXEEXT@
	$(INSTALL) -d jobs
	touch /tmp/pairing
	nice ./bar-debug@EXEEXT@ --daemon -D \
          --server-mode=slave \
          --index-database=bar-index-slave.db \
          --jobs-directory=jobs-slave \
          --incremental-data-directory=/tmp \
          --pairing-master-file=/tmp/pairing \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

.PHONY: run_en runserver_en run_de runserver_de run_ssl runserver_ssl
run_en runserver_en: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=en_US nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          $(OPTIONS)

run_de runserver_de: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=de_DE nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          $(OPTIONS)

run_jp runserver_jp: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=ja_JP nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          $(OPTIONS)


.PHONY: rundev rundevd rundevd1 rundevd2 rundevgdb rundevddd rundevvalgrind rundev_en rundev_de rundev_jp rundev_ssl runserver runserver_ssl rundev_test
.PHONY: rundev_slave rundevd_slave rundevgdb_slave rundevddd_slave
rundev: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev1 rundevd: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundevd2: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --continuous-database=bar-continuous2.db --index-database=bar-index2.db --index-database-keep-time=365days \
          --jobs-directory=jobs2 \
          --incremental-data-directory=/tmp \
          --server-port=39999 --server-tls-port=0 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar2.log --log=all --server-debug \
          $(OPTIONS)

rundevgdb: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(GDB) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
          --unmount-command="$(SUDO) /bin/umount %directory" \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundevddd: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(DDD) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundevvalgrind: bar-valgrind /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) --leak-check=full ./bar-valgrind --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar.log --log=all --server-debug \
          $(OPTIONS)

rundev_slave: bar@EXEEXT@ /tmp/bar-slave.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	touch /tmp/pairing
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar-slave.cfg \
          --server-mode=slave \
          --continuous-database=bar-continuous-slave.db --index-database=bar-index-slave.db --index-database-keep-time=365days \
          --jobs-directory=jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=39911 --server-tls-port=39912 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevd_slave: bar-debug@EXEEXT@ /tmp/bar-slave.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	touch /tmp/pairing
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar-slave.cfg \
          --server-mode=slave \
          --continuous-database=bar-continuous-slave.db --index-database=bar-index-slave.db --index-database-keep-time=365days \
          --jobs-directory=jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=39911 --server-tls-port=39912 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevgdb_slave: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	touch /tmp/pairing
	$(GDB) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=slave \
          --continuous-database=bar-continuous-slave.db --index-database=bar-index-slave.db --index-database-keep-time=365days \
          --jobs-directory=jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=39911 --server-tls-port=39912 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all \
          $(OPTIONS)

rundevddd_slave: bar-debug@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	touch /tmp/pairing
	$(DDD) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=slave \
          --continuous-database=bar-continuous-slave.db --index-database=bar-index-slave.db --index-database-keep-time=365days \
          --jobs-directory=jobs-slave \
          --incremental-data-directory=/tmp \
          --server-port=39911 --server-tls-port=39912 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --pairing-master-file=/tmp/pairing \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          --log-file=/tmp/bar-slave.log --log=all --server-debug \
          $(OPTIONS)

rundev_en: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=en_US nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_de: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=de_DE nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --index-database=bar-index.db \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_jp: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=ja_JP nice ./bar@EXEEXT@ --daemon -D \
          --server-mode=master \
          --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_ssl: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --index-database=bar-index.db --index-database-keep-time=365days \
          --jobs-directory=jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
          --log-file=/tmp/bar.log --log=all \
          $(OPTIONS)

rundev_test: bar@EXEEXT@ /tmp/bar.cfg ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar --daemon -D --no-default-config --config=/tmp/bar.cfg \
          --server-mode=master \
          --index-database=intermediate/index.db \
          --jobs-directory=intermediate/jobs \
          --incremental-data-directory=/tmp \
          --server-port=39909 --server-tls-port=39910 \
          --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
          --unmount-command='$(SUDO) /bin/umount %directory' \
          --verbose=0 \
          $(OPTIONS)

# ----------------------------------------------------------------------------

# tests
.PHONY: test test_clean test_distclean
test: \
  bar@EXEEXT@ \
  bar-debug@EXEEXT@ \
  bar-gcov@EXEEXT@ \
  bar-gprof@EXEEXT@ \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(RMF) bar-test.log
	@$(MAKE) -C test LOGFILE=$(abspath bar-test.log) $@
test%: \
  bar@EXEEXT@ \
  bar-debug@EXEEXT@ \
  bar-gcov@EXEEXT@ \
  bar-gprof@EXEEXT@ \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C test $@
test%-debug: \
  bar-debug@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C test $@

test%-gcov: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C test $@

test%-gprof: \
  bar-gprof@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C test $@

test%-valgrind: \
  bar-valgrind@EXEEXT@ \
  bar-keygen@SHELLEXT@
	@$(MAKE) -C test $@

test_clean:
	@$(MAKE) -C test clean

test_distclean:
	@$(MAKE) -C test distclean

# ----------------------------------------------------------------------------

# helper function to check valid exitcode
# call functionTestCheckExitcode,<min. valid exitcode>,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $3 2>/dev/null; if test $$? -lt $1 -o $$? -gt $2; then false; fi

# bar executables
BAR_GCOV     = ./bar-gcov@EXEEXT@
BAR_VALGRIND = ./bar-valgrind@EXEEXT@

# test environment variables
TEST_ENVIRONMENT = DISPLAY= SSH_ASKPASS=

run_debug_test_code:
	$(call functionTestCheckExitcode,125,125,initAll1=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll2=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll3=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll4=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll5=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll6=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll7=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll8=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll9=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll10=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll11=1 $(TEST_BAR))

# helper function to check if parameter exists
# call functionVerifyParameter,<name>[,message]
functionVerifyParameter = \
  if test -z "$($1)"; then \
    if test -n "$2"; then \
      $(ECHO) >&2 "ERROR: $2"; \
    else \
      $(ECHO) >&2 "ERROR: parameter '$1' not set"; \
    fi; \
    exit 1; \
  fi

# code coverage analysis
.PHONY: gcov coverage
.PHONY: gcov_clean
.PHONY: gcov_zero
.PHONY: gcov_html
gcov coverage: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
ifneq ($(LCOV),)
	@$(MAKE) gcov_basic \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_compress \
          COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_delta_compress \
          COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_crypt \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="$(MIN_CRYPT_NAMES)" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_asymmetric_crypt \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_signatures \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_split \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_convert \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_image \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          IMAGE_COMPRESS_NAMES=none \
          EXT_BLOCK_SIZES=default \
          QUIET=1
	@$(MAKE) gcov_storage_file \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
ifneq ($(TEST_PASSWORD_FTP),)
	@$(MAKE) gcov_storage_ftp \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
ifneq ($(TEST_PASSWORD_SSH),)
	@$(MAKE) gcov_storage_scp \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_storage_sftp \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
ifneq ($(TEST_PASSWORD_WEBDAV),)
	@$(MAKE) gcov_storage_webdav \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
endif
	@$(MAKE) gcov_optical \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          OPTIONS="--cd-blank-command=true --cd-write-command=true --cd-write-image-command=true --dvd-blank-command=true --dvd-write-command=true --dvd-write-image-command=true --bd-blank-command=true --bd-write-command=true --bd-write-image-command=true" \
          TEST_OPTICAL_SLEEP_TIME=0 \
          TEST_OPTICAL_EMULATION=1 \
          QUIET=1
	@$(MAKE) gcov_device \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          OPTIONS="--cd-blank-command=true --cd-write-command=true --cd-write-image-command=true --dvd-blank-command=true --dvd-write-command=true --dvd-write-image-command=true --bd-blank-command=true --bd-write-command=true --bd-write-image-command=true" \
          TEST_DEVICE_SLEEP_TIME=0 \
          TEST_DEVICE_EMULATION=1 \
          QUIET=1
	@$(MAKE) gcov_index \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_server \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_combined \
          COMBINED_COMPRESS_NAMES="$(MIN_COMPRESS_NAMES)" \
          COMBINED_CRYPT_NAMES="none $(if @HAVE_GCRYPT@,AES256)" \
          QUIET=1
	@$(MAKE) gcov_arguments \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_misc \
          COMPRESS_NAMES="none" \
          CRYPT_NAMES="none" \
          QUIET=1
	@$(MAKE) gcov_html
ifeq ($(TEST_PASSWORD_FTP),)
	@$(ECHO) Warning: no FTP password - skipped ftp test
endif
ifeq ($(TEST_PASSWORD_SSH),)
	@$(ECHO) Warning: no SSH password - skipped scp/sftp test
endif
else
	@$(ECHO) "ERROR: no 'lcov' command - cannot run coverage analysis"
endif

gcov%: \
  bar-gcov@EXEEXT@ \
  bar-keygen@SHELLEXT@
	$(MAKE) -C test $(subst gcov,test,$@) TEST_BAR=$(BASE_DIR)/bar-gcov@EXEEXT@

#	$(MAKE) gcov_html

gcov_clean:
	$(FIND) gcov -type f -name '*.gcda'|$(XARGS) $(RMF)
	$(RMRF) coverage

gcov_zero:
	$(LCOV) --base-directory . --directory . --zerocounters

gcov_html:
ifneq ($(GENHTML),)
	$(LCOV) --base-directory . --directory . --capture --output-file bar-gcov.info
	$(INSTALL) -d coverage
	$(GENHTML) -o coverage bar-gcov.info --legend
	# work-around for bug in genhtml?
	$(LN) -sfT coverage/gcov.css gcov.css
else
	@$(ECHO) "ERROR: no 'lcov' command - cannot run coverage analysis"
endif

# ----------------------------------------------------------------------------

# valgrind checks
.PHONY: memcheck
memcheck: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=summary" \
          $(if $(CHECK),\
            memcheck$(CHECK),\
            memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8 \
           )

.PHONY: memcheck_extended
memcheck_extended: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=full" \
            $(if $(CHECK),\
              memcheck$(CHECK),\
              memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8 \
             )

.PHONY: memcheck1 memcheck2 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8
memcheck1: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) --help >/dev/null
memcheck2: \
  memcheck2a \
  memcheck2b \
  memcheck2c \
  memcheck2d \
  memcheck2e
memcheck2a: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
memcheck2b: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --compress-algorithm=bzip9 --overwrite-archive-files >/dev/null
memcheck2c: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD_CRYPT) --overwrite-archive-files >/dev/null
memcheck2d: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --compress-algorithm=none --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --overwrite-archive-files >/dev/null
memcheck2e: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -c intermediate/test-###.bar $(TEST_FILES) $(BAR_OPTIONS) --archive-part-size=100000 --overwrite-archive-files >/dev/null
memcheck2f: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --dry-run >/dev/null
memcheck3:  \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -l intermediate/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck4: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -t intermediate/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck5: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -d intermediate/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck6: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) -x intermediate/test*.bar $(BAR_OPTIONS) --destination intermediate/restore >/dev/null
memcheck7: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(BAR_VALGRIND) -c intermediate/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	-$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) dvd:///dev/dvd $(BAR_OPTIONS) >/dev/null
	-$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) dvd:///dev/dvd: $(BAR_OPTIONS) >/dev/null
memcheck8: \
  $(BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-check=full \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(BAR_VALGRIND) \
            --daemon \
            --no-detach \
            --no-default-config \
            --jobs-directory=jobs \
            --server-ca-file=bar-ca.pem \
            --server-cert-file=bar-server-cert.pem \
            --server-key-file=bar-server-key.pem \
            --server-port=$(TEST_SERVER_PORT) \
            --server-tls-port=$(TEST_SERVER_SSL_PORT) \
            --server-debug &
	$(SLEEP) 30
	$(ECHO) '1 VERSION' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 JOB_LIST' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEVICE_LIST' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 FILE_LIST storageDirectory=/tmp'| $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 PASSWORDS_CLEAR' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 INDEX_STORAGE_LIST maxCount=10 indexState=* indexMode=* pattern=x'| $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEBUG_PRINT_STATISTICS' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEBUG_PRINT_MEMORY_INFO' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEBUG_DUMP_MEMORY_INFO' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) 'UNKNOWN' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 UNKNOWN' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 QUIT' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)

#valgrind --tool=cachegrind ./bar -c test2.bar -o -z xdelta9 --delta-source=test1.bar bar

# ----------------------------------------------------------------------------

# different performance files
PERFORMANCE_FILES = \
  $(TEST_DATA_DIR)/data/zero100M.dat \
  $(TEST_DATA_DIR)/data/random100M.dat \
  $(TEST_DATA_DIR)/data/delta1/test100M.dat \
  $(TEST_DATA_DIR)/data/delta2/test100M.dat \

# temporary performance files
PERFORMANCE_FILES_CLEAN = \
  intermediate/*.bar \
  intermediate/new \
  intermediate/restore \
  intermediate/*.image

# test bar exeuctable
PERFORMANCE_BAR = ./bar@EXEEXT@

$(TEST_DATA_DIR)/data/zero100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=100 2>/dev/null
$(TEST_DATA_DIR)/data/random100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=100 2>/dev/null
$(TEST_DATA_DIR)/data/delta1/test100M.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1M count=100 2>/dev/null; \
        ) >$@
$(TEST_DATA_DIR)/data/delta2/test100M.dat: $(TEST_DATA_DIR)/data/delta1/test100M.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test100M.dat skip=0 bs=1M count=50 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1M count=1 2>/dev/null; \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test100M.dat skip=256 bs=1M count=49 2>/dev/null; \
        ) >$@

# performance tests
.PHONY: performance
performance:
	@$(MAKE) \
          $(if $(CHECK),\
            performance$(CHECK),\
            performance_none performance_zip_compress performance_bzip2_compress performance_lzma_compress performance_delta_compress \
           )

.PHONY: performance1 performance_none
performance1 performance_none: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "None (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance2 performance_zip_compress
performance2 performance_zip_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "ZIP (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=zip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance3 performance_bzip2_compress
performance3 performance_bzip2_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "BZIP2 (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=bzip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance4 performance_lzma_compress
performance4 performance_lzma_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "LZMA (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c intermediate/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=lzma9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d intermediate/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@$(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x intermediate/test.bar --destination=intermediate/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance5 performance_delta_compress
performance5 performance_delta_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
ifeq (@HAVE_XDELTA3@,1)
	@$(ECHO) "XDELTA (100M random):"
	@($(CD) $(TEST_DATA_DIR)/data/delta1; ../../../$(PERFORMANCE_BAR) -c ../../test-A.bar test100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null)
	@$(ECHO_NO_LF) "  Create : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -c ../../test-B.bar test100M.dat --overwrite-archive-files --compress-algorithm=xdelta9+lzma9 --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Test   : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -t ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Diff   : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -d ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Extract: "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; $(TEST_ENVIRONMENT) $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -x ../../test-B.bar --delta-source=../../test-A.bar --destination=../../restore --overwrite-files 1>/dev/null 2>/dev/null")
endif

# ----------------------------------------------------------------------------

# testcode runs:
#   1A+2+3+4: full+list+diff+extract
#   1B+2+3+4: differentiell+list+diff+extract
#   1C+2+3+4: incremental+list+diff+extract

TESTCODE_COMMAND1A=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --full \
                     --log-post-command='true' \
                     -c intermediate/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND1B=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --differential \
                     --incremental-list-file=intermediate/test.bid \
                     --log-post-command='true' \
                     -c intermediate/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND1C=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --incremental \
                     --incremental-list-file=intermediate/test.bid \
                     --log-post-command='true' \
                     -c intermediate/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND2=$(TEST_BAR_DEBUG) \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) \
                     -l intermediate/test-*.bar
TESTCODE_COMMAND3=$(TEST_BAR_DEBUG) \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) \
                     -d intermediate/test-*.bar
TESTCODE_COMMAND4=$(TEST_BAR_DEBUG) \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) \
                     --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) \
                     --destination=intermediate/restore \
                     -x intermediate/test-*.bar

TESTCODE_COMMANDS = \
  TESTCODE_COMMAND1A \
  TESTCODE_COMMAND1B \
  TESTCODE_COMMAND1C \
  TESTCODE_COMMAND2 \
  TESTCODE_COMMAND3 \
  TESTCODE_COMMAND4 \

# call functionTestcode(command)
functionTestcode = \
 if test $$rc -ne $(TESTCODE_EXITCODE); then \
   TESTCODE_LIST=testcode.list TESTCODE_NAME=testcode.name TESTCODE_DONE=testcode.done \
     $($1) >/dev/null; \
   rc=$$?; \
   if test $$rc -ne $(TESTCODE_EXITCODE); then \
     $(ECHO) "Test code fail $1 (exitcode: $$rc):"; \
     $(ECHO) "TESTCODE=$(if $(testcode),$(testcode),`$(CAT) testcode.name 2>/dev/null`) $($1)"; \
   fi; \
 fi

# helper function to execute test code
# call functionTestcodeA
# call functionTestcodeB
# call functionTestcodeC
functionTestcodeA = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1A); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   exit $$rc; \
  )

functionTestcodeB = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1B); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   if test -z "$(TESTCODE)" -a -z "`$(CAT) testcode.name 2>/dev/null`"; then \
     $(ECHO) "ERROR: No more testcode executed!"; \
     $(ECHO) ""; \
     $(ECHO) "Available and not executed testcode:"; \
     $(MAKE) --quiet testcode_diff; \
   fi; \
   \
   exit $$rc; \
  )

functionTestcodeC = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1C); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   if test -z "$(TESTCODE)" -a -z "`$(CAT) testcode.name 2>/dev/null`"; then \
     $(ECHO) "ERROR: No more testcode executed!"; \
     $(ECHO) ""; \
     $(ECHO) "Available and not executed testcode:"; \
     $(MAKE) --quiet testcode_diff; \
   fi; \
   \
   exit $$rc; \
  )

.PHONY: testcode_clean testcode_init testcode_all testcode testcodex testcode_list testcode_diff

testcode_clean:
	$(RMF) testcode.list testcode.skip testcode.name testcode.done

testcode_init: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(ECHO_NO_LF) >testcode.list
	$(ECHO_NO_LF) >testcode.done
	for z in $(TESTCODE_SKIP); do $(ECHO) $$s; done >testcode.skip
	$(foreach z,$(TESTCODE_COMMANDS),TESTCODE_LIST=testcode.list $($z) >/dev/null;)

testcode_all: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	rc=$(TESTCODE_EXITCODE); \
        while test $$rc -eq $(TESTCODE_EXITCODE); do \
          rc=0; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeA) 1>/dev/null 2>/dev/null; \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeB); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeC); \
            rc=$$?; \
          fi; \
        done

testcode: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
          rc=0; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeA); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeB); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeC); \
            rc=$$?; \
          fi; \

testcodex: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND1)
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND2) >/dev/null; \
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND3) >/dev/null; \
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND4) >/dev/null; \

testcode_list:
	$(ECHO_NO_LF) >testcode.list
	$(foreach z,$(TESTCODE_COMMANDS),TESTCODE_LIST=testcode.list $($z) >/dev/null;)

testcode_diff:
	$(CAT) testcode.list | $(CUT) -d " " -f 1 | $(SORT) >testcode.list.sorted
	$(CAT) testcode.done | $(CUT) -d " " -f 1 | $(SORT) >testcode.done.sorted
	$(DIFF) testcode.list.sorted testcode.done.sorted | $(GREP) '<' | $(SED) 's/<\s*/  /g'
	$(RMF) testcode.list.sorted testcode.done.sorted

# ----------------------------------------------------------------------------
# install/uninstall
# Note: prefix is used for temporary installations

.PHONY: install uninstall

install: \
  $(TARGETS) \
  $(SCRIPTS) \
  $(DOC)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-debug@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) -m 644 bar-debug@EXEEXT@.sym "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-keygen@SHELLEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-sqlite3@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_CONFIG_DIR)"
	if test ! -f "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg"; then \
          $(INSTALL) -m 600 bar.cfg "$(DESTDIR)$(INSTALL_CONFIG_DIR)"; \
        else \
          echo "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg NOT installed - file already exists!"; \
        fi
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_CONFIG_DIR)/jobs"
	for language in $(LANGUAGES); do \
          $(INSTALL) -d "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES"; \
          $(INSTALL) po/$$language/LC_MESSAGES/bar.mo "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES/bar.mo"; \
        done

# uninstall all
uninstall:
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-keygen@SHELLEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-sqlite3@EXEEXT@"
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
        )
	$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-ca.pem"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-server-cert.pem"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/private/bar-server-key.pem"
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.jks" \
        )
	$(RMF) "$(DESTDIR)$(INSTALL_ETC_DIR)/init.d/barserver"
	$(RMF) "$(DESTDIR)$(INSTALL_MAN_DIR)/man7/bar.7"
	$(RMDIR) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/jobs"
	for language in $(LANGUAGES); do \
          $(RMF) "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES/bar.mo"; \
        done

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist:
ifneq ($(DIRECTORY),)
	$(MAKE) -C test dist DIRECTORY=../$(DIRECTORY)
	$(INSTALL) -d $(DIRECTORY)/bar
	$(INSTALL) -m 664 \
                   $(sort $(BAR_SOURCES) \
                          $(BAR_HEADERS) \
                          $(EXTERN_SOURCES) \
                          $(EXTERN_HEADERS) \
                          $(DESTROYER_SOURCES) \
                          $(DESTROYER_HEADERS) \
                          $(DESTROYER_SOURCES) \
                          $(BAR_MINIDUMP_SOURCES) \
                          $(BAR_MINIDUMP_HEADERS) \
                          $(BAR_SQLITE3_SOURCES) \
                          $(BAR_SQLITE3_HEADERS) \
                          $(OTHER_SOURCES) \
                          Makefile.in \
                          config.h.in \
                          bar.cfg \
                   ) \
                   $(DIRECTORY)/bar
	$(INSTALL) -d $(DIRECTORY)/bar/common
	$(INSTALL) $(sort $(COMMON_SOURCES) \
	                  $(COMMON_HEADERS) \
	           ) \
	           $(DIRECTORY)/bar/common
	$(INSTALL) -d $(DIRECTORY)/bar/po
	$(INSTALL) -m 664 \
                   $(sort po/Makefile.in \
                          po/*.pot \
                          po/*.po \
                   ) \
                   $(DIRECTORY)/bar/po
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

# ----------------------------------------------------------------------------

.PHONY: crashdump
crashdump:
ifneq ($(MINIDUMP),)
	../packages/breakpad/src/tools/linux/md2core/minidump-2-core -v $(MINIDUMP) 1>bar.core 2>bar.core.out
	(a=`grep -w GUID bar.core.ouot |grep bar|sed 's/-.*//g'`; \
         b=`objdump -h ./bar|grep \.text|awk '{print $$4}'`; \
         gdb --eval-command="add-symbol-file ./bar `perl -e 'die unless $$ARGV[0] && $$ARGV[1]; printf("%#x\n", hex($$ARGV[0]) + hex($$ARGV[1]))' $$a $$b;`" --core ./bar.core; \
        )
else
	echo "Please specify minidump file with MINIDUMP=<file name>"
endif

# ----------------------------------------------------------------------------

ifeq ($(NO_DEPEND),)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include Makefile.depend
endif
endif
endif

# end of file
