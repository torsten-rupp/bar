#
# $Revision$
# $Date$
# $Author$
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM                = @PLATFORM@

VALGRIND_ERROR_EXITCODE = 123
TESTCODE_EXITCODE       = 124

#------------------------------------ paths ----------------------------------

BASE_DIR           = $(CURDIR)
SOURCE_DIR         = @srcdir@
CONFIG_DIR         = @CONFIG_DIR@
TLS_DIR            = @TLS_DIR@

ifeq ($(DESTDIR),)
INSTALL_DIR        = $(if $(prefix),$(prefix),@INSTALL_DIR@)
INSTALL_BIN_DIR    = $(if $(bindir),$(bindir),@INSTALL_BIN_DIR@)
INSTALL_LOCALE_DIR = $(if $(datadir),$(datadir)/locale,@LOCALE_DIR@)
INSTALL_ETC_DIR    = $(if $(sysconfdir),$(sysconfdir),/etc)
INSTALL_CONFIG_DIR = $(if $(sysconfdir),$(sysconfdir)/bar,@CONFIG_DIR@)
INSTALL_MAN_DIR    = $(if $(mandir),$(mandir),@MAN_DIR@)
else
INSTALL_DIR        = @INSTALL_DIR@
INSTALL_BIN_DIR    = @INSTALL_BIN_DIR@
INSTALL_LOCALE_DIR = @LOCALE_DIR@
INSTALL_ETC_DIR    = /etc
INSTALL_CONFIG_DIR = @CONFIG_DIR@
INSTALL_MAN_DIR    = @MAN_DIR@
endif
INSTALL_TLS_DIR    = @TLS_DIR@

TEST_DATA_DIR      ?= test

#--------------------------------- tool chain --------------------------------

# shell in Makefile must be bash
SHELL                  = bash

CC                     = @CC@
CC_FLAGS               = @CC_FLAGS@ -g
CC_WARN_FLAGS          = @CC_WARN_FLAGS@
CXX                    = @CXX@
CXX_FLAGS              = @CXX_FLAGS@ -g
CXX_WARN_FLAGS         = @CXX_WARN_FLAGS@
CC_OPTIMIZE            = @CC_OPTIMIZE@
CC_OPTIMIZE_RELEASE    = @CC_OPTIMIZE_RELEASE@
CC_OPTIMIZE_DEBUG      = @CC_OPTIMIZE_DEBUG@
CC_ADDITIONAL          =
CC_ADDITIONAL_RELEASE  =
CC_ADDITIONAL_DEBUG    = -finstrument-functions
CC_ADDITIONAL_GCOV     = -fprofile-arcs -ftest-coverage
CC_ADDITIONAL_VALGRIND = -fno-builtin
CC_DEFINES             = PLATFORM_$(PLATFORM) @CC_DEFINES@ _GNU_SOURCE _LONG_LONG
CC_DEFINES_RELEASE     = @CC_DEFINES_RELEASE@
CC_DEFINES_DEBUG       = @CC_DEFINES_DEBUG@
# -D_LONG_LONG
CC_INCLUDES            = @CC_INCLUDES@
ifdef WERROR
  CC_FLAGS   += -Werror
  CC_DEFINES += WERROR
endif

LD                     = $(if @CXX@,@CXX@,@CC@)
LD_FLAGS               = @LD_FLAGS@
LD_FLAGS_RELEASE       =
LD_FLAGS_DEBUG         = -Wl,-wrap,pthread_create
#LD_FLAGS_DEBUG         = -Wl,-wrap,pthread_create -Wl,-wrap,malloc -Wl,-wrap,calloc -Wl,-wrap,realloc
LD_FLAGS_GCOV          = -Wl,-wrap,pthread_create -fprofile-arcs
LD_FLAGS_VALGRIND      =
LD_LIBRARY_PATHS       = @LIBRARY_PATHS@
LD_LIBRARIES           = @LIBRARIES@
LD_STATIC_LIBRARIES    = @STATIC_LIBRARIES@
LD_STATIC_PREFIX       = -Wl,-Bstatic
LD_DYNAMIC_PREFIX      = -Wl,-Bdynamic

STRIP                  = @STRIP@
OBJDUMP                = @OBJDUMP@
OBJCOPY                = @OBJCOPY@

XGETTEXT               = @XGETTEXT@
XGETTEXT_FLAGS         = -L C -k -ktr
MSGMERGE               = @MSGMERGE@
MSGFMT                 = @MSGFMT@

SVNVERSION             = @SVNVERSION@

DUMP_SYMS              = @DUMP_SYMS@

#---------------------------------- commands----------------------------------

ATTR           = @ATTR@
BC             = bc
BZIP2          = bzip2
CAT            = cat
CD             = cd
CHATTR         = chattr
CHMOD          = chmod
CP             = cp
CUT            = cut
DD             = dd
DDD            = ddd
DIFF           = diff
ECHO           = echo
ECHO_NO_LF     = echo -n
FIND           = find
GREP           = grep
GETFATTR       = @GETFATTR@
INSTALL        = @INSTALL@
KILL           = kill
LN             = ln
LS             = ls
MKDIR          = mkdir
MKFIFO         = mkfifo
MKTEMP         = mktemp
NETCAT         = netcat
PERL           = @PERL@
READLINK       = readlink
RMDIR          = rmdir
RMF            = rm -f
RMRF           = rm -rf
SED            = sed
SETFATTR       = @SETFATTR@
SLEEP          = sleep
SORT           = sort
STAT           = stat
TAIL           = tail
TAR            = tar
TIME           = @TIME@
TOUCH          = touch
ULIMIT         = ulimit

# for tests only (create test devices)
FSCK           = fsck
LOSETUP        = /sbin/losetup
MKFS           = /sbin/mkfs
MOUNT          = /bin/mount
UMOUNT         = /bin/umount
SUDO           = sudo

LCOV           = lcov
GENHTML        = genhtml

VALGRIND       = valgrind  
VALGRIND_FLAGS = --gen-suppressions=no --track-fds=yes --suppressions=$(BASE_DIR)/valgrind.supp --error-exitcode=$(VALGRIND_ERROR_EXITCODE)      

#------------------------ specific variables/settings ------------------------

# major, minor version number
VERSION_MAJOR := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) MINOR|$(SED) 's/MINOR=//g')
ifneq ($(SVNVERSION),)
  VERSION_SVN   := $(shell $(SVNVERSION) . 2>/dev/null || $(CAT) $(SOURCE_DIR)/../version|$(GREP) RELEASE|$(SED) 's/RELEASE=//g')
else
  VERSION_SVN   := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) RELEASE|$(SED) 's/RELEASE=//g')
endif

# supported compress algorithms
ifeq ($(COMPRESS_NAMES),)
  COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9
  ifeq ($(COMPRESS_NAMES_BZIP),)
    ifeq (@HAVE_BZ2@,1)
      COMPRESS_NAMES += bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_BZIP)
  endif
  ifeq ($(COMPRESS_NAMES_LZMA),)
    ifeq (@HAVE_LZMA@,1)
      COMPRESS_NAMES += lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_LZMA)
  endif
  ifeq ($(COMPRESS_NAMES_LZO),)
    ifeq (@HAVE_LZO@,1)
      COMPRESS_NAMES += lzo1 lzo2 lzo3 lzo4 lzo5
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_LZO) 
  endif
  ifeq ($(COMPRESS_NAMES_LZ4),)
    ifeq (@HAVE_LZ4@,1)
      COMPRESS_NAMES += lz4-0 lz4-1 lz4-9
    endif
  else
    COMPRESS_NAMES += $(COMPRESS_NAMES_LZ4) 
  endif
endif

ifeq ($(COMPRESS_NAMES_HUGE),)
  COMPRESS_NAMES_HUGE = none zip0
  ifeq (@HAVE_LZO@,1)
    COMPRESS_NAMES_HUGE += lzo1
  endif
  ifeq (@HAVE_LZ4@,1)
    COMPRESS_NAMES_HUGE += lz4-0
  endif
endif

# supported crypt algorithms
CRYPT_NAMES  = none
ifeq (@HAVE_GCRYPT@,1)
CRYPT_NAMES  += 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256 SERPENT128 SERPENT192 SERPENT256 CAMELLIA128 CAMELLIA192 CAMELLIA256
endif

# SQLite flags
SQLITE_FLAGS = $(if @HAVE_USLEEP@,-DHAVE_USLEEP=1) -DSQLITE_DEFAULT_FILE_PERMISSIONS=0600 -DSQLITE_THREADSAFE=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY -DSQLITE_ENABLE_FTS4 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT $(if @HAVE_ICU@,-DSQLITE_ENABLE_ICU)
#-DSQLITE_DEBUG -DSQLITE_LOCK_TRACE 

# xdelta3 flags
XDELTA3_FLAGS =

# image types used for tests
TEST_IMAGE_OPERATIONS = test_image_operations

# test settings
TEST_CONFIG                      = test/bar.cfg
TEST_KEY_CRYPT_PUBLIC            = test/key-crypt.public
TEST_KEY_CRYPT_PRIVATE           = test/key-crypt.private
TEST_KEY_CRYPT_OTHER_PUBLIC      = test/key-crypt-other.public
TEST_KEY_CRYPT_OTHER_PRIVATE     = test/key-crypt-other.private
TEST_KEY_SIGNATURE_PUBLIC        = test/key-signature.public
TEST_KEY_SIGNATURE_PRIVATE       = test/key-signature.private
TEST_KEY_SIGNATURE_OTHER_PUBLIC  = test/key-signature-other.public
TEST_KEY_SIGNATURE_OTHER_PRIVATE = test/key-signature-other.private

TEST_SERVER_CONFIG               = test/bar.cfg
TEST_SERVER_PORT                 = 39909
TEST_SERVER_SSL_PORT             = 39910
TEST_SERVER_PID_FILE             = test/barserver.pid
TEST_SERVER_JOBS                 = test/jobs
TEST_SERVER_DATABASE             = test/index.db
TEST_SERVER_LOG_FILE             = test/bar.log

# hosts, ports, passwords, keys for tests
TEST_HOST                        ?= localhost
TEST_PASSWORD                    ?=

TEST_HOST_FTP                    ?= $(TEST_HOST)
TEST_PASSWORD_FTP                ?= $(TEST_PASSWORD)

TEST_HOST_SSH                    ?= $(TEST_HOST)
TEST_PORT_SSH                    ?= 22
TEST_PASSWORD_SSH                ?= $(TEST_PASSWORD)
TEST_PUBLIC_KEY_SSH              =  $(HOME)/.ssh/id_rsa.pub
TEST_PRIVATE_KEY_SSH             =  $(HOME)/.ssh/id_rsa

TEST_HOST_SCP                    ?= $(TEST_HOST)
TEST_PORT_SCP                    ?= 22
TEST_PASSWORD_SCP                ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SCP              =  $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SCP             =  $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_SFTP                   ?= $(TEST_HOST)
TEST_PORT_SFTP                   ?= 22
TEST_PASSWORD_SFTP               ?= $(TEST_PASSWORD_SSH)
TEST_PUBLIC_KEY_SFTP             =  $(TEST_PUBLIC_KEY_SSH)
TEST_PRIVATE_KEY_SFTP            =  $(TEST_PRIVATE_KEY_SSH)

TEST_HOST_WEBDAV                 ?= localhost/webdav
TEST_PASSWORD_WEBDAV             ?= $(TEST_PASSWORD)

TEST_PASSWORD_CRYPT              =  Franz_Kafka:Die_Verwandlung

# crypt/compress used for all-test (do not select all available compress and
# crypt algorithms, because this would take a long time)
TEST_COMBINED_COMPRESS_NAMES=zip9
ifeq (@HAVE_BZ2@,1)
TEST_COMBINED_COMPRESS_NAMES += bzip9
endif
ifeq (@HAVE_LZMA@,1)
TEST_COMBINED_COMPRESS_NAMES += lzma9
endif
TEST_COMBINED_CRYPT_NAMES=none
ifeq (@HAVE_GCRYPT@,1)
TEST_COMBINED_CRYPT_NAMES += AES256
endif

# languages
LANGUAGES = de jp

# for tests only
LOOP0          = /dev/loop0
LOOP1          = /dev/loop1
DEVICE_ZERO    = /dev/zero
DEVICE_RANDOM  = /dev/urandom

# memory limits for tests
MEMORY_LIMIT     = $(shell $(ECHO) 10*1024*1024|$(BC))    # 10G
MEMORY_LIMIT_LOW = $(shell $(ECHO) 70*1024|$(BC))         # 50M

#---------------------------------- rules ------------------------------------

# source search paths
vpath %.c   $(SOURCE_DIR)
vpath %.cpp $(SOURCE_DIR)
ifeq (@HAVE_BREAKPAD@,1)
vpath %.cc  ../packages/breakpad/src/processor
endif

# disable implicit rule for *.y -> *.c
%.c: %.y

# compile C source
release/%.o: $(SOURCE_DIR)/%.c errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_RELEASE) $(CC_OPTIMIZE) $(CC_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $(@D)/$*.o

debug/%.o: $(SOURCE_DIR)/%.c errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_DEBUG) $(CC_OPTIMIZE) $(CC_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $(@D)/$*.o

gcov/%.o: $(SOURCE_DIR)/%.c errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_GCOV) $(CC_OPTIMIZE) $(CC_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $(@D)/$*.o

valgrind/%.o: $(SOURCE_DIR)/%.c errors.h archive_format.h archive_format_const.h index_definition.h
	$(INSTALL) -d $(@D)
	$(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_VALGRIND) $(CC_OPTIMIZE) $(CC_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $(@D)/$*.o

%.o: $(SOURCE_DIR)/%.c errors.h archive_format.h archive_format_const.h index_definition.h
	$(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(CC_OPTIMIZE) $(CC_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $*.o

# compile C++ source
release/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_RELEASE) $(CC_OPTIMIZE) $(CC_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o $(@D)/$*.o

debug/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_DEBUG) $(CC_OPTIMIZE) $(CC_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o $(@D)/$*.o

gcov/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_DEBUG) $(CC_OPTIMIZE) $(CC_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CXX_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o $(@D)/$*.o

valgrind/%.o: $(SOURCE_DIR)/%.cpp
	$(CXX) $(CXX_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_VALGRIND) $(CC_OPTIMIZE) $(CC_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.cpp -o $(@D)/$*.o

%.o: %.cpp
	$(CXX) $(CXX_FLAGS) $(CC_ADDITIONAL) $(CC_OPTIMIZE) $(CC_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $^ -o $*.o

%.o: %.cc
	$(CXX) $(CXX_FLAGS) $(CC_ADDITIONAL) $(CC_OPTIMIZE) $(CC_OPTIMIZE_RELEASE) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_RELEASE),-D$z) $(CXX_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $^ -o $*.o

#--------------------------------- objects -----------------------------------

BAR_SOURCES          = bar.c \
                       errors.c \
                       commands_create.c \
                       commands_list.c \
                       commands_test.c \
                       commands_compare.c \
                       commands_restore.c \
                       files.c \
                       devices.c \
                       filesystems.c \
                       archive.c \
                       chunks.c \
                       patterns.c \
                       patternlists.c \
                       entrylists.c \
                       compress.c \
                       deltasources.c \
                       deltasourcelists.c \
                       crypt.c \
                       passwords.c \
                       misc.c \
                       storage.c \
                       index.c \
                       continuous.c \
                       network.c \
                       server.c \
                       remote.c \
                       minidump.cpp \
                       \
                       global.c \
                       autofree.c \
                       cmdoptions.c \
                       configvalues.c \
                       lists.c \
                       strings.c \
                       stringmaps.c \
                       stringlists.c \
                       ringbuffers.c \
                       threads.c \
                       msgqueues.c \
                       semaphores.c \
                       fragmentlists.c \
                       arrays.c \
                       dictionaries.c \
                       bitmaps.c \
                       database.c \
                       stacktraces.c \

BAR_SOURCES_FILTER   = $(if @HAVE_BREAKPAD@,,minidump.cpp) \
                       $(if @HAVE_BFD@,,stacktraces.c) \

BAR_HEADERS          = $(patsubst %.c,%.h,$(filter %.c,$(BAR_SOURCES))) \
                       $(patsubst %.cpp,%.h,$(filter %.cpp,$(BAR_SOURCES))) \
                       bar_global.h \

BAR_OBJECTS          = $(foreach z,$(filter %.c,  $(filter-out $(BAR_SOURCES_FILTER),$(BAR_SOURCES))),$(patsubst %.c,  %.o,$z)) \
                       $(foreach z,$(filter %.cpp,$(filter-out $(BAR_SOURCES_FILTER),$(BAR_SOURCES))),$(patsubst %.cpp,%.o,$z)) \
                       errors.o \
                       archive_format.o \

BAR_OBJECTS_RELEASE  = $(addprefix release/,$(BAR_OBJECTS))

BAR_OBJECTS_DEBUG    = $(addprefix debug/,$(BAR_OBJECTS))

BAR_OBJECTS_GCOV     = $(addprefix gcov/,$(BAR_OBJECTS))

BAR_OBJECTS_VALGRIND = $(addprefix valgrind/,$(BAR_OBJECTS))

SQLITE3_SOURCE       = $(if $(wildcard ../sqlite/sqlite3.c),../sqlite/sqlite3.c,sqlite3.c)

SQLITE3_HEADER       = $(if $(wildcard ../sqlite/sqlite3.h),../sqlite/sqlite3.h,sqlite3.h)

EXTERN_SOURCES       = $(SQLITE3_SOURCE) \

EXTERN_HEADERS       = $(patsubst %.c,%.h,$(EXTERN_SOURCES)) \

EXTERN_OBJECTS       = $(foreach z,$(filter %.c,$(notdir $(EXTERN_SOURCES))),$(patsubst %.c,%.o,$z)) \
                       $(foreach z,$(filter %.cpp,$(notdir $(EXTERN_SOURCES))),$(patsubst %.cpp,%.o,$z)) \
                       $(if @HAVE_XDELTA@,xdelta3.o) \

DESTROYER_SOURCES    = destroyer.c \
                       global.c \
                       cmdoptions.c \
                       lists.c \
                       strings.c \
                       stacktraces.c \

DESTROYER_HEADERS    = $(patsubst %.c,%.h,$(DESTROYER_SOURCES)) \

DESTROYER_OBJECTS    = $(foreach z,$(filter %.c,$(DESTROYER_SOURCES)),$(patsubst %.c,%.o,$z)) \
                       $(foreach z,$(filter %.cpp,$(DESTROYER_SOURCES)),$(patsubst %.cpp,%.o,$z)) \

BAR_MINIDUMP_SOURCES = bar-minidump.cc \

BAR_MINIDUMP_HEADERS = \

BAR_MINIDUMP_OBJECTS = $(foreach z,$(BAR_MINIDUMP_SOURCES),$(patsubst %.cc,%.o,$z)) \
                       stackwalk_common.o \

BAR_SQLITE3_SOURCES  = bar-sqlite3.c \
                       global.c \
                       lists.c \
                       strings.c \
                       stringlists.c \
                       files.c \
                       devices.c \
                       stacktraces.c \
                       $(SQLITE3_SOURCE) \

BAR_SQLITE3_HEADERS  = $(patsubst %.c,%.h,$(filter-out bar-sqlite3.c,$(BAR_SQLITE3_SOURCES))) \

BAR_SQLITE3_OBJECTS  = $(foreach z,$(BAR_SQLITE3_SOURCES),$(patsubst %.cc,%.o,$z))

OTHER_SOURCES        = forward.h \
                       \
                       compress_zip.c \
                       compress_bz2.c \
                       compress_lzma.c \
                       compress_lzo.c \
                       compress_lz4.c \
                       compress_xd3.c \
                       \
                       filesystems_ext.c \
                       filesystems_fat.c \
                       filesystems_reiserfs.c \
                       \
                       storage_file.c \
                       storage_ftp.c \
                       storage_scp.c \
                       storage_sftp.c \
                       storage_webdav.c \
                       storage_optical.c \
                       storage_device.c \
                       \
                       index_version1.c \
                       index_version2.c \
                       index_version3.c \
                       index_version4.c \
                       index_version5.c \
                       index_version6.c \
                       \
                       archive_format.pl \
                       archive_format.def \
                       index_definition.pl \
                       index_definition.sql \
                       valgrind.supp \
                       bar.cfg \
                       bar-keygen.in \

INTERMEDIATE         = errors.c \
                       errors.h \
                       archive_format.c \
                       archive_format.h \
                       archive_format_const.h \
                       index_definition.h \

TARGETS              = bar@EXEEXT@ \
                       bar-debug@EXEEXT@ \
                       bar-gcov@EXEEXT@ \
                       bar-valgrind@EXEEXT@ \
                       $(foreach z,$(LANGUAGES),po/$z/LC_MESSAGES/bar.mo) \
                       $(if @HAVE_BREAKPAD@,release/bar.sym debug/bar.sym) \
                       bar-keygen \
                       bar-sqlite3@EXEEXT@ \
                       destroyer@EXEEXT@ \
                       $(if @HAVE_BREAKPAD@,bar-minidump@EXEEXT@) \

#------------------------------ dependencies ---------------------------------

# default target
.PHONY: all clean distclean depend
all: $(TARGETS)

# clean
clean: \
  testcode_clean \
  gcov_clean
	$(RMF) $(BAR_OBJECTS_RELEASE)
	$(RMF) $(BAR_OBJECTS_DEBUG)
	$(RMF) $(BAR_OBJECTS_VALGRIND)
	$(RMF) $(EXTERN_OBJECTS)
	$(RMF) $(DESTROYER_OBJECTS)
	$(RMF) $(BAR_MINIDUMP_OBJECTS)
	$(RMF) $(INTERMEDIATE)
	$(RMF) bar-gcov.info
	$(RMF) $(TARGETS)
	$(RMRF) test

distclean: \
  clean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h
	$(RMRF) release debug valgrind

# help
.PHONY: help
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(ECHO) "  po"
	@$(ECHO) ""
	@$(ECHO) "  run"
	@$(ECHO) "  run_en"
	@$(ECHO) "  run_de"
	@$(ECHO) "  run_jp"
	@$(ECHO) "  run_ssl"
	@$(ECHO) "  rundev"
	@$(ECHO) "  rundevd"
	@$(ECHO) "  rundevddd"
	@$(ECHO) "  rundevgcov"
	@$(ECHO) "  rundevvalgrind"
	@$(ECHO) "  rundev_en"
	@$(ECHO) "  rundev_de"
	@$(ECHO) "  rundev_jp"
	@$(ECHO) "  rundev_ssl"
	@$(ECHO) "  rundev_test"
	@$(ECHO) ""
	@$(ECHO) "  test[-debug|-valgrind]"
	@$(ECHO) "  test1[-debug|-valgrind], test_basic[-debug|-valgrind]"
	@$(ECHO) "  test2[-debug|-valgrind], test_compress[-debug], test_delta_compress[-debug|-valgrind]"
	@$(ECHO) "  test3[-debug|-valgrind], test_crypt[-debug|-valgrind]"
	@$(ECHO) "  test4[-debug|-valgrind], test_asymmetric_crypt[-debug|-valgrind]"
	@$(ECHO) "  test5[-debug|-valgrind], test_signatures[-debug|-valgrind]"
	@$(ECHO) "  test6[-debug|-valgrind], test_split[-debug|-valgrind]"
	@$(ECHO) "  test7[-debug|-valgrind], test_image[-debug|-valgrind]"
	@$(ECHO) "  test8[-debug|-valgrind], test_storage[-debug|-valgrind]"
	@$(ECHO) "  test_storage_(file|ftp|scp|sftp|webdav)[-debug|-valgrind]"
	@$(ECHO) "  test9[-debug|-valgrind], test_hugefiles[-debug|-valgrind]"
	@$(ECHO) "  test10[-debug|-valgrind], test_dvd[-debug|-valgrind]"
	@$(ECHO) "  test11[-debug|-valgrind], test_server[-debug|-valgrind]"
	@$(ECHO) "  test_combined[-debug|-valgrind]"
	@$(ECHO) "  test_parameters[-debug|-valgrind]"
	@$(ECHO) "  test_misc[-debug|-valgrind]"
	@$(ECHO) "  test_all[-debug|-valgrind]"
	@$(ECHO) "  test_clean"
	@$(ECHO) ""
	@$(ECHO) "  test_file_operations"
	@$(ECHO) "  test_file_operations_dryrun"
	@$(ECHO) ""
	@$(ECHO) "  test_image_operations"
	@$(ECHO) "  test_image_operations_raw"
	@$(ECHO) "  test_image_operations_ext"
	@$(ECHO) "  test_image_operations_fat"
	@$(ECHO) "  test_image_operations_reiserfs"
	@$(ECHO) "  test_image_operations_dryrun"
	@$(ECHO) ""
	@$(ECHO) "  show_debug_test_code"
	@$(ECHO) "  run_debug_test_code"
	@$(ECHO) ""
	@$(ECHO) "  gcov [CHECK=1|2|3|4|5|6|7|8]"
	@$(ECHO) "  gcov_clean"
	@$(ECHO) "  gcov_zero                                 reset gcov data"
	@$(ECHO) "  gcov<1|2|3|4|5|6|7|8>"
	@$(ECHO) "  gcov_html                                 re-generate gcov HTML report"
	@$(ECHO) ""
	@$(ECHO) "  memcheck [CHECK=1|2|2a|2b|2c|2d|2e|3|4|5|6|7]"
	@$(ECHO) "  memcheck_extended [CHECK=1|2|2a|2b|2c|2d|2e|3|4|5|6|7]"
	@$(ECHO) "  memcheck<1|2|2a|2b|2c|2d|2e|3|4|5|6|7>"
	@$(ECHO) ""
	@$(ECHO) "  testcode_init                             init test code name"
	@$(ECHO) "  testcode_all                              run all test code"
	@$(ECHO) "  testcode_list                             list test code names"
	@$(ECHO) "  testcode [TESTCODE=<name>]                run test code or test code <name>"
	@$(ECHO) ""
	@$(ECHO) "  performance"
	@$(ECHO) "  performance1, performance_none"
	@$(ECHO) "  performance2, performance_zip_compress"
	@$(ECHO) "  performance3, performance_bzip2_compress"
	@$(ECHO) "  performance4, performance_lzma_compress"
	@$(ECHO) "  performance5, performance_delta_compress"
	@$(ECHO) ""
	@$(ECHO) "  crashdump MINIDUMP=<file name>"
	@$(ECHO) ""       
	@$(ECHO) "  dist"

# create dependencies
.PHONY: depend
depend: Makefile.depend

Makefile.depend:
	$(MAKE) NO_DEPEND=1 $(INTERMEDIATE)
	$(ECHO) >Makefile.depend
	for z in $(BAR_SOURCES) $(EXTERN_SOURCES) $(DESTROYER_SOURCES) $(BAR_MINIDUMP_SOURCES) $(BAR_SQLITE3_SOURCES); do \
          $(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's/\(.*\.o:\)/release\/\1/g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's/\(.*\.o:\)/debug\/\1/g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's/\(.*\.o:\)/gcov\/\1/g' >> Makefile.depend; \
          $(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -MM $(SOURCE_DIR)/$$z 2>/dev/null | \
            $(SED) 's/\(.*\.o:\)/valgrind\/\1/g' >> Makefile.depend; \
        done;

# ----------------------------------------------------------------------------

# create BAR
bar@EXEEXT@: \
  $(BAR_OBJECTS_RELEASE) \
  $(EXTERN_OBJECTS)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)
ifeq (@HAVE_BREAKPAD@,1)
	$(MAKE) release/bar.sym.bz2.o
	$(LD) $(LD_FLAGS) $(LD_FLAGS_RELEASE) -o $@ $^ release/bar.sym.bz2.o $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)
endif

bar-debug@EXEEXT@: \
  $(BAR_OBJECTS_DEBUG) \
  $(EXTERN_OBJECTS)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_DEBUG) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)
	$(OBJCOPY) --only-keep-debug bar-debug@EXEEXT@ $@.sym
ifeq (@HAVE_BREAKPAD@,1)
	$(MAKE) debug/bar.sym.bz2.o
	$(LD) $(LD_FLAGS) $(LD_FLAGS_DEBUG) -o $@ $^ debug/bar.sym.bz2.o $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)
endif

bar-debug@EXEEXT@.sym: bar-debug@EXEEXT@
	$(OBJCOPY) --only-keep-debug bar-debug@EXEEXT@ $@

bar-gcov@EXEEXT@: \
  $(BAR_OBJECTS_GCOV) \
  $(EXTERN_OBJECTS)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_GCOV) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)

# Note: a special valgrind version is needed because of a bug in valgrind
#       reporting false positives when gcc builtin-functions are used.
#       See: https://bugs.launchpad.net/ubuntu/+source/valgrind/+bug/852760
bar-valgrind@EXEEXT@: \
  $(BAR_OBJECTS_VALGRIND) \
  $(EXTERN_OBJECTS)
	$(LD) $(LD_FLAGS) $(LD_FLAGS_VALGRIND) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)

# i18n
.PHONY: i18n po
i18n po: \
  po/german.po \
  po/japanese.po

po/bar.pot: $(SOURCE_DIR)/*.c
	$(INSTALL) -d $(@D)
	$(XGETTEXT) $(XGETTEXT_FLAGS) -o $@ *.c

po/german.po: po/bar.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ po/bar.pot
	$(TOUCH) $@

po/japanese.po: po/bar.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ po/bar.pot
	$(TOUCH) $@

po/de/LC_MESSAGES/bar.mo: po/german.po
	$(INSTALL) -d $(@D)
	$(MSGFMT) -o $@ po/german.po

po/jp/LC_MESSAGES/bar.mo: po/japanese.po
	$(INSTALL) -d $(@D)
	$(MSGFMT) -o $@ po/japanese.po

# create BAR symbol files
ifeq (@HAVE_BREAKPAD@,1)
release/bar.sym: bar@EXEEXT@
	$(DUMP_SYMS) ./bar@EXEEXT@ >$@
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol file."
endif

ifeq (@HAVE_BREAKPAD@,1)
release/bar.sym.bz2.o: release/bar.sym
	$(BZIP2) -c < release/bar.sym >release/bar.sym.bz2
	(format=$(shell $(OBJDUMP) -a release/bar.o|grep 'file format'|sed 's/.*file format\s*//g'); \
         name=$(subst .,_,$(subst /,_,release/bar.sym.bz2)); \
         $(OBJCOPY) \
           -I binary \
           -O $$format \
           -B i386 \
           --redefine-sym _binary_$${name}_start=_minidump_symbols_start \
           --redefine-sym _binary_$${name}_end=_minidump_symbols_end \
           --redefine-sym _binary_$${name}_size=_minidump_symbols_size \
           release/bar.sym.bz2 $@; \
        )
	$(RMF) release/bar.sym.bz2
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol object file."
endif

ifeq (@HAVE_BREAKPAD@,1)
debug/bar.sym: bar-debug@EXEEXT@
	$(DUMP_SYMS) ./bar-debug@EXEEXT@ >$@
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol file."
endif

ifeq (@HAVE_BREAKPAD@,1)
debug/bar.sym.bz2.o: debug/bar.sym
	$(BZIP2) -c < debug/bar.sym >debug/bar.sym.bz2
	(format=$(shell $(OBJDUMP) -a debug/bar.o|grep 'file format'|sed 's/.*file format\s*//g'); \
         name=$(subst .,_,$(subst /,_,debug/bar.sym.bz2)); \
         $(OBJCOPY) \
           -I binary \
           -O $$format \
           -B i386 \
           --redefine-sym _binary_$${name}_start=_minidump_symbols_start \
           --redefine-sym _binary_$${name}_end=_minidump_symbols_end \
           --redefine-sym _binary_$${name}_size=_minidump_symbols_size \
           debug/bar.sym.bz2 $@; \
        )
	$(RMF) debug/bar.sym.bz2
else
	@$(ECHO) "ERROR: breakpad not configured - cannot build symbol object file."
endif

# compile SQLite, xdelta C source without warning and debug flags
sqlite3.o: $(SQLITE3_SOURCE) $(SQLITE3_HEADER)
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(SQLITE_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@

ifeq (@HAVE_XDELTA@,1)
xdelta3.o: ../xdelta3/xdelta3.c
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DHAVE_CONFIG_H -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(XDELTA3_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
endif

# create bar-keygen script
bar-keygen@SHELLEXT@: $(SOURCE_DIR)/bar-keygen.in
	$(CAT) $(SOURCE_DIR)/bar-keygen.in | \
        ( \
          while IFS="" read -r line; do \
            if   test "$$line" = "@CERTTOOL/CA.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/certtool/ca.tmpl; \
            elif test "$$line" = "@CERTTOOL/SERVER.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/certtool/server.tmpl; \
            elif test "$$line" = "@OPENSSL/CA.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/openssl/ca.tmpl; \
            elif test "$$line" = "@OPENSSL/SERVER.TEMPL@"; then \
              $(CAT) $(SOURCE_DIR)/../ssl/openssl/server.tmpl; \
            else \
              line=`$(ECHO) "$$line"|$(SED) 's|\@TLS_DIR\@|$(DESTDIR)$(TLS_DIR)|g'`; \
              line=`$(ECHO) "$$line"|$(SED) 's|\@CONFIG_DIR\@|$(DESTDIR)$(CONFIG_DIR)|g'`; \
              $(ECHO) "$$line"; \
            fi; \
          done; \
        ) >$@
	$(CHMOD) 775 $@

# error definition
errors.h: $(SOURCE_DIR)/../errors.def $(SOURCE_DIR)/../errors.pl
	$(PERL) $(SOURCE_DIR)/../errors.pl < $^ -h $@
errors.c: $(SOURCE_DIR)/../errors.def $(SOURCE_DIR)/../errors.pl
	$(PERL) $(SOURCE_DIR)/../errors.pl < $^ -c $@

# archive format definition
archive_format.h: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -h $@
archive_format_const.h: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -n $@
archive_format.c: $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def
	$(PERL) $(SOURCE_DIR)/archive_format.pl $(SOURCE_DIR)/archive_format.def -c $@ -i archive.h -i archive_format.h

# index database definition
index_definition.h: $(SOURCE_DIR)/index_definition.pl $(SOURCE_DIR)/index_definition.sql
	$(PERL) $(SOURCE_DIR)/index_definition.pl < $(SOURCE_DIR)/index_definition.sql >$@

# create destroyer (for testing only!)
destroyer@EXEEXT@: $(DESTROYER_OBJECTS) 
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)

# create bar-minidump
bar-minidump.o: bar-minidump.cc

stackwalk_common.o: ../packages/breakpad/src/processor/stackwalk_common.cc

bar-minidump@EXEEXT@: $(BAR_MINIDUMP_OBJECTS)
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          -lbreakpad -ldisasm

# create show chunks program
showchunks@EXEEXT@: showchunks.o
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)

# create bar-sqlite3
bar-sqlite3.o: bar-sqlite3.c errors.h index_definition.h
	$(CC) $(CC_FLAGS) $(CC_ADDITIONAL) $(CC_ADDITIONAL_DEBUG) $(CC_OPTIMIZE) $(CC_OPTIMIZE_DEBUG) -DOS="$(OS)" -DARCHITECTURE="$(ARCHITECTURE)" -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" -DVERSION_SVN="$(VERSION_SVN)" $(foreach z,$(CC_DEFINES) $(CC_DEFINES_DEBUG),-D$z) $(CC_WARN_FLAGS) -I. $(foreach z,$(CC_INCLUDES),-I$z) -c $(SOURCE_DIR)/$*.c -o $*.o

bar-sqlite3: bar-sqlite3.o debug/global.o debug/lists.o debug/strings.o debug/stringlists.o debug/files.o debug/devices.o debug/stacktraces.o debug/errors.o sqlite3.o
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)

# ----------------------------------------------------------------------------

# run server
.PHONY: run runserver run_en runserver_en run_de runserver_de run_ssl runserver_ssl
run runserver: bar@EXEEXT@
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db \
        --server-jobs-directory=jobs

run_en runserver_en: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=en_US nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db \
        --server-jobs-directory=jobs

run_de runserver_de: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=de_DE nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db \
        --server-jobs-directory=jobs

run_jp runserver_jp: bar@EXEEXT@
	$(INSTALL) -d jobs
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=ja_JP nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db \
        --server-jobs-directory=jobs

run_ssl runserver_ssl: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db \
        --server-jobs-directory=jobs \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem

.PHONY: rundev rundevd rundevd1 rundevd2 rundevddd rundevvalgrind rundev_en rundev_de rundev_jp rundev_ssl runserver runserver_ssl rundev_test
rundev: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
        --log-file=/tmp/bar.log --log=all

rundev1 rundevd: bar-debug@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar.log --log=all

rundevd2: bar-debug@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	nice ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --continuous-database=bar-continuous2.db --index-database=bar-index2.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs2 \
        --server-port=39999 --server-tls-port=0 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar2.log --log=all --server-debug

rundevddd: bar-debug@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	$(DDD) --args ./bar-debug@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
        --log-file=/tmp/bar.log --log=all

rundevvalgrind: bar-valgrind ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) ./bar-valgrind --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --continuous-database=bar-continuous.db --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar.log --log=all

rundev_en: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=en_US nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar.log --log=all

rundev_de: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=de_DE nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --index-database=bar-index.db \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar.log --log=all

rundev_jp: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	__BAR_LOCALE__=$(CURDIR)/po LANGUAGE=ja_JP nice ./bar@EXEEXT@ --daemon -D \
        --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar.log --log=all

rundev_ssl: bar@EXEEXT@ ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	nice ./bar@EXEEXT@ --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --index-database=bar-index.db --index-database-keep-time=365days \
        --server-jobs-directory=jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem \
        --log-file=/tmp/bar.log --log=all

rundev_test: bar ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	$(INSTALL) bar.cfg /tmp/bar.cfg
	nice ./bar --daemon -D --no-default-config --config=/tmp/bar.cfg \
        --index-database=test/index.db \
        --server-jobs-directory=test/jobs \
        --server-port=39909 --server-tls-port=39910 \
        --server-ca-file=../bar-ca.pem --server-cert-file=../bar-server-cert.pem --server-key-file=../bar-server-key.pem --server-port=39909 \
        --verbose=0

../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem:
	$(MAKE) -C .. keys

# ----------------------------------------------------------------------------

# helper function to check valid exitcode
# call functionTestCheckExitcode,<min. valid exitcode>,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $3 2>/dev/null; if test $$? -lt $1 -o $$? -gt $2; then false; fi

# do tests
#
# Tests:
#   create, list, test, compare, extract
#   with compression defined in COMPRESS_NAMES
#   with encryption defined in CRYPT_NAMES
#   asymmetric crypt
#   splitting
#   everything together
#   parameters and errors
#   images
#   dvd
#
# For image tests some sudo-commands are required:
#  sudo losetup <loop device> <file>
#  sudo losetup -d <loop device>
#  sudo chmod o+rw <loop device>
#  sudo mkfs <options> <loop device>
#  sudo mount <loop device> test/dev
#  sudo umount <loop device>
#  sudo cp $(TEST_DATA_DIR)/data test/dev
#  sudo dd <loop device> <file>
#  sudo diff -r <mount point> <mount point>

# different test files
TEST_FILE_NAMES = \
  zero128.dat \
  zero1024.dat \
  zero512k.dat \
  random128.dat \
  random1024.dat \
  random512k.dat \
  zero-random512k.dat \
  zero.dat \
  readonly.dat \
  readonly512k.dat \
  unreadable.dat \
  smallfile.dat \
  sub_dir \
  sub_ignore_dir \
  linkdata.dat \
  link.dat \
  link_not_existing_file.dat \
  circular_link.dat.marker \
  hardlinkdata.dat \
  hardlink.dat \
  file400.dat \
  file640.dat \
  file644.dat \
  file664.dat \
  file666.dat \
  nodump.dat \
  fifo \
  data\'.dat \
  data\".dat \
  data\\.dat \
  data\\n.dat \
  data%d%f%s%p.dat \
  delta1/test.dat \
  delta2/test.dat
ifneq ($(ATTR)$(SETFATTR),)
TEST_FILE_NAMES += \
  extended_attribute.dat \
  sub_dir_extended_attribute \
  hardlink_extended_attribute.dat \
  hardlinkdata_extended_attribute.dat
endif

TEST_FILES = $(foreach z,$(TEST_FILE_NAMES),$(TEST_DATA_DIR)/data/$z)

TEST_HUGEFILE_NAMES = \
  zero5G.dat \
  random5G.dat \

TEST_HUGEFILES = $(foreach z,$(TEST_HUGEFILE_NAMES),$(TEST_DATA_DIR)/data_huge/$z)

# temporary test files
TEST_FILES_CLEAN = \
  test/*.bar \
  test/*.bar_destroyed \
  test/*.bid \
  test/new \
  test/restore \
  test/*.image \
  test/index.db

# test bar executables
TEST_BAR          ?= ./bar@EXEEXT@
TEST_BAR_DEBUG    = ./bar-debug@EXEEXT@
TEST_BAR_GCOV     = ./bar-gcov@EXEEXT@
TEST_BAR_VALGRIND = ./bar-valgrind@EXEEXT@
TEST_BAR_SQLITE3  = ./bar-sqlite3
TEST_DESTROYER    = ./destroyer@EXEEXT@

# test keys
TEST_KEYS = $(TEST_KEY_CRYPT_PUBLIC) \
            $(TEST_KEY_CRYPT_PRIVATE) \
            $(TEST_KEY_CRYPT_OTHER_PUBLIC) \
            $(TEST_KEY_CRYPT_OTHER_PRIVATE) \
            $(TEST_KEY_SIGNATURE_PUBLIC) \
            $(TEST_KEY_SIGNATURE_PRIVATE) \
            $(TEST_KEY_SIGNATURE_OTHER_PUBLIC) \
            $(TEST_KEY_SIGNATURE_OTHER_PRIVATE)

# default test options
TEST_OPTIONS = --no-default-config --config=$(CURDIR)/$(TEST_CONFIG)

.PHONY: test test_win
.PHONY: test-debug test_win-debug
.PHONY: test1 test2 test3 test4 test5 test6 test7 test8 test9 test10 test11
.PHONY: test1-debug test2-debug test3-debug test4-debug test5-debug test6-debug test7-debug test8-debug test9-debug test10-debug test11-debug
.PHONY: test1-valgrind test2-valgrind test3-valgrind test4-valgrind test5-valgrind test6-valgrind test7-valgrind test8-valgrind test9-valgrind test10-valgrind test11-valgrind
.PHONY: test_basic test_compress test_crypt test_asymmetric_crypt test_signatures test_split test_image test_storage test_dvd test_combined test_parameters test_misc
.PHONY: test_basic-debug test_compress-debug test_crypt-debug test_asymmetric_crypt-debug test_signatures-debug test_split-debug test_image-debug test_storage-debug test_dvd-debug test_combined-debug test_parameters-debug test_misc-debug
.PHONY: test_basic-valgrind test_compress-valgrind test_crypt-valgrind test_asymmetric_crypt-valgrind test_signatures_crypt-valgrind test_split-valgrind test_image-valgrind test_storage-valgrind test_dvd-valgrind test_combined-valgrind test_parameters-valgrind test_misc-valgrind
.PHONY: test_storage_file test_storage_ftp test_storage_scp test_storage_sftp test_storage_webdav
.PHONY: test_storage_file-debug test_storage_ftp-debug test_storage_scp-debug test_storage_sftp-debug test_storage_webdav-debug
.PHONY: test_storage_file-valgrind test_storage_ftp-valgrind test_storage_scp-valgrind test_storage_sftp-valgrind test_storage_webdav-valgrind
.PHONY: test_all test_all-debug test_all-valgrind
.PHONY: test_clean show_debug_test_code run_debug_test_code
test:
	@$(MAKE) QUIET=1 --no-print-directory -s \
          test_basic \
          test_compress \
          test_crypt \
          test_asymmetric_crypt \
          test_signatures \
          test_split \
          test_image \
          test_combined \
          test_server \
          test_parameters \
          test_misc

test-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test

test-valgrind:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_VALGRIND) test

test_win: $(TEST_BAR)
	$(TEST_BAR) -o -c c:\\tmp\\x.bar -# c:\\users\\torsten
	$(TEST_BAR) -L c:\\tmp\\x.bar 

test-win-debug:
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test-win

test_clean:
	$(RMRF) $(TEST_FILES_CLEAN)
	$(RMF)  $(TEST_CONFIG) $(TEST_SERVER_CONFIG) $(TEST_KEYS)

test1 test_basic: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 1: basic..."
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=${PWD}/test/index.db --max-threads=1" \
          test_file_operations \
          ;
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=${PWD}/test/index.db" \
          test_file_operations \
          ;
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --index-database=${PWD}/test/index.db" \
          test_file_operations_dryrun \
          ;
	@$(ECHO) "ok"

test1-debug test_basic-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_basic

test1-valgrind test_basic-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_basic

test2 test_compress: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 2: compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --max-threads=1" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test2-debug test_compress-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_compress

test2-valgrind test_compress-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_compress

test_delta_compress: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 2: delta compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress+xdelta9 --crypt-algorithm=none --max-threads=1" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress+xdelta9 --crypt-algorithm=none" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test_delta_compress-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_delta_compress

test_delta_compress-valgrind: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_delta_compress

test3 test_crypt: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 3: crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password='$(TEST_PASSWORD_CRYPT)' --max-threads=1" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=3DES+CAST5+AES256+CAMELLIA256 --crypt-password='$(TEST_PASSWORD_CRYPT)' --max-threads=1" \
          test_file_operations \
          ;
	@$(ECHO) "ok"

test3-debug test_crypt-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_crypt

test3-valgrind test_crypt-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_crypt

test4 test_asymmetric_crypt: $(TEST_BAR) $(TEST_KEYS)
	@$(ECHO_NO_LF) "Test 4: asymmetric crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --max-threads=1" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE)" \
            test_file_operations_dryrun \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test4-debug test_asymmetric_crypt-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_asymmetric_crypt

test4-valgrind test_asymmetric-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_asymmetric_crypt

test5 test_signatures: $(TEST_BAR) $(TEST_KEYS)
	@$(ECHO_NO_LF) "Test 5: signatures..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --max-threads=1" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE)" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE)" \
          test_file_operations_dryrun \
          ;
	# wrong signature
	@$(RMRF) $(TEST_FILES_CLEAN)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) -c test/test.bar test/data
	$(call functionTestCheckExitcode,1,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) --info test/test.bar)
	@$(ECHO) "ok"

test5-debug test_signatures-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_signatures

test5-valgrind signatures-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_signatures

test6 test_split: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 5: split..."
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none --max-threads=1" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none" \
          test_file_operations \
          ;
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="$(TEST_OPTIONS) --archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none" \
          test_file_operations_dryrun \
          ;
	@$(ECHO) "ok"

test6-debug test_split-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_split

test6-valgrind test_split-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_split

test7 test_image: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 6: image..."
	for compress in none zip9; do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none --max-threads=1" \
            $(TEST_IMAGE_OPERATIONS) \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none" \
            $(TEST_IMAGE_OPERATIONS) \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test7-debug test_image-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_image

test7-valgrind test_image-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_image

test8 test_storage: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 7: storage..."
	@$(MAKE) test_storage_file \
	         test_storage_ftp \
	         test_storage_scp \
	         test_storage_sftp \
	         test_storage_webdav

test8-debug test_storage-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage

test8-valgrind test_storage-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage

test_storage_file: $(TEST_BAR)
	$(MAKE) \
          BAR_STORAGE="file://test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --max-threads=1" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="file://test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_file_operations_base \
          ;
# delta test?

test_storage_file-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_file

test_storage_file-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_file

test_storage_ftp: $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_PASSWORD_FTP,parameter TEST_PASSWORD_FTP nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ftp-password='$(TEST_PASSWORD_FTP)' --max-threads=1" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="ftp://$(TEST_HOST_FTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ftp-password='$(TEST_PASSWORD_FTP)'" \
          test_file_operations_base \
          ;

test_storage_ftp-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_ftp

test_storage_ftp-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_ftp

test_storage_scp: $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_PASSWORD_SCP,parameter TEST_PASSWORD_SCP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PUBLIC_KEY_SCP,parameter TEST_PUBLIC_KEY_SCP nor TEST_PUBLIC_KEY_SSH set)
	@$(call functionVerifyParameter,TEST_PRIVATE_KEY_SCP,parameter TEST_PRIVATE_KEY_SCP nor TEST_PRIVATE_KEY_SSH set)
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-public-key=$(TEST_PUBLIC_KEY_SCP) --ssh-private-key=$(TEST_PRIVATE_KEY_SCP) --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))' --max-threads=1" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="scp://$(TEST_HOST_SCP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SCP) --ssh-public-key=$(TEST_PUBLIC_KEY_SCP) --ssh-private-key=$(TEST_PRIVATE_KEY_SCP) --ssh-password='$(TEST_PASSWORD_SCP)' --remote-bar-executable='$(shell $(READLINK) -f $(TEST_BAR))'" \
          test_file_operations_base \
          ;

test_storage_scp-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_scp

test_storage_scp-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_scp

test_storage_sftp: $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_PASSWORD_SFTP,parameter TEST_PASSWORD_SFTP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PUBLIC_KEY_SFTP,parameter TEST_PUBLIC_KEY_SFTP nor TEST_PUBLIC_KEY_SSH set)
	@$(call functionVerifyParameter,TEST_PRIVATE_KEY_SFTP,parameter TEST_PRIVATE_KEY_SFTP nor TEST_PRIVATE_KEY_SSH set)
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-password='$(TEST_PASSWORD_SFTP)' --max-threads=1" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="sftp://$(TEST_HOST_SFTP)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --ssh-port=$(TEST_PORT_SFTP) --ssh-public-key=$(TEST_PUBLIC_KEY_SFTP) --ssh-private-key=$(TEST_PRIVATE_KEY_SFTP) --ssh-password='$(TEST_PASSWORD_SFTP)'" \
          test_file_operations_base \
          ;

test_storage_sftp-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_sftp

test_storage_sftp-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_sftp

test_storage_webdav: $(TEST_BAR)
	@$(call functionVerifyParameter,TEST_PASSWORD_WEBDAV,parameter TEST_PASSWORD_WEBDAV nor TEST_PASSWORD set)
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-password='$(TEST_PASSWORD_WEBDAV)' --max-threads=1" \
          test_file_operations_base \
          ;
	$(MAKE) \
          BAR_STORAGE="webdav://$(TEST_HOST_WEBDAV)/test/" \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none --webdav-password='$(TEST_PASSWORD_WEBDAV)'" \
          test_file_operations_base \
          ;
	@$(ECHO) "ok"

test_storage_webdav-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_storage_webdav

test_storage_webdav-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_storage_webdav

test9 test_hugefiles: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 8: huge files..."
	for compress in $(COMPRESS_NAMES_HUGE); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=none" \
            test_hugefiles_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done
	@$(ECHO) "ok"

test9-debug test_hugefiles-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_hugefiles

test9-valgrind test_hugefiles-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_hugefiles

test10 test_dvd: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 9: dvd..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_dvd_operations \
          ;
	@$(ECHO) "ok"

test10-debug test_dvd-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_dvd

test10-valgrind test_dvd-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_dvd

test11 test_server: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 10: server..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=none --crypt-algorithm=none" \
          test_server_operations \
          ;
	@$(ECHO) "ok"

test11-debug test_serverd-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_server

test11-valgrind test_server-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_server

test_combined: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test combined..."
	for compress in $(TEST_COMBINED_COMPRESS_NAMES); do \
          for crypt in $(TEST_COMBINED_CRYPT_NAMES); do \
            $(MAKE) \
              BAR_FILE=test-### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --archive-part-size=100K" \
              test_file_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            $(MAKE) \
              BAR_FILE=test-### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="$(TEST_OPTIONS) --compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PUBLIC) --signature-private-key=$(CURDIR)/$(TEST_KEY_SIGNATURE_PRIVATE) --archive-part-size=10M" \
              $(TEST_IMAGE_OPERATIONS) \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
          done; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi; \
        done; \
        rc=$$?; \
        if test $$rc -ne 0; then \
          exit $$rc; \
        fi
	@$(ECHO) "ok"

test_combined-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_combined

test_all:
	@$(MAKE) QUIET=1 --no-print-directory -s \
          test_basic \
          test_compress \
          test_crypt \
          test_asymmetric_crypt \
          test_split \
          test_image \
          test_storage \
          test_hugefiles \
          test_dvd \
          test_combined \
          test_parameters \
          test_misc

test_parameters: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	@$(ECHO_NO_LF) "Test parameters..."
	@$(RMRF) $(TEST_FILES_CLEAN)
	@$(ECHO) "# test config" >test/test.cfg
	#
	# help
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -h 1>/dev/null $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --help 1>/dev/null $(if $(QUIET),</dev/null 1>/dev/null))
	#
	# special file names
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar not-existing-file-%d%f%p%s.dat $(if $(QUIET),</dev/null 1>/dev/null))	
	$(call functionTestCheckExitcode,1,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar not-existing-file-%d%f%p%s.dat --skip-unreadable=no $(if $(QUIET),</dev/null 1>/dev/null))	
	#
	# different options
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --comment 'Hello World!' $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar -z zip0 $(TEST_FILES) /dev/ram0 /dev/zero --overwrite-archive-files --comment 'Hello World!' --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar --info $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -g $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -H $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -L $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -g -H -L $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -g -H -L --numeric-uid-gid --numeric-permission $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -# '*rand*' -! '*512*' $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -g -# '*rand*' -! '*512*' $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -H -# '*rand*' -! '*512*' $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -L -# '*rand*' -! '*512*' $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l test/test*.bar -g -H -L -# '*rand*' -! '*512*' $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --config=test/test.cfg -l test/test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --verbose=2 --dry-run $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l cd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t cd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d cd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l dvd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t dvd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d dvd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -l bd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t bd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d bd://test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c /media/ramdisk/test.bar $(TEST_FILES) --overwrite-archive-files --verbose=2 --mount=/media/ramdisk $(if $(QUIET),</dev/null 1>/dev/null))
	#
	# templates
	# 
	@$(RMF) test/test-????-??-??-??-??-??-#.bar; \
        $(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test-%Y-%m-%d-%H-%M-%S-%#.bar $(TEST_FILES) --overwrite-archive-files $(if $(QUIET),</dev/null 1>/dev/null)); \
        test -f test/test-????-??-??-??-??-??-#.bar;
	@$(RMF) test/test-????-??-??-??-??-??-#.bar
	#
	# scripts
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="echo pre" --file-write-post-command="echo post" $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="true;" $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,1,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-pre-command="false;" $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,0,0,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-post-command="true;" $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,1,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --overwrite-archive-files --file-write-post-command="false;" $(if $(QUIET),</dev/null 1>/dev/null))
	#
	# wrong options
	$(call functionTestCheckExitcode,5,5,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) --not-existing-option  $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,5,5,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --compress-algorithm=not-existing-compress  $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,5,5,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --crypt-algorithm=not-existing-crypt $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,5,5,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --crypt-algorithm=3DES+CAST5+AES128+AES192+AES256 $(if $(QUIET),</dev/null 1>/dev/null))
ifeq (@HAVE_XDELTA@,1)
	$(call functionTestCheckExitcode,1,1,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -c test/test.bar $(TEST_FILES) --delta-source=does-not-exists --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files $(if $(QUIET),</dev/null 1>/dev/null))
endif
	$(call functionTestCheckExitcode,6,6,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) --no-default-config --config=test/test-not-exists.cfg -l test/test*.bar $(if $(QUIET),</dev/null 1>/dev/null))
	#
	# test not implemented functions
	$(call functionTestCheckExitcode,127,127,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) device://test/test.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,127,127,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -t device://test/test.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,127,127,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -d device://test/test.bar $(if $(QUIET),</dev/null 1>/dev/null))
	$(call functionTestCheckExitcode,127,127,DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(TEST_OPTIONS) -x device://test/test.bar $(if $(QUIET),</dev/null 1>/dev/null))
	#
	@$(RMF) test/test.cfg
	@$(ECHO) "ok"

test_parameters-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_parameters

test_parameters-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_parameters

test_misc: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	@$(ECHO_NO_LF) "Test miscellaneous..."
	@$(RMRF) $(TEST_FILES_CLEAN)
	#
	if test ! "$(TEST_BAR)" = "$(TEST_BAR_VALGRIND)"; then \
	  $(call functionTestCheckExitcode,134,134,($(ULIMIT) -Sv $(MEMORY_LIMIT_LOW); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c test/test.bar $(TEST_FILES) --overwrite-archive-files $(if $(QUIET),</dev/null 1>/dev/null))); \
        fi

test_misc-debug: $(TEST_BAR_DEBUG)
	@$(MAKE) TEST_BAR_PREFIX="" TEST_BAR=$(TEST_BAR_DEBUG) test_misc
        
test_misc-valgrind: $(TEST_BAR_VALGRIND)
	@$(MAKE) TEST_BAR_PREFIX="$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS)" TEST_BAR=$(TEST_BAR_VALGRIND) test_misc        

show_debug_test_code test_code:
	@$(FIND) . -maxdepth 1 -type f -a \( -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" \) -print | \
          ( \
            while read fileName; do \
              cat $$fileName | $(PERL) -n -e 'if (/DEBUG_TEST_CODE\("(.*)"\)/) { print "'$$fileName': $$1=1\n"; };'; \
            done; \
          )

run_debug_test_code:
	$(call functionTestCheckExitcode,125,125,initAll1=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll2=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll3=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll4=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll5=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll6=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll7=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll8=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll9=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll10=1 $(TEST_BAR))
	$(call functionTestCheckExitcode,125,125,initAll11=1 $(TEST_BAR))

.PHONY: test_file_operations
test_file_operations: \
  test_file_operations_base \
  test_file_operations_delta \
  test_file_operations_incremental \
  test_file_operations_differential \
  test_file_operations_destroyed

$(TEST_KEY_CRYPT_PUBLIC) $(TEST_KEY_CRYPT_PRIVATE): $(TEST_BAR)
	$(RMF) $(TEST_KEY_CRYPT_PUBLIC) $(TEST_KEY_CRYPT_PRIVATE)
	$(TEST_BAR) --generate-keys --crypt-password="$(TEST_PASSWORD_CRYPT)" test/key-crypt

$(TEST_KEY_CRYPT_OTHER_PUBLIC) $(TEST_KEY_CRYPT_OTHER_PRIVATE): $(TEST_BAR)
	$(RMF) $(TEST_KEY_CRYPT_OTHER_PUBLIC) $(TEST_KEY_CRYPT_OTHER_PRIVATE)
	$(TEST_BAR) --generate-keys --crypt-password="$(TEST_PASSWORD_CRYPT)" test/key-crypt-other

$(TEST_KEY_SIGNATURE_PUBLIC) $(TEST_KEY_SIGNATURE_PRIVATE): $(TEST_BAR)
	$(RMF) $(TEST_KEY_SIGNATURE_PUBLIC) $(TEST_KEY_SIGNATURE_PRIVATE)
	$(TEST_BAR) --generate-signature-keys test/key-signature

$(TEST_KEY_SIGNATURE_OTHER_PUBLIC) $(TEST_KEY_SIGNATURE_OTHER_PRIVATE): $(TEST_BAR)
	$(RMF) $(TEST_KEY_SIGNATURE_OTHER_PUBLIC) $(TEST_KEY_SIGNATURE_OTHER_PRIVATE)
	$(TEST_BAR) --generate-signature-keys test/key-signature-other

$(TEST_DATA_DIR)/data/zero128.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=128 2>/dev/null
$(TEST_DATA_DIR)/data/zero1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=1024 2>/dev/null
$(TEST_DATA_DIR)/data/zero512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1k count=512 2>/dev/null
$(TEST_DATA_DIR)/data/random128.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
$(TEST_DATA_DIR)/data/random1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=1024 2>/dev/null
$(TEST_DATA_DIR)/data/random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null
$(TEST_DATA_DIR)/data/zero-random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>$@  2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_RANDOM) bs=1k count=64 1>>$@ 2>/dev/null
	$(DD) if=$(DEVICE_ZERO)   bs=1k count=64 1>>$@ 2>/dev/null
$(TEST_DATA_DIR)/data/zero.dat:
	$(INSTALL) -d $(@D)
	$(RMF) $0; touch $@
$(TEST_DATA_DIR)/data/readonly.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@; $(CHMOD) 440 $@
$(TEST_DATA_DIR)/data/readonly512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null; $(CHMOD) 440 $@
$(TEST_DATA_DIR)/data/unreadable.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@; $(CHMOD) 000 $@
$(TEST_DATA_DIR)/data/smallfile.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
$(TEST_DATA_DIR)/data/sub_dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World >$@/test.dat
$(TEST_DATA_DIR)/data/sub_ignore_dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World >$@/test.dat
	touch $@/.nobackup
$(TEST_DATA_DIR)/data/linkdata.dat $(TEST_DATA_DIR)/data/link.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$(TEST_DATA_DIR)/data/linkdata.dat bs=1k count=512 2>/dev/null
	($(CD) $(@D); $(RMF) link.dat; $(LN) -s linkdata.dat link.dat)
$(TEST_DATA_DIR)/data/link_not_existing_file.dat:
	$(INSTALL) -d $(@D)
	($(CD) $(TEST_DATA_DIR)/data; $(RMF) link_not_existing_file.dat; $(LN) -s not-existing-file link_not_existing_file.dat)
$(TEST_DATA_DIR)/data/circular_link.dat.marker:
	$(INSTALL) -d $(@D)
	($(CD) $(TEST_DATA_DIR)/data; $(LN) -s circular_link.dat circular_link.dat)
	touch $@
$(TEST_DATA_DIR)/data/hardlinkdata.dat $(TEST_DATA_DIR)/data/hardlink.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$(TEST_DATA_DIR)/data/hardlinkdata.dat bs=1k count=512 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink.dat; $(LN) hardlinkdata.dat hardlink.dat)
$(TEST_DATA_DIR)/data/file400.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 400 $@
$(TEST_DATA_DIR)/data/file640.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 640 $@
$(TEST_DATA_DIR)/data/file644.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 644 $@
$(TEST_DATA_DIR)/data/file664.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 664 $@
$(TEST_DATA_DIR)/data/file666.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 666 $@
$(TEST_DATA_DIR)/data/nodump.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 440 $@; $(CHATTR) +d $@
ifneq ($(ATTR),)
$(TEST_DATA_DIR)/data/extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $@ 1>/dev/null
$(TEST_DATA_DIR)/data/sub_dir_extended_attribute:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $@ 1>/dev/null
$(TEST_DATA_DIR)/data/hardlinkdata_extended_attribute.dat $(TEST_DATA_DIR)/data/hardlink_extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$(TEST_DATA_DIR)/data/hardlinkdata_extended_attribute.dat bs=1 count=1024 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink_extended_attribute.dat; $(LN) hardlinkdata_extended_attribute.dat hardlink_extended_attribute.dat); $(ATTR) -s foo1 -V test $(TEST_DATA_DIR)/data/hardlink_extended_attribute.dat 1>/dev/null; $(ATTR) -s foo2 -V "Hello World" $(TEST_DATA_DIR)/data/hardlink_extended_attribute.dat 1>/dev/null
else
ifneq ($(SETFATTR),)
$(TEST_DATA_DIR)/data/extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(ATTR) -s foo1 -V test $@ 1>/dev/null; $(SETFATTR) -n foo2 -v "Hello World" $@ 1>/dev/null
$(TEST_DATA_DIR)/data/sub_dir_extended_attribute:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(SETFATTR) -s foo1 -V test $@ 1>/dev/null; $(ATTR) -n foo2 -v "Hello World" $@ 1>/dev/null
$(TEST_DATA_DIR)/data/hardlinkdata_extended_attribute.dat $(TEST_DATA_DIR)/data/hardlink_extended_attribute.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$(TEST_DATA_DIR)/data/hardlinkdata_extended_attribute.dat bs=1 count=1024 2>/dev/null
	($(CD) $(@D); $(RMF) hardlink_extended_attribute.dat; $(LN) hardlinkdata_extended_attribute.dat hardlink_extended_attribute.dat); $(SETFATTR) -s foo1 -V test $(TEST_DATA_DIR)/data/hardlink_extended_attribute.dat 1>/dev/null; $(ATTR) -n foo2 -v "Hello World" $(TEST_DATA_DIR)/data/hardlink_extended_attribute.dat 1>/dev/null
endif
endif
$(TEST_DATA_DIR)/data/fifo:
	$(INSTALL) -d $(@D)
	($(CD) $(TEST_DATA_DIR)/data; $(MKFIFO) fifo)
$(TEST_DATA_DIR)/data/data\'.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
$(TEST_DATA_DIR)/data/data\".dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
$(TEST_DATA_DIR)/data/data\\.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
$(TEST_DATA_DIR)/data/data\\n.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
$(TEST_DATA_DIR)/data/data%d%f%s%p.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
$(TEST_DATA_DIR)/data/data%d%f%s%p.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World >$@
$(TEST_DATA_DIR)/data/delta1/test.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1k count=512 2>/dev/null; \
        ) >$@
$(TEST_DATA_DIR)/data/delta2/test.dat: $(TEST_DATA_DIR)/data/delta1/test.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test.dat skip=0 bs=1k count=255 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1k count=1 2>/dev/null; \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test.dat skip=256 bs=1k count=256 2>/dev/null; \
        ) >$@

$(TEST_DATA_DIR)/data_huge/zero5G.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=5120 2>/dev/null
$(TEST_DATA_DIR)/data_huge/random5G.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=5120 2>/dev/null

test/bar.cfg:
	$(INSTALL) -d $(@D)
	( \
          echo '# bar test configuration'; \
        ) >$@
	$(CHMOD) 600 $@

$(TEST_SERVER_DATABASE): \
  $(TEST_BAR_SQLITE3)
	@$(call functionVerifyParameter,TEST_SERVER_DATABASE)
	@
	$(INSTALL) -d $(@D)
	$(TEST_BAR_SQLITE3) --create $(TEST_SERVER_DATABASE) "INSERT INTO entities (id,jobUUID) VALUES (1,'test')"

$(TEST_DATA_DIR)/data/zero128.dat:

# helper function to check if parameter exists
# call functionVerifyParameter,<name>[,message]
functionVerifyParameter = \
  if test -z "$($1)"; then \
    if test -n "$2"; then \
      $(ECHO) >&2 "ERROR: $2"; \
    else \
      $(ECHO) >&2 "ERROR: parameter '$1' not set"; \
    fi; \
    exit 1; \
  fi

.PHONY: test_file_operations_base test_file_operations_delta test_file_operations_dryrun test_file_operations_incremental test_file_operations_differential test_file_operations_destroyed
test_file_operations_base: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# normal tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -l $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --destination $(TEST_DATA_DIR)/restore $(if $(QUIET),</dev/null 1>/dev/null))
	$(DIFF) -r \
          -x unreadable.dat \
          -x link_not_existing_file.dat \
          -x circular_link.dat \
          -x circular_link.dat.marker \
          -x fifo \
          -x sub_ignore_dir \
          -x nodump.dat \
          $(TEST_DATA_DIR)/data $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data
	$(READLINK) $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/link.dat 2>/dev/null $(if $(QUIET),</dev/null 1>/dev/null)
	test `$(STAT) --format "%a" $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/file400.dat 2>/dev/null` = "400" $(if $(QUIET),</dev/null 1>/dev/null)
	test `$(STAT) --format "%a" $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/file640.dat 2>/dev/null` = "640" $(if $(QUIET),</dev/null 1>/dev/null)
	test `$(STAT) --format "%a" $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/file644.dat 2>/dev/null` = "644" $(if $(QUIET),</dev/null 1>/dev/null)
	test `$(STAT) --format "%a" $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/file664.dat 2>/dev/null` = "664" $(if $(QUIET),</dev/null 1>/dev/null)
	test `$(STAT) --format "%a" $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/file666.dat 2>/dev/null` = "666" $(if $(QUIET),</dev/null 1>/dev/null)
	test `$(STAT) --format "%h" $(TEST_DATA_DIR)/restore/$(TEST_DATA_DIR)/data/hardlink.dat 2>/dev/null` -eq 2 $(if $(QUIET),</dev/null 1>/dev/null)

test_file_operations_delta: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
ifeq (@HAVE_XDELTA@,1)
	# delta tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) $(TEST_DATA_DIR)/data/delta1; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-A.bar test.dat $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	#
	$(RMF) test/$(BAR_PATTERN)-B.bar test/restore/test.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar test.dat --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),</dev/null 1>/dev/null))
	$(DIFF) $(TEST_DATA_DIR)/data/delta2/test.dat test/restore/test.dat
	#
	$(RMF) test/$(BAR_PATTERN)-B.bar test/restore/test.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),</dev/null 1>/dev/null))
	$(DIFF) $(TEST_DATA_DIR)/data/delta2/test.dat test/restore/test.dat
	#
ifeq (@HAVE_BZ2@,1)
	$(RMF) test/$(BAR_PATTERN)-B.bar test/restore/test.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),</dev/null 1>/dev/null))
	$(DIFF) $(TEST_DATA_DIR)/data/delta2/test.dat test/restore/test.dat
endif
	#
ifeq (@HAVE_LZMA@,1)
	$(RMF) test/$(BAR_PATTERN)-B.bar test/restore/test.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); $(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),</dev/null 1>/dev/null))
	$(DIFF) $(TEST_DATA_DIR)/data/delta2/test.dat test/restore/test.dat
endif
endif

test_file_operations_dryrun: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# normal tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --dry-run --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))

test_file_operations_incremental: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# incremental tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c test/$(BAR_FILE)-full.bar --full --incremental-list-file=test/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	$(INSTALL) -d test/new; $(CP) $(TEST_DATA_DIR)/data/random1024.dat test/new/random1024-new.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c test/$(BAR_FILE)-incremental.bar --incremental --incremental-list-file=test/$(BAR_FILE).bid $(TEST_FILES) test/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination test/restore $(if $(QUIET),</dev/null 1>/dev/null))

test_file_operations_differential: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# differential tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c test/$(BAR_FILE)-full.bar --full --incremental-list-file=test/$(BAR_FILE).bid $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	$(INSTALL) -d test/new; $(CP) $(TEST_DATA_DIR)/data/random1024.dat test/new/random1024-new.dat
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c test/$(BAR_FILE)-differential.bar --differential --incremental-list-file=test/$(BAR_FILE).bid $(TEST_FILES) test/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null))
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination test/restore $(if $(QUIET),</dev/null 1>/dev/null))

.PHONY: test_file_operations_destroyed
test_file_operations_destroyed: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_DESTROYER) \
  $(TEST_FILES)
	# tests which must cause errors
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c test/$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:16:FIL0 >$${fileName}_destroyed; done
	- `($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test*.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null)` $(if $(QUIET),</dev/null 1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:20:XXXX >$${fileName}_destroyed; done
	- `($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null)` $(if $(QUIET),</dev/null 1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:32:XXXX >$${fileName}_destroyed; done
	- `($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null)` $(if $(QUIET),</dev/null 1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName d:1000:10 >$${fileName}_destroyed; done
	- `($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null)` $(if $(QUIET),</dev/null 1>/dev/null)

# helper function to create test file with data
# call functionTestFileCreate,<data device>,<file>,<size>
functionTestFileCreate = \
  ( \
    $(DD) if=$1 of=$2 bs=$3 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  )

# helper function to create a test device
# call functionTestDeviceReset
functionTestDeviceReset = \
  @( \
    $(ECHO) $(SUDO) $(UMOUNT) test/dev0; \
    $(SUDO) $(UMOUNT) test/dev0 2>/dev/null; \
    $(ECHO) $(SUDO) $(UMOUNT) test/dev1; \
    $(SUDO) $(UMOUNT) test/dev1 2>/dev/null; \
    $(ECHO) $(SUDO) $(LOSETUP) -d $(LOOP0); \
    $(SUDO) $(LOSETUP) -d $(LOOP0) 2>/dev/null; \
    $(ECHO) $(SUDO) $(LOSETUP) -d $(LOOP1); \
    $(SUDO) $(LOSETUP) -d $(LOOP1) 2>/dev/null; \
    true; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileZero,<file>,<size>
functionCreateFileZero = \
  @( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 bs=$2 count=1; \
    $(DD) if=$(DEVICE_ZERO) of=$1 bs=$2 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create huge spare test file
# call functionCreateFileSpare,<file>,<size>
functionCreateFileSpare = \
  @( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1; \
    $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileRandom,<file>,<size>
functionCreateFileRandom = \
  @( \
    $(ECHO) $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$2 count=1; \
    $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$2 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionTestDeviceCreate,<loop device>,<image file>,<mount point>
functionTestDeviceCreate = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) $1 $2; \
    $(SUDO) $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(CHMOD) o+rw $1; \
    $(SUDO) $(CHMOD) o+rw $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to delete a test device
# call functionTestDeviceDelete,<loop device>,<mount point>
functionTestDeviceDelete = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) -d $1; \
    $(SLEEP) 5; \
    $(SUDO) $(LOSETUP) -d $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to initialize file system on a test device
# call functionInitFilesystem,<image file>,<mkfs options>[,<files>]
functionInitFilesystem = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) $(LOOP0) $1; \
    $(SUDO) $(LOSETUP) $(LOOP0) $1; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(CHMOD) o+rw $(LOOP0); \
    $(SUDO) $(CHMOD) o+rw $(LOOP0); \
    $(ECHO) $(SUDO) $(MKFS) $2 $(LOOP0); \
    $(SUDO) $(MKFS) $2 $(LOOP0) 1>/dev/null 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(if $3,$(ECHO) $(INSTALL) -d test/dev0; \
            $(INSTALL) -d test/dev0; \
            $(ECHO) $(SUDO) $(MOUNT) $(LOOP0) test/dev0; \
            $(SUDO) $(MOUNT) $(LOOP0) test/dev0; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
            $(ECHO) $(SUDO) $(CP) -r -p $3 test/dev0; \
            $(SUDO) $(CP) -r -p $3 test/dev0 1>/dev/null 2>/dev/null; \
            $(SLEEP) 5; \
            $(ECHO) $(SUDO) $(UMOUNT) test/dev0; \
            $(SUDO) $(UMOUNT) test/dev0; \
    ) \
    $(ECHO) $(SUDO) $(LOSETUP) -d $(LOOP0); \
    $(SLEEP) 5; \
    $(SUDO) $(LOSETUP) -d $(LOOP0); \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionDeviceMount,<loop device>,<image file>,<mount point>
functionDeviceMount = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) $1 $2; \
    $(SUDO) $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(CHMOD) o+rw $1; \
    $(SUDO) $(CHMOD) o+rw $1; \
    $(ECHO) $(INSTALL) -d $3; \
    $(INSTALL) -d $3; \
    $(ECHO) $(SUDO) $(MOUNT) $1 $3; \
    $(SUDO) $(MOUNT) $1 $3; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionDeviceUmount,<loop device>,<mount point>
functionDeviceUmount = \
  @( \
    $(ECHO) $(SUDO) $(UMOUNT) $2; \
    $(SUDO) $(UMOUNT) $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(LOSETUP) -d $1; \
    $(SLEEP) 5; \
    $(SUDO) $(LOSETUP) -d $1; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

# helper function to dump content of device to file
# call functionTestDeviceDump,<loop device>,<file>
functionTestDeviceDump = \
  @( \
    $(ECHO) $(SUDO) $(DD) if=$1 of=- \> $2; \
    ($(SUDO) $(DD) if=$1 of=-) >$2 2>/dev/null; \
  ) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)

.PHONY: test_image_operations
test_image_operations: \
  test_image_operations_raw \
  test_image_operations_ext \
  test_image_operations_fat \
  test_image_operations_reiser

.PHONY: test_image_operations_raw
test_image_operations_raw:
	# --------------------------------------------------------------
	# raw
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	@
	# raw zero-data
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data, delta image
	$(call functionCreateFileRandom,test/dev0a.dat,32M)
	$(call functionCreateFileRandom,test/dev0b.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat

.PHONY: test_image_ext test_image_ext2 test_image_ext3 test_image_ext4
test_image_operations_ext: \
  test_image_operations_ext2 \
  test_image_operations_ext3 \
  test_image_operations_ext4 

# Ext2
test_image_operations_ext2:
ifneq (@MKFS_EXT2@,)
	# --------------------------------------------------------------
	# ext2
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	@
	# ext2 zero-data, default block size
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, default block size
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 1024 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 1024 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 1024 bytes, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 2048 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 2048 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 2048 bytes, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 4096 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 4096 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 4096 bytes, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Ext3
test_image_operations_ext3:
ifneq (@MKFS_EXT3@,)
	# --------------------------------------------------------------
	# ext3
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# ext3 zero-data, default block size
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, default block size
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 1024 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 1024 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 2048 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 2048 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 4096 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 4096 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Ext4
test_image_operations_ext4:
ifneq (@MKFS_EXT4@,)
	# --------------------------------------------------------------
	# ext4
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# ext4 zero-data, default block size
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, default block size
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 1024 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 1024 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 1024,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 2048 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 2048 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 2048,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 4096 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 4096 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	#$(call functionCreateSpare,test/dev0.dat,512G)
	#$(call functionCreateSpare,test/dev1.dat,512G)
	#$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	#$(MAKE) test_image_operations_base \
        #   DEVICE0=$(LOOP0) DEVICE1=$(LOOP1)
	#$(call functionTestDeviceDelete,$(LOOP1),test/dev1)
	#$(call functionTestDeviceDelete,$(LOOP0),test/dev0)
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 4096,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

.PHONY: test_image_fat test_image_fat12 test_image_fat16 test_image_fat32
test_image_operations_fat: \
  test_image_operations_fat12 \
  test_image_operations_fat16 \
  test_image_operations_fat32

# FAT 12
test_image_operations_fat12:
ifneq (@MKFS_MSDOS@,)
	# --------------------------------------------------------------
	# FAT12
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# FAT12 zero-data
	$(call functionCreateFileZero,test/dev0.dat,1440K)
	$(call functionCreateFileZero,test/dev1.dat,1440K)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 12,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT12 random-data
	$(call functionCreateFileRandom,test/dev0.dat,1440K)
	$(call functionCreateFileRandom,test/dev1.dat,1440K)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 12,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT12 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 12,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 12,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# FAT 16
test_image_operations_fat16:
ifneq (@MKFS_MSDOS@,)
	# --------------------------------------------------------------
	# FAT16
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# FAT16 zero-data
	$(call functionCreateFileZero,test/dev0.dat,20M)
	$(call functionCreateFileZero,test/dev1.dat,20M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 16,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT16 random-data
	$(call functionCreateFileRandom,test/dev0.dat,20M)
	$(call functionCreateFileRandom,test/dev1.dat,20M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 16,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT16 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 16,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 16,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# FAT 32
test_image_operations_fat32:
ifneq (@MKFS_MSDOS@,)
	# --------------------------------------------------------------
	# FAT32
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# FAT32 zero-data
	$(call functionCreateFileZero,test/dev0.dat,40M)
	$(call functionCreateFileZero,test/dev1.dat,40M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 32,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT32 random-data
	$(call functionCreateFileRandom,test/dev0.dat,40M)
	$(call functionCreateFileRandom,test/dev1.dat,40M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 32,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT32 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 32,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 32,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

.PHONY: test_image_reiser test_image_reiserfs1 test_image_reiserfs2 test_image_reiserfs3 test_image_reiser4
test_image_operations_reiser: \
  test_image_operations_reiserfs1 \
  test_image_operations_reiserfs2 \
  test_image_operations_reiserfs3 \
  test_image_operations_reiser4

test_image_operations_reiserfs1:
ifneq (@MKFS_REISERFS@,)
endif

test_image_operations_reiserfs2:
ifneq (@MKFS_REISERFS@,)
endif

# ReiserFS version 3 (Note: Linux only support block size 4096)
test_image_operations_reiserfs3:
ifneq (@MKFS_REISERFS@,)
	# --------------------------------------------------------------
	# ReiserFS 3
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# ReiserFS 3 zero-data
	$(call functionCreateFileZero,test/dev0.dat,64M)
	$(call functionCreateFileZero,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.5,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 random-data
	$(call functionCreateFileRandom,test/dev0.dat,64M)
	$(call functionCreateFileRandom,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.5,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 zero-data
	$(call functionCreateFileZero,test/dev0.dat,64M)
	$(call functionCreateFileZero,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.6,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 random-data
	$(call functionCreateFileRandom,test/dev0.dat,64M)
	$(call functionCreateFileRandom,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.6,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ReiserFS 3 random-data, delta image
	$(call functionCreateFileZero,test/dev0a.dat,64M)
	$(call functionCreateFileZero,test/dev0b.dat,64M)
	$(call functionCreateFileZero,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0a.dat,-t reiserfs -b 4096 -q --format 3.6,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t reiserfs -b 4096 -q --format 3.6,$(TEST_DATA_DIR)/data/random* $(TEST_DATA_DIR)/data/zero*.dat $(TEST_DATA_DIR)/data/readonly*.dat $(TEST_DATA_DIR)/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Reiser4 (Note: not supported anymore)
test_image_operations_reiser4:
ifneq (@MKFS_REISER4@,)
endif

.PHONY: test_image_operations_base test_image_operations_check test_image_operations_diff_image
test_image_operations_base: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# normal tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0),test/dev0)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -m test/$(BAR_FILE).bar $(DEVICE0) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)

test_image_operations_delta: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# delta tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0_A)
	@$(call functionVerifyParameter,IMAGE0_B)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A),test/dev0)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -m test/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
ifeq (@HAVE_XDELTA@,1)
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B),test/dev0)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -m test/$(BAR_FILE)-B.bar $(DEVICE0) --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
endif
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A),test/dev0)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -m test/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --compress-algorithm=zip9 --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
ifeq (@HAVE_XDELTA@,1)
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B),test/dev0)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -m test/$(BAR_FILE)-B.bar $(DEVICE0) --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9+zip9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
endif
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(if $(QUIET),</dev/null 1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)

test_image_operations_check:
	# check file systems and compare file content
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@
	@# ---
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0),test/dev0)
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE0) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE1) $(if $(QUIET),</dev/null 1>/dev/null 2>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	@
	$(call functionDeviceMount,$(DEVICE0),$(IMAGE0),test/dev0)
	$(call functionDeviceMount,$(DEVICE1),$(IMAGE1),test/dev1)
	$(SUDO) $(DIFF) -r test/dev0 test/dev1 $(if $(QUIET),</dev/null 1>/dev/null)
	$(SLEEP) 5
	$(call functionDeviceUmount,$(DEVICE0),test/dev0)
	$(call functionDeviceUmount,$(DEVICE1),test/dev1)

test_image_operations_diff_image:
	# compare devices
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@
	@# ---
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0),test/dev0)
	$(call functionTestDeviceDump,$(DEVICE0),test/dev0.dump)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	$(call functionTestDeviceDump,$(DEVICE1),test/dev1.dump)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	@
	$(DIFF) test/dev0.dump test/dev1.dump

.PHONY: test_image_operations_dryrun
test_image_operations_dryrun: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# delta tests
	@$(call functionVerifyParameter,TEST_BAR)
	#
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	@
	# raw zero-data
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images --dry-run)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images --dry-run)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat


.PHONY: test_hugefiles_operations
test_hugefiles_operations: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_HUGEFILES)
	# normal tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	$(INSTALL) -d $(TEST_DATA_DIR)/tmp
	for z in $(TEST_HUGEFILES); do \
          DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar $$z $(BAR_OPTIONS) --overwrite-archive-files --tmp-directory=$(TEST_DATA_DIR)/tmp --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null); \
          DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -l $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null); \
          DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null); \
          DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) $(if $(QUIET),</dev/null 1>/dev/null); \
          DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -x $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_PATTERN).bar $(BAR_OPTIONS) --destination test/restore $(if $(QUIET),</dev/null 1>/dev/null); \
        done

.PHONY: test_dvd_operations
test_dvd_operations: \
  $(TEST_BAR) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	# create DVD
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	$(SLEEP) 30
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c dvd://$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t dvd://$(BAR_FILE).bar $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d dvd://$(BAR_FILE).bar $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -L dvd://$(BAR_FILE).bar $(if $(QUIET),</dev/null 1>/dev/null)
	$(SLEEP) 30
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -c dvd://$(BAR_FILE).bar $(TEST_FILES) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --ecc $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -t dvd://$(BAR_FILE).bar $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -d dvd://$(BAR_FILE).bar $(if $(QUIET),</dev/null 1>/dev/null)
	DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR) -L dvd://$(BAR_FILE).bar $(if $(QUIET),</dev/null 1>/dev/null)

# send command to server
functionServerCommandSocket = \
  $(ECHO) $2; $(ECHO) 1 $2|$(NETCAT) $1|$(TAIL) -n +2
functionServerCommandBatch = \
  $(ECHO) 1 $1

.PHONY: test_server_operations test_server_operations_socket test_server_operations_batch
test_server_operations: \
  test_server_operations_socket \

#  test_server_operations_batch

test_server_operations_socket_server: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	@$(call functionVerifyParameter,TEST_BAR_DEBUG)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	( \
	  $(ULIMIT) -Sv $(MEMORY_LIMIT); \
          \
	  : start server; \
          $(INSTALL) -d $(TEST_SERVER_JOBS); \
          $(INSTALL) bar.cfg $(TEST_SERVER_CONFIG); \
          $(RMF) $(TEST_SERVER_JOBS)/__test__; \
	  DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR_DEBUG) \
	    $(TEST_OPTIONS) \
            --daemon \
	    --pid-file=$(TEST_SERVER_PID_FILE) \
	    --server-port=$(TEST_SERVER_PORT) \
	    --index-database=$(TEST_SERVER_DATABASE) \
            --server-jobs-directory=$(TEST_SERVER_JOBS) \
	    --server-debug \
            --log-file=$(TEST_SERVER_LOG_FILE) \
            --log=all \
            --max-threads=1 \
            $(ADDITIONAL_OPTIONS) \
            ; \
          if test $$? -eq 0; then \
	    $(SLEEP) 20; \
          else \
            exit 1; \
          fi; \
        ) $(if $(QUIET),</dev/null 1>/dev/null)

test_server_operations_socket_client: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	@$(call functionVerifyParameter,TEST_BAR_DEBUG)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	( \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),VERSION); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STATUS); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_LIST); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_GET name=tmp-directory); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_SET name=tmp-directory value=/tmp); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SERVER_OPTION_FLUSH); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEVICE_LIST); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ROOT_LIST); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FILE_LIST directory=/tmp) 1>/dev/null; \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_LIST) 1>/dev/null; \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_NEW name=__test__ jobUUID=test); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INCLUDE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),MOUNT_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),EXCLUDE_COMPRESS_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SOURCE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SCHEDULE_LIST jobUUID=test); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),ARCHIVE_LIST name=$(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar) 1>/dev/null; \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PAUSE time=300 modeMask=CREATE); \
	  $(SLEEP) 2; \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),CONTINUE); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DECRYPT_PASSWORD_CLEAR); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DECRYPT_PASSWORD_ADD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),FTP_PASSWORD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),SSH_PASSWORD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),WEBDAV_PASSWORD encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),CRYPT_PASSWORD jobUUID=test encryptType=NONE encryptedPassword=74657374); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),PASSWORDS_CLEAR); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),JOB_DELETE jobUUID=test); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STORAGE_LIST_CLEAR); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),STORAGE_LIST_ADD indexId=0); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_ADD pattern=$(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar); \
	  $(SLEEP) 2; \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_UUID_LIST indexStateSet='*' indexModeSet='*' name='*'); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGES_INFO name='*' indexStateSet='*' indexModeSet='*'); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_STORAGE_LIST name='*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRIES_INFO name='*' indexType='*' newestOnly=yes); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),INDEX_ENTRY_LIST name='*' indexType='*' newestOnly=yes offset=0 limit=100); \
	  $(SLEEP) 2; \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_PRINT_STATISTICS); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_PRINT_MEMORY_INFO); \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),DEBUG_DUMP_MEMORY_INFO); \
          \
          $(call functionServerCommandSocket,localhost $(TEST_SERVER_PORT),QUIT); \
	  $(SLEEP) 20; \
        ) $(if $(QUIET),</dev/null 1>/dev/null)

test_server_operations_socket: \
  $(TEST_FILES) \
  $(TEST_SERVER_DATABASE)
	# create test archive
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR_DEBUG) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	@$(MAKE) test_server_operations_socket_server
	@$(MAKE) test_server_operations_socket_client
	if test -f $(TEST_SERVER_PID_FILE); then $(KILL) -9 `$(CAT) $(TEST_SERVER_PID_FILE)` 2>/dev/null; fi; \

test_server_operations_batch: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_FILES)
	@$(call functionVerifyParameter,TEST_BAR_DEBUG)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	# create test archive
	($(ULIMIT) -Sv $(MEMORY_LIMIT); DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR_DEBUG) -c $(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),</dev/null 1>/dev/null))
	@
	( \
          $(call functionServerCommandBatch,VERSION); \
          $(call functionServerCommandBatch,STATUS); \
          \
          $(call functionServerCommandBatch,JOB_LIST); \
          \
          $(call functionServerCommandBatch,PAUSE time=120 modeMask=ALL); \
	  $(SLEEP) 2; \
          $(call functionServerCommandBatch,CONTINUE); \
          \
          $(call functionServerCommandBatch,DECRYPT_PASSWORD_CLEAR); \
          $(call functionServerCommandBatch,DECRYPT_PASSWORD_ADD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,FTP_PASSWORD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,SSH_PASSWORD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,WEBDAV_PASSWORD encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,CRYPT_PASSWORD jobUUID=test encryptType=NONE encryptedPassword=test); \
          $(call functionServerCommandBatch,PASSWORDS_CLEAR); \
          \
          $(call functionServerCommandBatch,STORAGE_LIST_CLEAR); \
          $(call functionServerCommandBatch,STORAGE_LIST_ADD uuid='*' enityId=0 storageId=0); \
          \
          $(call functionServerCommandBatch,INDEX_STORAGE_ADD pattern=$(if $(BAR_STORAGE),$(BAR_STORAGE),test/)$(BAR_FILE).bar); \
	  $(SLEEP) 2; \
          $(call functionServerCommandBatch,INDEX_UUID_LIST indexStateSet='*' indexModeSet='*' name='*'); \
          \
          $(call functionServerCommandBatch,INDEX_STORAGES_INFO name='*' indexStateSet='*'); \
          $(call functionServerCommandBatch,INDEX_STORAGE_LIST entityId=0 name='*' indexStateSet='*' indexModeSet='*' offset=0 limit=100); \
          \
          $(call functionServerCommandBatch,INDEX_ENTRIES_INFO name='*' indexType='*' newestOnly=yes); \
          $(call functionServerCommandBatch,INDEX_ENTRY_LIST name='*' indexType='*' newestOnly=yes offset=0 limit=100); \
	  $(SLEEP) 2; \
          \
          $(call functionServerCommandBatch,DEBUG_PRINT_STATISTICS); \
          $(call functionServerCommandBatch,DEBUG_PRINT_MEMORY_INFO); \
          $(call functionServerCommandBatch,DEBUG_DUMP_MEMORY_INFO); \
          \
          $(call functionServerCommandBatch,QUIT); \
	  $(SLEEP) 60; \
        ) | \
        ( \
	  $(ULIMIT) -Sv $(MEMORY_LIMIT); \
	  DISPLAY= SSH_ASKPASS= $(TEST_BAR_PREFIX) $(TEST_BAR_DEBUG) \
	    --batch \
	    --index-database=$(TEST_SERVER_DATABASE) \
	    --server-debug; \
        ) $(if $(QUIET),</dev/null 1>/dev/null)

# ----------------------------------------------------------------------------

# code coverage analysis
.PHONY: gcov coverage
.PHONY: gcov_clean
.PHONY: gcov_zero
.PHONY: gcov1 gcov2 gcov3 gcov4 gcov5 gcov6 gcov7 gcov8 gcov9 gcov10
.PHONY: gcov_basic gcov_compress gcov_crypt gcov_asymmetric_crypt gcov_split gcov_image gcov_storage gcov_server gcov_parameters gcov_misc
gcov coverage:
	@$(call functionVerifyParameter,TEST_PASSWORD_FTP,parameter TEST_PASSWORD_FTP nor TEST_PASSWORD set)
	@$(call functionVerifyParameter,TEST_PASSWORD_SSH,parameter TEST_PASSWORD_SSH nor TEST_PASSWORD set) 
	$(if $(CHECK), \
          $(MAKE) \
            gcov$(CHECK),\
          $(MAKE) xQUIET=1 --no-print-directory -s \
            gcov1 gcov2 gcov3 gcov4 gcov5 gcov6 gcov7 gcov8 gcov9 gcov10 \
        )
	$(LCOV) --base-directory . --directory . --capture --output-file bar-gcov.info
	$(INSTALL) -d coverage
	$(GENHTML) -o coverage bar-gcov.info --legend
	# work-around for bug in genhtml?
	ln -sfT coverage/gcov.css gcov.css

gcov_clean:
	$(RMF) gcov/*.gcda
	$(RMRF) $(TEST_FILES_CLEAN)
	$(RMRF) coverage

gcov_zero:
	$(LCOV) --base-directory . --directory . --zerocounters

gcov_html:
	$(LCOV) --base-directory . --directory . --capture --output-file bar-gcov.info
	$(INSTALL) -d coverage
	$(GENHTML) -o coverage bar-gcov.info --legend
	# work-around for bug in genhtml?
	ln -sfT coverage/gcov.css gcov.css

gcov1 gcov_basic: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) \
          test_basic 2>/dev/null

gcov2 gcov_compress: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) COMPRESS_NAMES="zip0 bzip1 lzma1 lzo1 lz4-0" \
          test_compress 2>/dev/null

gcov3 gcov_crypt: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) CRYPT_NAMES=AES256 \
          test_crypt 2>/dev/null

gcov4 gcov_asymmetric_crypt: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) CRYPT_NAMES=AES256 \
          test_asymmetric_crypt 2>/dev/null

gcov5 gcov_split: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) COMPRESS_NAMES=zip0 CRYPT_NAMES=AES256 \
          test_split

gcov6 gcov_image: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) COMPRESS_NAMES=zip0 CRYPT_NAMES=AES256 TEST_IMAGE_OPERATIONS="test_image_operations_raw test_image_operations_ext2 test_image_operations_fat16 test_image_operations_reiserfs3" \
          test_image

gcov7 gcov_storage: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) COMPRESS_NAMES=zip0 CRYPT_NAMES=AES256 \
          test_storage

gcov8 gcov_server: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) \
          test_server 2>/dev/null

gcov9 gcov_parameters: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) \
          test_parameters 2>/dev/null

gcov10 gcov_misc: \
  $(TEST_BAR_GCOV)
	@$(MAKE) TEST_BAR=$(TEST_BAR_GCOV) \
          test_misc 2>/dev/null

# ----------------------------------------------------------------------------

# valgrind checks
.PHONY: memcheck
memcheck: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=summary" \
          $(if $(CHECK),\
            memcheck$(CHECK),\
            memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8 \
           )

.PHONY: memcheck_extended
memcheck_extended: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=full" \
            $(if $(CHECK),\
              memcheck$(CHECK),\
              memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8 \
             )

.PHONY: memcheck1 memcheck2 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 memcheck8
memcheck1: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) --help >/dev/null
memcheck2: \
  memcheck2a \
  memcheck2b \
  memcheck2c \
  memcheck2d \
  memcheck2e
memcheck2a: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
memcheck2b: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --compress-algorithm=bzip9 --overwrite-archive-files >/dev/null
memcheck2c: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD_CRYPT) --overwrite-archive-files >/dev/null
memcheck2d: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --compress-algorithm=none --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD_CRYPT) --crypt-type=asymmetric --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) --signature-public-key=$(CURDIR)/test/signature-key.public --signature-private-key=$(CURDIR)/test/signature-key.private --overwrite-archive-files >/dev/null
memcheck2e: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c test/test-###.bar $(TEST_FILES) $(BAR_OPTIONS) --archive-part-size=100000 --overwrite-archive-files >/dev/null
memcheck2f: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files --dry-run >/dev/null
memcheck3:  \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -l test/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck4: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -t test/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck5: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -d test/test*.bar $(BAR_OPTIONS) >/dev/null
memcheck6: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) -x test/test*.bar $(BAR_OPTIONS) --destination test/restore >/dev/null
memcheck7: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(TEST_BAR_VALGRIND) -c test/test.bar $(TEST_FILES) $(BAR_OPTIONS) --overwrite-archive-files >/dev/null
	-$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) dvd:///dev/dvd $(BAR_OPTIONS) >/dev/null
	-$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) dvd:///dev/dvd: $(BAR_OPTIONS) >/dev/null
memcheck8: \
  $(TEST_BAR_VALGRIND) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(VALGRIND) --tool=memcheck $(VALGRIND_FLAGS) \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          $(TEST_BAR_VALGRIND) \
            --daemon \
            --no-detach \
            --no-default-config \
            --server-jobs-directory=jobs \
            --server-ca-file=bar-ca.pem \
            --server-cert-file=bar-server-cert.pem \
            --server-key-file=bar-server-key.pem \
            --server-port=$(TEST_SERVER_PORT) \
            --server-tls-port=$(TEST_SERVER_SSL_PORT) \
            --server-debug &
	$(SLEEP) 30
	$(ECHO) '1 VERSION' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 JOB_LIST' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEVICE_LIST' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 FILE_LIST storageDirectory=/tmp'| $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 PASSWORDS_CLEAR' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 INDEX_STORAGE_LIST maxCount=10 indexState=* indexMode=* pattern=x'| $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEBUG_PRINT_STATISTICS' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEBUG_PRINT_MEMORY_INFO' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 DEBUG_DUMP_MEMORY_INFO' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) 'UNKNOWN' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 UNKNOWN' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)
	$(ECHO) '1 QUIT' | $(NETCAT) $(TEST_HOST) $(TEST_SERVER_PORT)

#valgrind --tool=cachegrind ./bar -c test2.bar -o -z xdelta9 --delta-source=test1.bar bar

# ----------------------------------------------------------------------------

# different performance files
PERFORMANCE_FILES = \
  $(TEST_DATA_DIR)/data/zero100M.dat \
  $(TEST_DATA_DIR)/data/random100M.dat \
  $(TEST_DATA_DIR)/data/delta1/test100M.dat \
  $(TEST_DATA_DIR)/data/delta2/test100M.dat \

# temporary performance files
PERFORMANCE_FILES_CLEAN = \
  test/*.bar \
  test/new \
  test/restore \
  test/*.image

# test bar exeuctable
PERFORMANCE_BAR = ./bar@EXEEXT@

$(TEST_DATA_DIR)/data/zero100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=100 2>/dev/null
$(TEST_DATA_DIR)/data/random100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=100 2>/dev/null
$(TEST_DATA_DIR)/data/delta1/test100M.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1M count=100 2>/dev/null; \
        ) >$@
$(TEST_DATA_DIR)/data/delta2/test100M.dat: $(TEST_DATA_DIR)/data/delta1/test100M.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test100M.dat skip=0 bs=1M count=50 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1M count=1 2>/dev/null; \
          $(DD) if=$(TEST_DATA_DIR)/data/delta1/test100M.dat skip=256 bs=1M count=49 2>/dev/null; \
        ) >$@

# performance tests
.PHONY: performance
performance:
	@$(MAKE) \
          $(if $(CHECK),\
            performance$(CHECK),\
            performance_none performance_zip_compress performance_bzip2_compress performance_lzma_compress performance_delta_compress \
           )

.PHONY: performance1 performance_none
performance1 performance_none: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "None (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance2 performance_zip_compress
performance2 performance_zip_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "ZIP (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=zip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance3 performance_bzip2_compress
performance3 performance_bzip2_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "BZIP2 (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=bzip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance4 performance_lzma_compress
performance4 performance_lzma_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "LZMA (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar $(TEST_DATA_DIR)/data/zero100M.dat $(TEST_DATA_DIR)/data/random100M.dat --overwrite-archive-files --compress-algorithm=lzma9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance5 performance_delta_compress
performance5 performance_delta_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
ifeq (@HAVE_XDELTA@,1)
	@$(ECHO) "XDELTA (100M random):"
	@($(CD) $(TEST_DATA_DIR)/data/delta1; ../../../$(PERFORMANCE_BAR) -c ../../test-A.bar test100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null)
	@$(ECHO_NO_LF) "  Create : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -c ../../test-B.bar test100M.dat --overwrite-archive-files --compress-algorithm=xdelta9+lzma9 --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Test   : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -t ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Diff   : "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -d ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Extract: "
	@($(CD) $(TEST_DATA_DIR)/data/delta2; DISPLAY= SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -x ../../test-B.bar --delta-source=../../test-A.bar --destination=../../restore --overwrite-files 1>/dev/null 2>/dev/null")
endif

# ----------------------------------------------------------------------------

# testcode runs:
#   1A+2+3+4: full+list+diff+extract
#   1B+2+3+4: differentiell+list+diff+extract
#   1C+2+3+4: incremental+list+diff+extract

TESTCODE_COMMAND1A=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --full \
                     --log-post-command='true' \
                     -c test/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND1B=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --differential \
                     --incremental-list-file=test/test.bid \
                     --log-post-command='true' \
                     -c test/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND1C=$(TEST_BAR_DEBUG) \
                     --compress-algorithm=lzma9 \
                     --crypt-algorithm=AES256 \
                     --crypt-password=$(TEST_PASSWORD_CRYPT) \
                     --crypt-type=asymmetric \
                     --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                     --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                     --signature-public-key=$(CURDIR)/test/signature-key.public \
                     --signature-private-key=$(CURDIR)/test/signature-key.private \
                     --archive-part-size=100K \
                     --overwrite-archive-files \
                     --incremental \
                     --incremental-list-file=test/test.bid \
                     --log-post-command='true' \
                     -c test/test-\#\#\#.bar $(TEST_DATA_DIR)/data
TESTCODE_COMMAND2=$(TEST_BAR_DEBUG) \
                    --crypt-password=$(TEST_PASSWORD_CRYPT) \
                    --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                    --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                    --signature-public-key=$(CURDIR)/test/signature-key.public \
                    --signature-private-key=$(CURDIR)/test/signature-key.private \
                    -l test/test-*.bar
TESTCODE_COMMAND3=$(TEST_BAR_DEBUG) \
                    --crypt-password=$(TEST_PASSWORD_CRYPT) \
                    --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                    --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                    --signature-public-key=$(CURDIR)/test/signature-key.public \
                    --signature-private-key=$(CURDIR)/test/signature-key.private \
                    -d test/test-*.bar
TESTCODE_COMMAND4=$(TEST_BAR_DEBUG) \
                    --crypt-password=$(TEST_PASSWORD_CRYPT) \
                    --crypt-public-key=$(CURDIR)/$(TEST_KEY_CRYPT_PUBLIC) \
                    --crypt-private-key=$(CURDIR)/$(TEST_KEY_CRYPT_PRIVATE) \
                    --signature-public-key=$(CURDIR)/test/signature-key.public \
                    --signature-private-key=$(CURDIR)/test/signature-key.private \
                    --destination=test/restore \
                    -x test/test-*.bar

TESTCODE_COMMANDS = \
  TESTCODE_COMMAND1A \
  TESTCODE_COMMAND1B \
  TESTCODE_COMMAND1C \
  TESTCODE_COMMAND2 \
  TESTCODE_COMMAND3 \
  TESTCODE_COMMAND4 \

# call functionTestcode(command)
functionTestcode = \
 if test $$rc -ne $(TESTCODE_EXITCODE); then \
   TESTCODE_LIST=testcode.list TESTCODE_NAME=testcode.name TESTCODE_DONE=testcode.done \
     $($1) >/dev/null; \
   rc=$$?; \
   if test $$rc -ne $(TESTCODE_EXITCODE); then \
     $(ECHO) "Test code fail $1 (exitcode: $$rc):"; \
     $(ECHO) "TESTCODE=$(if $(testcode),$(testcode),`$(CAT) testcode.name 2>/dev/null`) $($1)"; \
   fi; \
 fi

# helper function to execute test code
# call functionTestcodeA
# call functionTestcodeB
# call functionTestcodeC
functionTestcodeA = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1A); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   exit $$rc; \
  )

functionTestcodeB = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1B); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   if test -z "$(TESTCODE)" -a -z "`$(CAT) testcode.name 2>/dev/null`"; then \
     $(ECHO) "ERROR: No more testcode executed!"; \
     $(ECHO) ""; \
     $(ECHO) "Available and not executed testcode:"; \
     $(MAKE) --quiet testcode_diff; \
   fi; \
   \
   exit $$rc; \
  )

functionTestcodeC = \
  ( \
   rc=0; \
   \
   $(call functionTestcode,TESTCODE_COMMAND1C); \
   $(call functionTestcode,TESTCODE_COMMAND2); \
   $(call functionTestcode,TESTCODE_COMMAND3); \
   $(call functionTestcode,TESTCODE_COMMAND4); \
   \
   if test -z "$(TESTCODE)" -a -z "`$(CAT) testcode.name 2>/dev/null`"; then \
     $(ECHO) "ERROR: No more testcode executed!"; \
     $(ECHO) ""; \
     $(ECHO) "Available and not executed testcode:"; \
     $(MAKE) --quiet testcode_diff; \
   fi; \
   \
   exit $$rc; \
  )

.PHONY: testcode_clean testcode_init testcode_all testcode testcodex testcode_list testcode_diff

testcode_clean:
	$(RMRF) $(TEST_FILES_CLEAN)
	$(RMF) testcode.list testcode.skip testcode.name testcode.done

testcode_init: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	$(ECHO_NO_LF) >testcode.list
	$(ECHO_NO_LF) >testcode.done
	for z in $(TESTCODE_SKIP); do $(ECHO) $$s; done >testcode.skip
	$(foreach z,$(TESTCODE_COMMANDS),TESTCODE_LIST=testcode.list $($z) >/dev/null;)

testcode_all: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	rc=$(TESTCODE_EXITCODE); \
        while test $$rc -eq $(TESTCODE_EXITCODE); do \
          rc=0; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeA) 1>/dev/null 2>/dev/null; \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeB); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeC); \
            rc=$$?; \
          fi; \
        done

testcode: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
          rc=0; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeA); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeB); \
            rc=$$?; \
          fi; \
          if test $$rc -ne $(TESTCODE_EXITCODE); then \
            $(call functionTestcodeC); \
            rc=$$?; \
          fi; \

testcodex: \
  $(TEST_BAR_DEBUG) \
  $(TEST_CONFIG) \
  $(TEST_KEYS) \
  $(TEST_FILES)
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND1)
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND2) >/dev/null; \
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND3) >/dev/null; \
	$(TESTCODE_COMMAND1) >/dev/null
	TESTCODE=$(shell $(CAT) testcode.name) \
          $(TESTCODE_COMMAND4) >/dev/null; \

testcode_list:
	$(ECHO_NO_LF) >testcode.list
	$(foreach z,$(TESTCODE_COMMANDS),TESTCODE_LIST=testcode.list $($z) >/dev/null;)

testcode_diff:
	$(CAT) testcode.list | $(CUT) -d " " -f 1 | $(SORT) >testcode.list.sorted
	$(CAT) testcode.done | $(CUT) -d " " -f 1 | $(SORT) >testcode.done.sorted
	$(DIFF) testcode.list.sorted testcode.done.sorted | $(GREP) '<' | $(SED) 's/<\s*/  /g'
	$(RMF) testcode.list.sorted testcode.done.sorted

# ----------------------------------------------------------------------------
# install/uninstall
# Note: prefix is used for temporary installations

.PHONY: install uninstall

install: \
  $(TARGETS) \
  $(SCRIPTS) \
  $(DOC)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-debug@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) -m 644 bar-debug@EXEEXT@.sym "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-keygen@SHELLEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) bar-sqlite3@EXEEXT@ "$(DESTDIR)$(INSTALL_BIN_DIR)"
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_CONFIG_DIR)"
	if test ! -f "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg"; then \
          $(INSTALL) -m 600 bar.cfg "$(DESTDIR)$(INSTALL_CONFIG_DIR)"; \
        else \
          echo "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg NOT installed - file already exists!"; \
        fi
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_CONFIG_DIR)/jobs"
	for language in $(LANGUAGES); do \
          $(INSTALL) -d "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES"; \
          $(INSTALL) po/$$language/LC_MESSAGES/bar.mo "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES/bar.mo"; \
        done

# uninstall all
uninstall:
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar@EXEEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-keygen@SHELLEXT@"
	$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/bar-sqlite3@EXEEXT@"
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
        )
	$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.cfg"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-ca.pem"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/certs/bar-server-cert.pem"
	$(RMF) "$(DESTDIR)$(INSTALL_TLS_DIR)/private/bar-server-key.pem"
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/bar.jks" \
        )
	$(RMF) "$(DESTDIR)$(INSTALL_ETC_DIR)/init.d/barserver"
	$(RMF) "$(DESTDIR)$(INSTALL_MAN_DIR)/man7/bar.7"
	$(RMDIR) "$(DESTDIR)$(INSTALL_CONFIG_DIR)/jobs"
	for language in $(LANGUAGES); do \
          $(RMF) "$(DESTDIR)$(INSTALL_LOCALE_DIR)/$$language/LC_MESSAGES/bar.mo"; \
        done

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist: \
  $(TEST_FILES)
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/bar
	$(INSTALL) -m 664 \
                   $(sort $(BAR_SOURCES) \
                          $(BAR_HEADERS) \
                          $(EXTERN_SOURCES) \
                          $(EXTERN_HEADERS) \
                          $(DESTROYER_SOURCES) \
                          $(DESTROYER_HEADERS) \
                          $(DESTROYER_SOURCES) \
                          $(BAR_MINIDUMP_SOURCES) \
                          $(BAR_MINIDUMP_HEADERS) \
                          $(BAR_SQLITE3_SOURCES) \
                          $(BAR_SQLITE3_HEADERS) \
                          $(OTHER_SOURCES) \
                          Makefile.in \
                          config.h.in \
                          bar.cfg \
                   ) \
                   $(DIRECTORY)/bar
	$(INSTALL) -d $(DIRECTORY)/bar/po
	$(INSTALL) -m 664 \
                   $(sort po/Makefile.in \
                          po/*.pot \
                          po/*.po \
                   ) \
                   $(DIRECTORY)/bar/po
	$(INSTALL) -d $(DIRECTORY)/bar/test
	$(INSTALL) -d $(DIRECTORY)/bar/$(TEST_DATA_DIR)/data
	$(INSTALL) -m 664 $(TEST_DATA_DIR)/data/zero.dat \
                          $(TEST_DATA_DIR)/data/zero128.dat \
                          $(TEST_DATA_DIR)/data/zero1024.dat \
                          $(TEST_DATA_DIR)/data/zero512k.dat \
                          $(TEST_DATA_DIR)/data/random128.dat \
                          $(TEST_DATA_DIR)/data/random1024.dat \
                          $(TEST_DATA_DIR)/data/random512k.dat \
                          $(TEST_DATA_DIR)/data/zero-random512k.dat \
                          $(TEST_DATA_DIR)/data/smallfile.dat \
                          $(DIRECTORY)/bar/$(TEST_DATA_DIR)/data
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

# ----------------------------------------------------------------------------

.PHONY: crashdump
crashdump:
ifneq ($(MINIDUMP),)
	../packages/breakpad/src/tools/linux/md2core/minidump-2-core -v $(MINIDUMP) 1>bar.core 2>bar.core.out
	(a=`grep -w GUID bar.core.ouot |grep bar|sed 's/-.*//g'`; \
         b=`objdump -h ./bar|grep \.text|awk '{print $$4}'`; \
         gdb --eval-command="add-symbol-file ./bar `perl -e 'die unless $$ARGV[0] && $$ARGV[1]; printf("%#x\n", hex($$ARGV[0]) + hex($$ARGV[1]))' $$a $$b;`" --core ./bar.core; \
        )
else
	echo "Please specify minidump file with MINIDUMP=<file name>"
endif

# ----------------------------------------------------------------------------

ifeq ($(NO_DEPEND),)
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include Makefile.depend
endif
endif
endif

# end of file
