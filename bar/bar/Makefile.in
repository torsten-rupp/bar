# ----------------------------------------------------------------------------
#
# $Revision$
# $Date$
# $Author$
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM            = @PLATFORM@

#------------------------------------ paths ----------------------------------

INSTALL_DIR         = @INSTALL_DIR@
INSTALL_BIN_DIR     = @INSTALL_BIN_DIR@
CONFIG_DIR          = @CONFIG_DIR@
TLS_DIR             = @TLS_DIR@

#--------------------------------- tool chain --------------------------------

# shell in Makefile must be bash
SHELL               = bash

CC                  = @CC@
CC_FLAGS            = @CC_FLAGS@ -g
CC_WARN_FLAGS       = @CC_WARN_FLAGS@
CXX                 = @CXX@
CXX_FLAGS           = @CXX_FLAGS@ -g
CXX_WARN_FLAGS      = @CXX_WARN_FLAGS@
CC_OPTIMIZE         = @CC_OPTIMIZE@
CC_DEFINES          = PLATFORM_$(PLATFORM) @CC_DEFINES@ _LONG_LONG
# -D_LONG_LONG
CC_INCLUDES         = @CC_INCLUDES@
ifdef WERROR
  CC_FLAGS += -Werror
endif

LD                  = $(if @CXX@,@CXX@,@CC@)
LD_FLAGS            = @LD_FLAGS@
LD_LIBRARY_PATHS    = @LIBRARY_PATHS@
LD_LIBRARIES        = @LIBRARIES@
LD_STATIC_LIBRARIES = @STATIC_LIBRARIES@
LD_STATIC_PREFIX    = -Wl,-Bstatic
LD_DYNAMIC_PREFIX   = -Wl,-Bdynamic

#---------------------------------- commands----------------------------------

CAT           = cat
CD            = cd
CHATTR        = chattr
CHMOD         = chmod
CP            = cp
DD            = dd
DIFF          = diff
DUMP_SYMS     = @DUMP_SYMS@
ECHO          = echo
ECHO_NO_LF    = echo -n
GREP          = grep
INSTALL       = @INSTALL@
LN            = ln
LS            = ls
MKDIR         = mkdir
MKFIFO        = mkfifo
NETCAT        = netcat
PERL          = @PERL@
READLINK      = readlink
RMDIR         = rmdir
RMF           = rm -f
RMRF          = rm -rf
SED           = sed
SLEEP         = sleep
STAT          = stat
TAR           = tar
TIME          = @TIME@

# for tests only (create test devices)
FSCK          = fsck
LOSETUP       = /sbin/losetup
MKFS          = /sbin/mkfs
MOUNT         = /bin/mount
UMOUNT        = /bin/umount
SUDO          = sudo

LOOP0         = /dev/loop0
LOOP1         = /dev/loop1
DEVICE_ZERO   = /dev/zero
DEVICE_RANDOM = /dev/urandom

#------------------------ specific variables/settings ------------------------

# major, minor version number
VERSION_MAJOR := $(shell $(CAT) ../version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) ../version|$(GREP) MINOR|$(SED) 's/MINOR=//g')

# supported compress algorithms
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9
ifeq (@HAVE_BZ2@,1)
COMPRESS_NAMES += bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9
endif
ifeq (@HAVE_LZMA@,1)
COMPRESS_NAMES += lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9
endif

# supported crypt algorithms
CRYPT_NAMES    = none
ifeq (@HAVE_GCRYPT@,1)
CRYPT_NAMES    += 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
endif

# password used for tests
TEST_PASSWORD=Franz_Kafka:Die_Verwandlung

# crypt/compress used for all-test (do not select all available compress and
# crypt algorithms, because this would take a long time)
TEST_COMBINED_COMPRESS_NAMES=zip9
ifeq (@HAVE_BZ2@,1)
TEST_COMBINED_COMPRESS_NAMES += bzip9
endif
ifeq (@HAVE_LZMA@,1)
TEST_COMBINED_COMPRESS_NAMES += lzma9
endif
TEST_COMBINED_CRYPT_NAMES=none
ifeq (@HAVE_GCRYPT@,1)
TEST_COMBINED_CRYPT_NAMES += AES256
endif

#---------------------------------- rules ------------------------------------

# disable implicit rule for *.y -> *.c
%.c: %.y

# compile C source
%.o: %.c
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o $*.o

# compile C++ source
%.o: %.cpp
	$(CXX) $(CXX_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(foreach z,$(CC_DEFINES),-D$z) $(CXX_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.cpp -o $*.o

# link object files
%@EXEEXT@: %.o
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(LD_DYNAMIC_PREFIX)) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z)

#--------------------------------- objects -----------------------------------

BAR_SOURCES          = bar.c \
                       errors.c \
                       commands_create.c \
                       commands_list.c \
                       commands_test.c \
                       commands_compare.c \
                       commands_restore.c \
                       files.c \
                       devices.c \
                       filesystems.c \
                       archive.c \
                       archive_format.c \
                       chunks.c \
                       patterns.c \
                       patternlists.c \
                       entrylists.c \
                       compress.c \
                       sources.c \
                       crypt.c \
                       passwords.c \
                       misc.c \
                       storage.c \
                       index.c \
                       network.c \
                       server.c \
                       $(if @HAVE_BREAKPAD@,minidump.cpp) \
                       \
                       global.c \
                       cmdoptions.c \
                       configvalues.c \
                       lists.c \
                       strings.c \
                       stringlists.c \
                       ringbuffers.c \
                       threads.c \
                       msgqueues.c \
                       semaphores.c \
                       fragmentlists.c \
                       arrays.c \
                       dictionaries.c \
                       bitmaps.c \
                       database.c

BAR_OBJECTS          = $(foreach z,$(BAR_SOURCES),$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$z))) \
                       errors.o \
                       archive_format.o

EXTERN_SOURCES       = sqlite3.c

EXTERN_OBJECTS       = $(foreach z,$(EXTERN_SOURCES),$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$z))) \
                       $(if @HAVE_XDELTA@,xdelta3.o)

DESTROYER_SOURCES    = destroyer.c \
                       global.c \
                       cmdoptions.c \
                       lists.c \
                       strings.c \

DESTROYER_OBJECTS    = $(foreach z,$(DESTROYER_SOURCES),$(patsubst %.c,%.o,$(patsubst %.cpp,%.o,$z))) \

OTHER_SOURCES        = forward.h \
                       \
                       filesystems_ext.c \
                       filesystems_fat.c \
                       filesystems_reiserfs.c \
                       \
                       archive_format.pl \
                       archive_format.def \
                       index_definition.pl \
                       index_definition.sql \
                       valgrind.supp \
                       bar.cfg \
                       bar-keygen.in \

INTERMEDIATE         = errors.c \
                       errors.h \
                       archive_format.c \
                       archive_format.h \
                       archive_format_const.h \
                       index_definition.h \

TARGETS              = bar@EXEEXT@ \
                       $(if @HAVE_BREAKPAD@,bar.symbols) \
                       bar-keygen \
                       destroyer@EXEEXT@ \

#------------------------------ dependencies ---------------------------------

# default target
.PHONY: all clean distclean depend
all: $(TARGETS)

# clean
clean:
	$(RMF) $(BAR_OBJECTS)
	$(RMF) $(EXTERN_OBJECTS)
	$(RMF) $(DESTROYER_OBJECTS)
	$(RMF) $(INTERMEDIATE)
	$(RMF) $(TARGETS)
	$(RMRF) test

distclean: \
  clean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h

# help
.PHONY: help
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(ECHO) "  run"
	@$(ECHO) "  run_ssl"
	@$(ECHO) "  rundev"
	@$(ECHO) "  rundev_ssl"
	@$(ECHO) ""
	@$(ECHO) "  test"
	@$(ECHO) "  test1, test_basic"
	@$(ECHO) "  test2, test_compress, test_delta_compress"
	@$(ECHO) "  test3, test_crypt"
	@$(ECHO) "  test4, test_asymmetric_crypt"
	@$(ECHO) "  test5, test_split"
	@$(ECHO) "  test6, test_image"
	@$(ECHO) "  test7, test_dvd"
	@$(ECHO) "  test_combined"
	@$(ECHO) "  test_parameters"
	@$(ECHO) ""
	@$(ECHO) "  test_image_operations"
	@$(ECHO) "  test_image_operations_raw"
	@$(ECHO) "  test_image_operations_ext"
	@$(ECHO) "  test_image_operations_fat"
	@$(ECHO) "  test_image_operations_reiserfs"
	@$(ECHO) ""
	@$(ECHO) "  memcheck"
	@$(ECHO) "  memcheck_extended"
	@$(ECHO) ""
	@$(ECHO) "  performance"
	@$(ECHO) "  performance1, performance_none"
	@$(ECHO) "  performance2, performance_zip_compress"
	@$(ECHO) "  performance3, performance_bzip2_compress"
	@$(ECHO) "  performance4, performance_lzma_compress"
	@$(ECHO) "  performance5, performance_delta_compress"
	@$(ECHO) ""
	@$(ECHO) "  dist"

# create dependencies
.PHONY: depend
depend: Makefile.depend

Makefile.depend: $(BAR_SOURCES) $(EXTERN_SOURCES) $(DESTROYER_SOURCES) $(INTERMEDIATE)
	$(ECHO) > Makefile.depend
	for z in $(BAR_SOURCES) $(EXTERN_SOURCES) $(DESTROYER_SOURCES); do \
          $(CC) $(CC_FLAGS) $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -MM >> Makefile.depend $$z; \
        done;

# ----------------------------------------------------------------------------

# create BAR
bar@EXEEXT@: $(BAR_OBJECTS) $(EXTERN_OBJECTS)

# create BAR symbol file
ifeq (@HAVE_BREAKPAD@,1)
bar.symbols: bar@EXEEXT@
	$(DUMP_SYMS) bar@EXEEXT@ > $@
endif

# compile SQLite, xdelta C source without warning flags
sqlite3.o: sqlite3.c
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@

ifeq (@HAVE_XDELTA@,1)
xdelta3.o: ../xdelta3/xdelta3.c
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(foreach z,$(CC_DEFINES),-D$z) $(foreach z,$(CC_INCLUDES),-I$z) -c $< -o $@
endif

# create bar-keygen script
bar-keygen: bar-keygen.in
	$(CAT) bar-keygen.in | \
        ( \
          while IFS="" read -r line; do \
            if   test "$$line" = "@CERTTOOL/CA.TEMPL@"; then \
              $(CAT) ../ssl/certtool/ca.tmpl; \
            elif test "$$line" = "@CERTTOOL/SERVER.TEMPL@"; then \
              $(CAT) ../ssl/certtool/server.tmpl; \
            elif test "$$line" = "@OPENSSL/CA.TEMPL@"; then \
              $(CAT) ../ssl/openssl/ca.tmpl; \
            elif test "$$line" = "@OPENSSL/SERVER.TEMPL@"; then \
              $(CAT) ../ssl/openssl/server.tmpl; \
            else \
              line=`$(ECHO) "$$line"|$(SED) 's|\@TLS_DIR\@|$(DESTDIR)$(TLS_DIR)|g'`; \
              line=`$(ECHO) "$$line"|$(SED) 's|\@CONFIG_DIR\@|$(DESTDIR)$(CONFIG_DIR)|g'`; \
              $(ECHO) "$$line"; \
            fi; \
          done; \
        ) > $@
	$(CHMOD) 775 $@

# error definition
errors.h: ../errors.def ../errors.pl
	$(PERL) ../errors.pl < $^ -h $@
errors.c: ../errors.def ../errors.pl
	$(PERL) ../errors.pl < $^ -c $@

# archive format definition
archive_format.h: archive_format.def
	$(PERL) archive_format.pl < $^ -h $@
archive_format_const.h: archive_format.def
	$(PERL) archive_format.pl < $^ -n $@
archive_format.c: archive_format.def
	$(PERL) archive_format.pl < $^ -c $@ -i archive_format.h

# index database definition
index_definition.h: index_definition.sql
	$(PERL) index_definition.pl < $^ > $@

# create destroyer (for testing only!)
destroyer@EXEEXT@: $(DESTROYER_OBJECTS) 

# show chunks program
showchunks@EXEEXT@: showchunks.o

# ----------------------------------------------------------------------------

# run server
.PHONY: rundev rundev_ssl runserver runserver_ssl
run runserver: bar
	$(INSTALL) -d jobs
	nice ./bar \
          --daemon -D \
          --index-database=bar-index.db \
          --server-jobs-directory=jobs

run_ssl runserver_ssl: bar ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar \
          --daemon -D \
          --index-database=bar-index.db \
          --server-jobs-directory=jobs \
          --server-ca-file=../bar-ca.pem \
          --server-cert-file=../bar-server-cert.pem \
          --server-key-file=../bar-server-key.pem

.PHONY: rundev rundev_ssl runserver runserver_ssl
rundev: bar
	$(INSTALL) -d jobs
	nice ./bar \
          --daemon -D \
          --index-database=bar-index.db \
          --server-jobs-directory=jobs \
          --server-port=39909 \
          --server-tls-port=39910

rundev_ssl: bar ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar \
          --daemon -D \
          --index-database=bar-index.db \
          --server-jobs-directory=jobs \
          --server-ca-file=../bar-ca.pem \
          --server-cert-file=../bar-server-cert.pem \
          --server-key-file=../bar-server-key.pem \
          --server-port=39909 \
          --server-tls-port=39910

../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem:
	$(MAKE) -C .. keys

# ----------------------------------------------------------------------------

# do tests
#
# Tests:
#   create, list, test, compare, extract
#   with compression defined in COMPRESS_NAMES
#   with encryption defined in CRYPT_NAMES
#   asymmetric crypt
#   splitting
#   everything together
#   parameters and errors
#   images
#   dvd
#
# For image tests some sudo-commands are required:
#  sudo losetup <loop device> <file>
#  sudo losetup -d <loop device>
#  sudo chmod o+rw <loop device>
#  sudo mkfs <options> <loop device>
#  sudo mount <loop device> test/dev
#  sudo umount <loop device>
#  sudo cp test/data test/dev
#  sudo dd <loop device> <file>
#  sudo diff -r <mount point> <mount point>

# different test files
TEST_FILES = \
  test/data/zero1024.dat \
  test/data/zero512k.dat \
  test/data/random1024.dat \
  test/data/random512k.dat \
  test/data/zero.dat \
  test/data/readonly.dat \
  test/data/readonly512k.dat \
  test/data/unreadable.dat \
  test/data/smallfile.dat \
  test/data/sub-dir \
  test/data/sub-ignore-dir \
  test/data/linkdata.dat \
  test/data/link.dat \
  test/data/link-not-existing-file.dat \
  test/data/circular-link.dat.marker \
  test/data/hardlinkdata.dat \
  test/data/hardlink.dat \
  test/data/file400.dat \
  test/data/file640.dat \
  test/data/file644.dat \
  test/data/file664.dat \
  test/data/file666.dat \
  test/data/nodump.dat \
  test/data/fifo \
  test/data/data\'.dat \
  test/data/data\".dat \
  test/data/delta1/test.dat \
  test/data/delta2/test.dat \

# temporary test files
TEST_FILES_CLEAN = \
  test/*.bar \
  test/*.bar_destroyed \
  test/*.bid \
  test/new \
  test/restore \
  test/*.image

# test bar exeuctable
TEST_BAR = ./bar@EXEEXT@
TEST_DESTROYER = ./destroyer@EXEEXT@

# test keys
TEST_KEYS = test/key.public \
            test/key.private

.PHONY: test clean_test
.PHONY: test1 test2 test3 test4 test5 test6 test7 test_combined
.PHONY: test_basic test_compress test_crypt test_asymmetric_crypt test_split test_image test_dvd test_parameters
test:
	@$(MAKE) QUIET=1 --no-print-directory -s test_basic test_compress test_crypt test_asymmetric_crypt test_split test_image test_combined test_parameters

clean_test:
	$(RMRF) $(TEST_FILES_CLEAN)

test_win: $(TEST_BAR)
	$(TEST_BAR) -o -c c:\\tmp\\x.bar -# c:\\users\\torsten
	$(TEST_BAR) -L c:\\tmp\\x.bar 

test1 test_basic: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 1: basic..."
	@$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="--compress-algorithm=none --crypt-algorithm=none" \
          test_file_operations
	@$(ECHO) "ok"

test2 test_compress: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 2: compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=none" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi \
        done
	@$(ECHO) "ok"

test_delta_compress: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 2: delta compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=none" \
            test_file_operations_delta \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi \
        done
	@$(ECHO) "ok"

test3 test_crypt: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 3: crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="--compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD)" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi \
        done
	@$(ECHO) "ok"

test4 test_asymmetric_crypt: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 4: asymmetric crypt..."
	@$(RMF) test/key.*; $(MAKE) $(TEST_KEYS)
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="--compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) --crypt-type=asymmetric --crypt-public-key=$(PWD)/test/key.public --crypt-private-key=$(PWD)/test/key.private" \
            test_file_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi \
        done
	@$(ECHO) "ok"

test5 test_split: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 5: split..."
	$(MAKE) \
          BAR_FILE="test-###" \
          BAR_PATTERN="test-*" \
          BAR_OPTIONS="--archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none" \
          test_file_operations
	@$(ECHO) "ok"

test6 test_image: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 6: image..."
	for compress in none zip9; do \
          $(MAKE) \
            BAR_FILE="test" \
            BAR_PATTERN="test" \
            BAR_OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=none" \
            test_image_operations \
            ; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi \
        done
	@$(ECHO) "ok"

test7 test_dvd: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test 7: dvd..."
	$(MAKE) \
          BAR_FILE="test" \
          BAR_PATTERN="test" \
          BAR_OPTIONS="--compress-algorithm=none --crypt-algorithm=none" \
          test_dvd_operations \
          ;
	@$(ECHO) "ok"

test_combined: $(TEST_BAR)
	@$(ECHO_NO_LF) "Test combined..."
	@$(RMF) test/key.*; $(MAKE) $(TEST_KEYS)
	for compress in $(TEST_COMBINED_COMPRESS_NAMES); do \
          for crypt in $(TEST_COMBINED_CRYPT_NAMES); do \
            $(MAKE) \
              BAR_FILE=test-### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) --crypt-type=asymmetric --crypt-public-key=$(PWD)/test/key.public --crypt-private-key=$(PWD)/test/key.private --archive-part-size=100K" \
              test_file_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
            $(MAKE) \
              BAR_FILE=test-### \
              BAR_PATTERN="test-*" \
              BAR_OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) --crypt-type=asymmetric --crypt-public-key=$(PWD)/test/key.public --crypt-private-key=$(PWD)/test/key.private --archive-part-size=10M" \
              test_image_operations \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit $$rc; \
            fi; \
          done; \
          rc=$$?; \
          if test $$rc -ne 0; then \
            exit $$rc; \
          fi \
        done; \
        rc=$$?; \
        if test $$rc -ne 0; then \
          exit $$rc; \
        fi
	@$(ECHO) "ok"

# helper function to check valid exitcode
# call functionTestCheckExitcode,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $2 2>/dev/null; if test $$? -gt $1; then false; fi

test_parameters: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@$(ECHO_NO_LF) "Test parameters..."
	@$(RMRF) $(TEST_FILES_CLEAN)
	@$(ECHO) "# test config" > test/test.cfg
	#
	# help
	$(call functionTestCheckExitcode,1,SSH_ASKPASS= $(TEST_BAR) -h 1>/dev/null $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,1,SSH_ASKPASS= $(TEST_BAR) --help 1>/dev/null $(if $(QUIET),1>/dev/null))
	#
	# different options
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -c test/test.bar test/data --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -g $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -H $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -L $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -g -H -L $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -# '*rand*' -! '*512*' $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -g -# '*rand*' -! '*512*' $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -H -# '*rand*' -! '*512*' $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -L -# '*rand*' -! '*512*' $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar -g -H -L -# '*rand*' -! '*512*' $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) --config=test/test.cfg -l test/test*.bar $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,0,SSH_ASKPASS= $(TEST_BAR) -c test/test.bar test/data --overwrite-archive-files --verbose=2 --dry-run $(if $(QUIET),1>/dev/null))
	#
	# wrong options
	$(call functionTestCheckExitcode,5,SSH_ASKPASS= $(TEST_BAR) --not-existing-option  $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,5,SSH_ASKPASS= $(TEST_BAR) -c test/test.bar test/data --compress-algorithm=not-existing-compress  $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,5,SSH_ASKPASS= $(TEST_BAR) -c test/test.bar test/data --crypt-algorithm=not-existing-compress $(if $(QUIET),1>/dev/null))
ifeq (@HAVE_XDELTA@,1)
	$(call functionTestCheckExitcode,1,SSH_ASKPASS= $(TEST_BAR) -c test/test.bar test/data --delta-source=does-not-exists --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files $(if $(QUIET),1>/dev/null))
endif
	$(call functionTestCheckExitcode,6,SSH_ASKPASS= $(TEST_BAR) --config=test/test-not-exists.cfg -l test/test*.bar $(if $(QUIET),1>/dev/null))
	#
	# test not implemented functions
	$(call functionTestCheckExitcode,127,SSH_ASKPASS= $(TEST_BAR) device://test/test.bar $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,127,SSH_ASKPASS= $(TEST_BAR) -t device://test/test.bar $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,127,SSH_ASKPASS= $(TEST_BAR) -d device://test/test.bar $(if $(QUIET),1>/dev/null))
	$(call functionTestCheckExitcode,127,SSH_ASKPASS= $(TEST_BAR) -x device://test/test.bar $(if $(QUIET),1>/dev/null))
	#
	@$(RMF) test/test.cfg
	@$(ECHO) "ok"

.PHONY: test_file_operations
test_file_operations: \
  test_file_operations_base \
  test_file_operations_delta \
  test_file_operations_incremental \
  test_file_operations_differential \
  test_file_operations_destroyed

test/data/zero1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1 count=1024 2>/dev/null
test/data/zero512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1k count=512 2>/dev/null
test/data/random1024.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=1024 2>/dev/null
test/data/random512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null
test/data/zero.dat:
	$(INSTALL) -d $(@D)
	$(RMF) $0; touch $@
test/data/readonly.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World > $@; $(CHMOD) 440 $@
test/data/readonly512k.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=512 2>/dev/null; $(CHMOD) 440 $@
test/data/unreadable.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World > $@; $(CHMOD) 000 $@
test/data/smallfile.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1 count=128 2>/dev/null
test/data/sub-dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World > $@/test.dat
test/data/sub-ignore-dir:
	$(INSTALL) -d $(@D)
	$(RMRF) $@; $(INSTALL) -d $@; $(ECHO) Hello World > $@/test.dat
	touch $@/.nobackup
test/data/linkdata.dat test/data/link.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=test/data/linkdata.dat bs=1 count=1024 2>/dev/null
	($(CD) test/data; $(RMF) link.dat; $(LN) -s linkdata.dat link.dat)
test/data/link-not-existing-file.dat:
	$(INSTALL) -d $(@D)
	($(CD) test/data; $(RMF) link-not-existing-file.dat; $(LN) -s not-existing-file link-not-existing-file.dat)
test/data/circular-link.dat.marker:
	$(INSTALL) -d $(@D)
	($(CD) test/data; $(LN) -s circular-link.dat circular-link.dat)
	touch $@
test/data/hardlinkdata.dat test/data/hardlink.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=test/data/hardlinkdata.dat bs=1 count=1024 2>/dev/null
	($(CD) test/data; $(RMF) hardlink.dat; $(LN) hardlinkdata.dat hardlink.dat)
test/data/file400.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 400 $@
test/data/file640.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 640 $@
test/data/file644.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 644 $@
test/data/file664.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 664 $@
test/data/file666.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 666 $@
test/data/nodump.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1k count=1 2>/dev/null; $(CHMOD) 440 $@; $(CHATTR) +d $@
test/data/fifo:
	$(INSTALL) -d $(@D)
	($(CD) test/data; $(MKFIFO) fifo)
test/data/data\'.dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World > $@
test/data/data\".dat:
	$(INSTALL) -d $(@D)
	$(ECHO) Hello World > $@
test/data/delta1/test.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1k count=512 2>/dev/null; \
        ) > $@
test/data/delta2/test.dat: test/data/delta1/test.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=test/data/delta1/test.dat skip=0 bs=1k count=255 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1k count=1 2>/dev/null; \
          $(DD) if=test/data/delta1/test.dat skip=256 bs=1k count=256 2>/dev/null; \
        ) > $@

test/key.public test/key.private:
	$(INSTALL) -d test
	$(ECHO_NO_LF) -e "$(TEST_PASSWORD)\n$(TEST_PASSWORD)\n" | SSH_ASKPASS= ./bar --generate-keys test/key

# helper function to check if parameter exists
# call functionVerifyParameter,<name>
functionVerifyParameter = \
  if test -z "$($1)"; then \
    $(ECHO) >&2 "ERROR: parameter '$1' not set"; \
    exit 1; \
  fi

.PHONY: test_file_operations_base test_file_operations_delta test_file_operations_incremental test_file_operations_differential
test_file_operations_base: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# normal tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	SSH_ASKPASS= $(TEST_BAR) -c test/$(BAR_FILE).bar test/data $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -l test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.dat -x link-not-existing-file.dat -x circular-link.dat -x circular-link.dat.marker -x fifo -x sub-ignore-dir -x nodump.dat test/data test/restore/test/data
	$(READLINK) test/restore/test/data/link.dat 2>/dev/null $(if $(QUIET),1>/dev/null)
	test `$(STAT) --format "%a" test/restore/test/data/file400.dat 2>/dev/null` = "400" $(if $(QUIET),1>/dev/null)
	test `$(STAT) --format "%a" test/restore/test/data/file640.dat 2>/dev/null` = "640" $(if $(QUIET),1>/dev/null)
	test `$(STAT) --format "%a" test/restore/test/data/file644.dat 2>/dev/null` = "644" $(if $(QUIET),1>/dev/null)
	test `$(STAT) --format "%a" test/restore/test/data/file664.dat 2>/dev/null` = "664" $(if $(QUIET),1>/dev/null)
	test `$(STAT) --format "%a" test/restore/test/data/file666.dat 2>/dev/null` = "666" $(if $(QUIET),1>/dev/null)
	test `$(STAT) --format "%h" test/restore/test/data/hardlink.dat 2>/dev/null` -eq 2 $(if $(QUIET),1>/dev/null)

test_file_operations_delta: \
  $(TEST_BAR) \
  $(TEST_FILES)
ifeq (@HAVE_XDELTA@,1)
	# delta tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	($(CD) test/data/delta1; SSH_ASKPASS= ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-A.bar test.dat $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null))
	#
	$(RMF) test/$(BAR_PATTERN)-B.bar
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar test.dat --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null))
	SSH_ASKPASS= $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null))
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),1>/dev/null))
	$(DIFF) test/data/delta2/test.dat test/restore/test.dat
	#
	$(RMF) test/$(BAR_PATTERN)-B.bar
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --compress-algorithm=xdelta9+zip9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null))
	SSH_ASKPASS= $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null))
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),1>/dev/null))
	$(DIFF) test/data/delta2/test.dat test/restore/test.dat
	#
ifeq (@HAVE_BZ2@,1)
	$(RMF) test/$(BAR_PATTERN)-B.bar
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --compress-algorithm=xdelta9+bzip2 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null))
	SSH_ASKPASS= $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null))
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),1>/dev/null))
	$(DIFF) test/data/delta2/test.dat test/restore/test.dat
endif
	#
ifeq (@HAVE_LZMA@,1)
	$(RMF) test/$(BAR_PATTERN)-B.bar
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -c ../../$(BAR_FILE)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' test.dat $(BAR_OPTIONS) --compress-algorithm=xdelta9+lzma9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null))
	SSH_ASKPASS= $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -d ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null))
	($(CD) test/data/delta2; SSH_ASKPASS= ../../../$(TEST_BAR) -x ../../$(BAR_PATTERN)-B.bar --delta-source='../../$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --destination ../../restore $(if $(QUIET),1>/dev/null))
	$(DIFF) test/data/delta2/test.dat test/restore/test.dat
endif
endif

test_file_operations_incremental: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# incremental tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	SSH_ASKPASS= $(TEST_BAR) -c test/$(BAR_FILE)-full.bar --full --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	$(INSTALL) -d test/new; $(CP) test/data/random1024.dat test/new/random1024-new.dat
	SSH_ASKPASS= $(TEST_BAR) -c test/$(BAR_FILE)-incremental.bar --incremental --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination test/restore $(if $(QUIET),1>/dev/null)

test_file_operations_differential: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# differential tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	SSH_ASKPASS= $(TEST_BAR) -c test/$(BAR_FILE)-full.bar --full --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	$(INSTALL) -d test/new; $(CP) test/data/random1024.dat test/new/random1024-new.dat
	SSH_ASKPASS= $(TEST_BAR) -c test/$(BAR_FILE)-differential.bar --differential --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination test/restore $(if $(QUIET),1>/dev/null)

.PHONY: test_file_operations_destroyed
test_file_operations_destroyed: \
  $(TEST_BAR) \
  $(TEST_DESTROYER) \
  $(TEST_FILES)
	# tests which must cause errors
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	#
	$(RMRF) $(TEST_FILES_CLEAN)
	SSH_ASKPASS= $(TEST_BAR) -c test/$(BAR_FILE).bar test/data $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:16:FIL0 > $${fileName}_destroyed; done
	! `SSH_ASKPASS= $(TEST_BAR) -t test/test*.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null` $(if $(QUIET),1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:20:XXXX > $${fileName}_destroyed; done
	! `SSH_ASKPASS= $(TEST_BAR) -t test/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null` $(if $(QUIET),1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName m:32:XXXX > $${fileName}_destroyed; done
	! `SSH_ASKPASS= $(TEST_BAR) -t test/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null` $(if $(QUIET),1>/dev/null)
	$(LS) test/*.bar|while read fileName; do $(TEST_DESTROYER) $$fileName d:1000:10 > $${fileName}_destroyed; done
	! `SSH_ASKPASS= $(TEST_BAR) -t test/test.bar_destroyed $(BAR_OPTIONS) </dev/null 1>/dev/null 2>/dev/null` $(if $(QUIET),1>/dev/null)

# helper function to create test file with data
# call functionTestFileCreate,<data device>,<file>,<size>
functionTestFileCreate = \
  ( \
    $(DD) if=$1 of=$2 bs=$3 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  )

# helper function to create a test device
# call functionTestDeviceReset
functionTestDeviceReset = \
  @( \
    $(ECHO) $(SUDO) $(UMOUNT) test/dev0; \
    $(SUDO) $(UMOUNT) test/dev0 2>/dev/null; \
    $(ECHO) $(SUDO) $(UMOUNT) test/dev1; \
    $(SUDO) $(UMOUNT) test/dev1 2>/dev/null; \
    $(ECHO) $(SUDO) $(LOSETUP) -d $(LOOP0); \
    $(SUDO) $(LOSETUP) -d $(LOOP0) 2>/dev/null; \
    $(ECHO) $(SUDO) $(LOSETUP) -d $(LOOP1); \
    $(SUDO) $(LOSETUP) -d $(LOOP1) 2>/dev/null; \
    true; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileZero,<file>,<size>
functionCreateFileZero = \
  @( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 bs=$2 count=1; \
    $(DD) if=$(DEVICE_ZERO) of=$1 bs=$2 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to create huge spare test file
# call functionCreateFileSpare,<file>,<size>
functionCreateFileSpare = \
  @( \
    $(ECHO) $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1; \
    $(DD) if=$(DEVICE_ZERO) of=$1 seek=$2 bs=1 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to create test file with data
# call functionCreateFileRandom,<file>,<size>
functionCreateFileRandom = \
  @( \
    $(ECHO) $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$2 count=1; \
    $(DD) if=$(DEVICE_RANDOM) of=$1 bs=$2 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionTestDeviceCreate,<loop device>,<image file>,<mount point>
functionTestDeviceCreate = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) $1 $2; \
    $(SUDO) $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(CHMOD) o+rw $1; \
    $(SUDO) $(CHMOD) o+rw $1; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to delete a test device
# call functionTestDeviceDelete,<loop device>,<mount point>
functionTestDeviceDelete = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) -d $1; \
    $(SLEEP) 5; \
    $(SUDO) $(LOSETUP) -d $1; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to initialize file system on a test device
# call functionInitFilesystem,<image file>,<mkfs options>[,<files>]
functionInitFilesystem = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) $(LOOP0) $1; \
    $(SUDO) $(LOSETUP) $(LOOP0) $1; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(CHMOD) o+rw $(LOOP0); \
    $(SUDO) $(CHMOD) o+rw $(LOOP0); \
    $(ECHO) $(SUDO) $(MKFS) $2 $(LOOP0); \
    $(SUDO) $(MKFS) $2 $(LOOP0) 1>/dev/null 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(if $3,$(ECHO) $(INSTALL) -d test/dev0; \
            $(INSTALL) -d test/dev0; \
            $(ECHO) $(SUDO) $(MOUNT) $(LOOP0) test/dev0; \
            $(SUDO) $(MOUNT) $(LOOP0) test/dev0; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
            $(ECHO) $(SUDO) $(CP) -r -p $3 test/dev0; \
            $(SUDO) $(CP) -r -p $3 test/dev0 1>/dev/null 2>/dev/null; \
            $(SLEEP) 5; \
            $(ECHO) $(SUDO) $(UMOUNT) test/dev0; \
            $(SUDO) $(UMOUNT) test/dev0; \
    ) \
    $(ECHO) $(SUDO) $(LOSETUP) -d $(LOOP0); \
    $(SLEEP) 5; \
    $(SUDO) $(LOSETUP) -d $(LOOP0); \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionDeviceMount,<loop device>,<image file>,<mount point>
functionDeviceMount = \
  @( \
    $(ECHO) $(SUDO) $(LOSETUP) $1 $2; \
    $(SUDO) $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(CHMOD) o+rw $1; \
    $(SUDO) $(CHMOD) o+rw $1; \
    $(ECHO) $(INSTALL) -d $3; \
    $(INSTALL) -d $3; \
    $(ECHO) $(SUDO) $(MOUNT) $1 $3; \
    $(SUDO) $(MOUNT) $1 $3; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to create a test device
# call functionDeviceUmount,<loop device>,<mount point>
functionDeviceUmount = \
  @( \
    $(ECHO) $(SUDO) $(UMOUNT) $2; \
    $(SUDO) $(UMOUNT) $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(ECHO) $(SUDO) $(LOSETUP) -d $1; \
    $(SLEEP) 5; \
    $(SUDO) $(LOSETUP) -d $1; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

# helper function to dump content of device to file
# call functionTestDeviceDump,<loop device>,<file>
functionTestDeviceDump = \
  @( \
    $(ECHO) $(SUDO) $(DD) if=$1 of=- \> $2; \
    ($(SUDO) $(DD) if=$1 of=-) > $2 2>/dev/null; \
  ) $(if $(QUIET),1>/dev/null 2>/dev/null)

.PHONY: test_image_operations
test_image_operations: \
  test_image_operations_raw \
  test_image_operations_ext \
  test_image_operations_fat \
  test_image_operations_reiser

.PHONY: test_image_operations_raw
test_image_operations_raw:
	# --------------------------------------------------------------
	# raw
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	@
	# raw zero-data
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_base
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# raw random-data, delta image
	$(call functionCreateFileRandom,test/dev0a.dat,32M)
	$(call functionCreateFileRandom,test/dev0b.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat

.PHONY: test_image_ext test_image_ext2 test_image_ext3 test_image_ext4
test_image_operations_ext: \
  test_image_operations_ext2 \
  test_image_operations_ext3 \
  test_image_operations_ext4 

# Ext2
test_image_operations_ext2:
ifneq (@MKFS_EXT2@,)
	# --------------------------------------------------------------
	# ext2
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	@
	# ext2 zero-data, default block size
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, default block size
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 1024 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 1024 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 1024 bytes, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 2048 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 2048 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 2048 bytes, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext2 zero-data, block size 4096 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext2 random-data, block size 4096 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext2 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext2 random-data, block size 4096 bytes, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext2 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext2 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Ext3
test_image_operations_ext3:
ifneq (@MKFS_EXT3@,)
	# --------------------------------------------------------------
	# ext3
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# ext3 zero-data, default block size
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, default block size
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 1024 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 1024 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 2048 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 2048 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext3 zero-data, block size 4096 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext3 random-data, block size 4096 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext3 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext3 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext3 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext3 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Ext4
test_image_operations_ext4:
ifneq (@MKFS_EXT4@,)
	# --------------------------------------------------------------
	# ext4
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# ext4 zero-data, default block size
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, default block size
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 1024 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 1024 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 1024,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 2048 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 2048 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 2048,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
	@
	@# ---
	@
	# ext4 zero-data, block size 4096 bytes
	$(call functionCreateFileZero,test/dev0.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ext4 random-data, block size 4096 bytes
	$(call functionCreateFileRandom,test/dev0.dat,32M)
	$(call functionCreateFileRandom,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	#$(call functionCreateSpare,test/dev0.dat,512G)
	#$(call functionCreateSpare,test/dev1.dat,512G)
	#$(call functionInitFilesystem,test/dev0.dat,-t ext4 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	#$(MAKE) test_image_operations_base \
        #   DEVICE0=$(LOOP0) DEVICE1=$(LOOP1)
	#$(call functionTestDeviceDelete,$(LOOP1),test/dev1)
	#$(call functionTestDeviceDelete,$(LOOP0),test/dev0)
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ext4 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t ext4 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t ext4 -b 4096,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

.PHONY: test_image_fat test_image_fat12 test_image_fat16 test_image_fat32
test_image_operations_fat: \
  test_image_operations_fat12 \
  test_image_operations_fat16 \
  test_image_operations_fat32

# FAT 12
test_image_operations_fat12:
ifneq (@MKFS_MSDOS@,)
	# --------------------------------------------------------------
	# FAT12
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# FAT12 zero-data
	$(call functionCreateFileZero,test/dev0.dat,1440K)
	$(call functionCreateFileZero,test/dev1.dat,1440K)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 12,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT12 random-data
	$(call functionCreateFileRandom,test/dev0.dat,1440K)
	$(call functionCreateFileRandom,test/dev1.dat,1440K)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 12,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT12 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 12,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 12,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# FAT 16
test_image_operations_fat16:
ifneq (@MKFS_MSDOS@,)
	# --------------------------------------------------------------
	# FAT16
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# FAT16 zero-data
	$(call functionCreateFileZero,test/dev0.dat,20M)
	$(call functionCreateFileZero,test/dev1.dat,20M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 16,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT16 random-data
	$(call functionCreateFileRandom,test/dev0.dat,20M)
	$(call functionCreateFileRandom,test/dev1.dat,20M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 16,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT16 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 16,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 16,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# FAT 32
test_image_operations_fat32:
ifneq (@MKFS_MSDOS@,)
	# --------------------------------------------------------------
	# FAT32
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# FAT32 zero-data
	$(call functionCreateFileZero,test/dev0.dat,40M)
	$(call functionCreateFileZero,test/dev1.dat,40M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 32,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# FAT32 random-data
	$(call functionCreateFileRandom,test/dev0.dat,40M)
	$(call functionCreateFileRandom,test/dev1.dat,40M)
	$(call functionInitFilesystem,test/dev0.dat,-t msdos -F 32,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# FAT32 random-data, default block size, delta image
	$(call functionCreateFileZero,test/dev0a.dat,32M)
	$(call functionCreateFileZero,test/dev0b.dat,32M)
	$(call functionCreateFileZero,test/dev1.dat,32M)
	$(call functionInitFilesystem,test/dev0a.dat,-t msdos -F 32,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t msdos -F 32,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

.PHONY: test_image_reiser test_image_reiserfs1 test_image_reiserfs2 test_image_reiserfs3 test_image_reiser4
test_image_operations_reiser: \
  test_image_operations_reiserfs1 \
  test_image_operations_reiserfs2 \
  test_image_operations_reiserfs3 \
  test_image_operations_reiser4

test_image_operations_reiserfs1:
ifneq (@MKFS_REISERFS@,)
endif

test_image_operations_reiserfs2:
ifneq (@MKFS_REISERFS@,)
endif

# ReiserFS version 3 (Note: Linux only support block size 4096)
test_image_operations_reiserfs3:
ifneq (@MKFS_REISERFS@,)
	# --------------------------------------------------------------
	# ReiserFS 3
	$(INSTALL) -d test
	$(call functionTestDeviceReset)
	#
	# ReiserFS 3 zero-data
	$(call functionCreateFileZero,test/dev0.dat,64M)
	$(call functionCreateFileZero,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.5,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 random-data
	$(call functionCreateFileRandom,test/dev0.dat,64M)
	$(call functionCreateFileRandom,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.5,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 zero-data
	$(call functionCreateFileZero,test/dev0.dat,64M)
	$(call functionCreateFileZero,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.6,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check \
          test_image_operations_diff_image
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	#
	# ReiserFS 3 random-data
	$(call functionCreateFileRandom,test/dev0.dat,64M)
	$(call functionCreateFileRandom,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0.dat,-t reiserfs -b 4096 -q --format 3.6,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0=test/dev0.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          FSCK_OPTIONS="-n -y" \
          test_image_operations_base \
          test_image_operations_check
	$(RMF) test/dev1.dat
	$(RMF) test/dev0.dat
	@
	# ReiserFS 3 random-data, delta image
	$(call functionCreateFileZero,test/dev0a.dat,64M)
	$(call functionCreateFileZero,test/dev0b.dat,64M)
	$(call functionCreateFileZero,test/dev1.dat,64M)
	$(call functionInitFilesystem,test/dev0a.dat,-t reiserfs -b 4096 -q --format 3.6,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(call functionInitFilesystem,test/dev0b.dat,-t reiserfs -b 4096 -q --format 3.6,test/data/random* test/data/zero*.dat test/data/readonly*.dat test/data/file*.dat)
	$(MAKE) \
          IMAGE0_A=test/dev0a.dat IMAGE0_B=test/dev0b.dat IMAGE1=test/dev1.dat \
          DEVICE0=$(LOOP0) DEVICE1=$(LOOP1) \
          BAR_FILE="$(if $(BAR_FILE),$(BAR_FILE),test)" \
          BAR_PATTERN="$(if $(BAR_PATTERN),$(BAR_PATTERN),test)" \
          BAR_OPTIONS="$(if $(BAR_OPTIONS),$(BAR_OPTIONS) --raw-images,--compress-algorithm=none --crypt-algorithm=none --raw-images)" \
          test_image_operations_delta
	$(RMF) test/dev1.dat
	$(RMF) test/dev0b.dat
	$(RMF) test/dev0a.dat
endif

# Reiser4 (Note: not supported anymore)
test_image_operations_reiser4:
ifneq (@MKFS_REISER4@,)
endif

.PHONY: test_image_operations_base test_image_operations_check test_image_operations_diff_image
test_image_operations_base: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# normal tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0),test/dev0)
	SSH_ASKPASS= $(TEST_BAR) -m test/$(BAR_FILE).bar $(DEVICE0) $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -t test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -d test/test*.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	SSH_ASKPASS= $(TEST_BAR) -x test/test*.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	#

test_image_operations_delta: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# delta tests
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0_A)
	@$(call functionVerifyParameter,IMAGE0_B)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@$(call functionVerifyParameter,BAR_FILE)
	@$(call functionVerifyParameter,BAR_PATTERN)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A),test/dev0)
	SSH_ASKPASS= $(TEST_BAR) -m test/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
ifeq (@HAVE_XDELTA@,1)
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B),test/dev0)
	SSH_ASKPASS= $(TEST_BAR) -m test/$(BAR_FILE)-B.bar $(DEVICE0) --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -d test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
endif
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	SSH_ASKPASS= $(TEST_BAR) -x test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	@
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_A),test/dev0)
	SSH_ASKPASS= $(TEST_BAR) -m test/$(BAR_FILE)-A.bar $(DEVICE0) $(BAR_OPTIONS) --compress-algorithm=zip9 --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
ifeq (@HAVE_XDELTA@,1)
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0_B),test/dev0)
	SSH_ASKPASS= $(TEST_BAR) -m test/$(BAR_FILE)-B.bar $(DEVICE0) --delta-source='test/$(BAR_PATTERN)-A.bar' $(BAR_OPTIONS) --compress-algorithm=xdelta9+zip9 --force-delta-compression --overwrite-archive-files --verbose=2 $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -t test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= $(TEST_BAR) -d test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
endif
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	SSH_ASKPASS= $(TEST_BAR) -x test/$(BAR_PATTERN)-B.bar $(BAR_OPTIONS) --destination $(DEVICE1) $(if $(QUIET),1>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	#

test_image_operations_check:
	# check file systems and compare file content
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@
	@# ---
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0),test/dev0)
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE0) $(if $(QUIET),1>/dev/null 2>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	$(FSCK) $(if $(FSCK_OPTIONS),$(FSCK_OPTIONS),-n) $(DEVICE1) $(if $(QUIET),1>/dev/null 2>/dev/null)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	@
	$(call functionDeviceMount,$(DEVICE0),$(IMAGE0),test/dev0)
	$(call functionDeviceMount,$(DEVICE1),$(IMAGE1),test/dev1)
	$(SUDO) $(DIFF) -r test/dev0 test/dev1 $(if $(QUIET),1>/dev/null)
	$(SLEEP) 5
	$(call functionDeviceUmount,$(DEVICE0),test/dev0)
	$(call functionDeviceUmount,$(DEVICE1),test/dev1)
	#

test_image_operations_diff_image:
	# compare devices
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,IMAGE0)
	@$(call functionVerifyParameter,IMAGE1)
	@$(call functionVerifyParameter,DEVICE0)
	@$(call functionVerifyParameter,DEVICE1)
	@
	@# ---
	$(call functionTestDeviceCreate,$(DEVICE0),$(IMAGE0),test/dev0)
	$(call functionTestDeviceDump,$(DEVICE0),test/dev0.dump)
	$(call functionTestDeviceDelete,$(DEVICE0),test/dev0)
	@
	$(call functionTestDeviceCreate,$(DEVICE1),$(IMAGE1),test/dev1)
	$(call functionTestDeviceDump,$(DEVICE1),test/dev1.dump)
	$(call functionTestDeviceDelete,$(DEVICE1),test/dev1)
	@
	$(DIFF) test/dev0.dump test/dev1.dump
	#

.PHONY: test_dvd_operations
test_dvd_operations: \
  $(TEST_BAR) \
  $(TEST_FILES)
	# create DVD
	@$(call functionVerifyParameter,TEST_BAR)
	@$(call functionVerifyParameter,BAR_FILE)
	@
	@# ---
	$(RMRF) $(TEST_FILES_CLEAN)
	$(SLEEP) 30
	SSH_ASKPASS= $(TEST_BAR) -c dvd://$(BAR_FILE).bar test/data $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) $(if $(QUIET),1>/dev/null)
	$(SLEEP) 30
	SSH_ASKPASS= $(TEST_BAR) -c dvd://$(BAR_FILE).bar test/data $(if $(BAR_OPTIONS),$(BAR_OPTIONS),--compress-algorithm=none --crypt-algorithm=none) --ecc $(if $(QUIET),1>/dev/null)
	#

# ----------------------------------------------------------------------------

# valgrind checks
.PHONY: memcheck
memcheck: \
  $(TEST_BAR) \
  $(TEST_FILES)
	@$(RMF) test/key.*; $(MAKE) test/key.public test/key.private
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=summary" \
          $(if $(CHECK),\
            memcheck$(CHECK),\
            memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 \
           )

.PHONY: memcheck_extended
memcheck_extended: \
  $(TEST_BAR) \
  $(TEST_FILES)
	$(MAKE) \
          VALGRIND_OPTIONS="--leak-check=full" \
            $(if $(CHECK),\
              memcheck$(CHECK),\
              memcheck1 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7 \
             )

.PHONY: memcheck1 memcheck2 memcheck2a memcheck2b memcheck2c memcheck2d memcheck2e memcheck3 memcheck4 memcheck5 memcheck6 memcheck7
memcheck1: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar --help > /dev/null
memcheck2: \
  memcheck2a \
  memcheck2b \
  memcheck2c \
  memcheck2d \
  memcheck2e
memcheck2a: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test.bar test/data $(BAR_OPTIONS) --overwrite-archive-files > /dev/null
memcheck2b: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test.bar test/data $(BAR_OPTIONS) --compress-algorithm=bzip9 --overwrite-archive-files > /dev/null
memcheck2c: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test.bar test/data $(BAR_OPTIONS) --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD) --overwrite-archive-files > /dev/null
memcheck2d: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test.bar test/data $(BAR_OPTIONS) --compress-algorithm=none --crypt-algorithm=AES256 --crypt-password=$(TEST_PASSWORD) --crypt-type=asymmetric --crypt-public-key=$(PWD)/test/key.public --crypt-private-key=$(PWD)/test/key.private --overwrite-archive-files > /dev/null
memcheck2e: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test-###.bar test/data $(BAR_OPTIONS) --archive-part-size=100000 --overwrite-archive-files > /dev/null
memcheck2f: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test.bar test/data $(BAR_OPTIONS) --overwrite-archive-files --dry-run > /dev/null
memcheck3: bar
	./bar -c test/test.bar test/data $(BAR_OPTIONS) --overwrite-archive-files > /dev/null
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -l test/test*.bar $(BAR_OPTIONS) > /dev/null
memcheck4: \
  $(TEST_BAR) \
  $(TEST_FILES)
	./bar -c test/test.bar test/data $(BAR_OPTIONS) --overwrite-archive-files > /dev/null
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -t test/test*.bar $(BAR_OPTIONS) > /dev/null
memcheck5: \
  $(TEST_BAR) \
  $(TEST_FILES)
	./bar -c test/test.bar test/data $(BAR_OPTIONS) --overwrite-archive-files > /dev/null
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -d test/test*.bar $(BAR_OPTIONS) > /dev/null
memcheck6: \
  $(TEST_BAR) \
  $(TEST_FILES)
	./bar -c test/test.bar test/data $(BAR_OPTIONS) --overwrite-archive-files > /dev/null
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -x test/test*.bar $(BAR_OPTIONS) --destination test/restore > /dev/null
memcheck7: \
  $(TEST_BAR) \
  $(TEST_FILES)
	valgrind \
          --log-file=valgrind.log \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar \
            --daemon \
            --no-detach \
            --server-jobs-directory jobs \
            --server-ca-file=bar-ca.pem \
            --server-cert-file=bar-server-cert.pem \
            --server-key-file=bar-server-key.pem \
            --server-port=39909 \
            --server-tls-port=39910 \
            --server-debug &
	$(SLEEP) 30
	$(ECHO) 'VERSION' | $(NETCAT) localhost 39909
	$(ECHO) '1 JOB_LIST' | $(NETCAT) localhost 39909
	$(ECHO) '1 DEVICE_LIST' | $(NETCAT) localhost 39909
	$(ECHO) '1 FILE_LIST /tmp'| $(NETCAT) localhost 39909
	$(ECHO) '1 PASSWORDS_CLEAR' | $(NETCAT) localhost 39909
	$(ECHO) '1 INDEX_STORAGE_LIST 10 * x'| $(NETCAT) localhost 39909
	$(ECHO) 'QUIT' | $(NETCAT) localhost 39909

#valgrind --tool=cachegrind ./bar -c test2.bar -o -z xdelta9 --delta-source=test1.bar bar

# ----------------------------------------------------------------------------

# different performance files
PERFORMANCE_FILES = \
  test/data/zero100M.dat \
  test/data/random100M.dat \
  test/data/delta1/test100M.dat \
  test/data/delta2/test100M.dat \

# temporary performance files
PERFORMANCE_FILES_CLEAN = \
  test/*.bar \
  test/new \
  test/restore \
  test/*.image

# test bar exeuctable
PERFORMANCE_BAR = ./bar@EXEEXT@

test/data/zero100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_ZERO) of=$@ bs=1M count=100 2>/dev/null
test/data/random100M.dat:
	$(INSTALL) -d $(@D)
	$(DD) if=$(DEVICE_RANDOM) of=$@ bs=1M count=100 2>/dev/null
test/data/delta1/test100M.dat:
	$(INSTALL) -d $(@D)
	( \
         $(DD) if=$(DEVICE_RANDOM) bs=1M count=100 2>/dev/null; \
        ) > $@
test/data/delta2/test100M.dat: test/data/delta1/test100M.dat
	$(INSTALL) -d $(@D)
	( \
          $(DD) if=test/data/delta1/test100M.dat skip=0 bs=1M count=50 2>/dev/null; \
          $(DD) if=$(DEVICE_RANDOM) bs=1M count=1 2>/dev/null; \
          $(DD) if=test/data/delta1/test100M.dat skip=256 bs=1M count=49 2>/dev/null; \
        ) > $@

# performance tests
.PHONY: performance
performance:
	@$(MAKE) \
          $(if $(CHECK),\
            performance$(CHECK),\
            performance_none performance_zip_compress performance_bzip2_compress performance_lzma_compress performance_delta_compress \
           )

.PHONY: performance1 performance_none
performance1 performance_none: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "None (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar test/data/zero100M.dat test/data/random100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance2 performance_zip_compress
performance2 performance_zip_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "ZIP (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar test/data/zero100M.dat test/data/random100M.dat --overwrite-archive-files --compress-algorithm=zip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance3 performance_bzip2_compress
performance3 performance_bzip2_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "BZIP2 (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar test/data/zero100M.dat test/data/random100M.dat --overwrite-archive-files --compress-algorithm=bzip9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance4 performance_lzma_compress
performance4 performance_lzma_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
	@$(ECHO) "LZMA (100M zero, 100M random):"
	@$(ECHO_NO_LF) "  Create : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -c test/test.bar test/data/zero100M.dat test/data/random100M.dat --overwrite-archive-files --compress-algorithm=lzma9 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Test   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -t test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Diff   : "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -d test/test.bar 1>/dev/null 2>/dev/null"
	@$(ECHO_NO_LF) "  Extract: "
	@SSH_ASKPASS= $(TIME) --format="%E" sh -c "$(PERFORMANCE_BAR) -x test/test.bar --destination=test/restore --overwrite-files 1>/dev/null 2>/dev/null"

.PHONY: performance5 performance_delta_compress
performance5 performance_delta_compress: \
  $(PERFORMANCE_BAR) \
  $(PERFORMANCE_FILES)
ifeq (@HAVE_XDELTA@,1)
	@$(ECHO) "XDELTA (100M random):"
	@($(CD) test/data/delta1; ../../../$(PERFORMANCE_BAR) -c ../../test-A.bar test100M.dat --overwrite-archive-files --compress-algorithm=none 1>/dev/null 2>/dev/null)
	@$(ECHO_NO_LF) "  Create : "
	@($(CD) test/data/delta2; SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -c ../../test-B.bar test100M.dat --overwrite-archive-files --compress-algorithm=xdelta9+lzma9 --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Test   : "
	@($(CD) test/data/delta2; SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -t ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Diff   : "
	@($(CD) test/data/delta2; SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -d ../../test-B.bar --delta-source=../../test-A.bar 1>/dev/null 2>/dev/null")
	@$(ECHO_NO_LF) "  Extract: "
	@($(CD) test/data/delta2; SSH_ASKPASS= $(TIME) --format="%E" sh -c "../../../$(PERFORMANCE_BAR) -x ../../test-B.bar --delta-source=../../test-A.bar --destination=../../restore --overwrite-files 1>/dev/null 2>/dev/null")
endif

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist: \
  $(TEST_FILES)
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/bar
	$(INSTALL) -m 664 \
                   $(sort $(BAR_SOURCES) \
                          $(patsubst %.c,%.h,$(BAR_SOURCES)) \
                          $(EXTERN_SOURCES) \
                          $(patsubst %.c,%.h,$(EXTERN_SOURCES)) \
                          $(DESTROYER_SOURCES) \
                          $(patsubst %.c,%.h,$(DESTROYER_SOURCES)) \
                          $(OTHER_SOURCES) \
                          Makefile.in \
                          config.h.in \
                          bar.cfg \
                   ) \
                   $(DIRECTORY)/bar
	$(INSTALL) -d $(DIRECTORY)/bar/test
	$(INSTALL) -d $(DIRECTORY)/bar/test/data
	$(INSTALL) -m 664 test/data/zero.dat \
                          test/data/zero512k.dat \
                          test/data/zero1024.dat \
                          test/data/random512k.dat \
                          test/data/random1024.dat \
                          test/data/smallfile.dat \
                          $(DIRECTORY)/bar/test/data
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

# ----------------------------------------------------------------------------

-include Makefile.depend

# end of file
