# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/bar/Makefile.in,v $
# $Revision: 1.21 $
# $Author: torsten $
# Contents: Makefile for bar
# Systems: all
#			   
# ----------------------------------------------------------------------------

#------------------------------------ paths ----------------------------------

INSTALL_DIR     = @INSTALL_DIR@
INSTALL_BIN_DIR = @INSTALL_BIN_DIR@
CONFIG_DIR      = @CONFIG_DIR@
TLS_DIR         = @TLS_DIR@

#--------------------------------- tool chain --------------------------------

CC                  = @CC@
CC_FLAGS            = @CC_FLAGS@ -g
CC_WARN_FLAGS       = -Wall -Wpointer-arith -Wunused-label -Wunused-parameter -Wunused-variable -Wmissing-prototypes -Wmissing-declarations
CC_OPTIMIZE         = @CC_OPTIMIZE@
CC_DEFINES          = @CC_DEFINES@ _LONG_LONG
# -D_LONG_LONG
CC_INCLUDES         = @CC_INCLUDES@
ifdef WERROR
  CC_FLAGS += -Werror
endif

LD                  = @CC@
LD_FLAGS            = @LD_FLAGS@
LD_LIBRARY_PATHS    = @LIBRARY_PATHS@
LD_LIBRARIES        = @LIBRARIES@ pthread c m
LD_STATIC_LIBRARIES = @STATIC_LIBRARIES@
LD_STATIC_PREFIX    = -Wl,-static

#---------------------------------- commands----------------------------------

CAT        = cat
CHMOD      = chmod
CP         = cp
DD         = dd
DIFF       = diff
ECHO       = echo
ECHO_NO_LF = echo -n
GREP       = grep
INSTALL    = @INSTALL@
MKDIR      = mkdir
PERL       = @PERL@
RMDIR      = rmdir
RMF        = rm -f
RMRF       = rm -rf
SED        = sed
TAR        = tar

# for tests only (create test devices)
LOSETUP    = sudo /sbin/losetup
MKFS       = /sbin/mkfs
MOUNT      = sudo /bin/mount
UMOUNT     = sudo /bin/umount

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR := $(shell $(CAT) ../version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) ../version|$(GREP) MINOR|$(SED) 's/MINOR=//g')

CRYPT_NAMES    = none
ifeq (@HAVE_GCRYPT@,1)
CRYPT_NAMES    += 3DES CAST5 BLOWFISH AES128 AES192 AES256 TWOFISH128 TWOFISH256
endif
COMPRESS_NAMES = none zip0 zip1 zip2 zip3 zip4 zip5 zip6 zip7 zip8 zip9
ifeq (@HAVE_BZ2@,1)
COMPRESS_NAMES += bzip1 bzip2 bzip3 bzip4 bzip5 bzip6 bzip7 bzip8 bzip9
endif
ifeq (@HAVE_LZMA@,1)
COMPRESS_NAMES += lzma1 lzma2 lzma3 lzma4 lzma5 lzma6 lzma7 lzma8 lzma9
endif

CRYPT=none
COMPRESS=none

TEST_PASSWORD=Franz_Kafka:Die_Verwandlung

#---------------------------------- rules ------------------------------------

# disable implicit rule for *.y -> *.c
%.c:%.y

%.o:%.c
	$(CC) $(CC_FLAGS) $(CC_OPTIMIZE) -DVERSION_MAJOR="$(VERSION_MAJOR)" -DVERSION_MINOR="$(VERSION_MINOR)" $(foreach z,$(CC_DEFINES),-D$z) $(CC_WARN_FLAGS) $(foreach z,$(CC_INCLUDES),-I$z) -c $*.c -o $*.o

%:%.o
	$(LD) $(LD_FLAGS) -o $@ $^ $(foreach z,$(LD_LIBRARY_PATHS),-L$z) \
          $(foreach z,$(LD_LIBRARIES), -l$z) $(foreach z,$(LD_LIBRARIES), -l$z) \
          $(if $(LD_STATIC_LIBRARIES),$(LD_STATIC_PREFIX) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z) $(foreach z,$(LD_STATIC_LIBRARIES),-l$z))

#--------------------------------- objects -----------------------------------

BAR_SOURCES          = bar.c \
                       errors.c \
                       commands_create.c \
                       commands_list.c \
                       commands_test.c \
                       commands_compare.c \
                       commands_restore.c \
                       files.c \
                       devices.c \
                       filesystems.c \
                       archive.c \
                       archive_format.c \
                       chunks.c \
                       patterns.c \
                       patternlists.c \
                       entrylists.c \
                       compress.c \
                       crypt.c \
                       passwords.c \
                       misc.c \
                       storage.c \
                       network.c \
                       server.c \
                       \
                       global.c \
                       cmdoptions.c \
                       configvalues.c \
                       lists.c \
                       strings.c \
                       stringlists.c \
                       threads.c \
                       msgqueues.c \
                       semaphores.c \
                       fragmentlists.c \
                       arrays.c \
                       dictionaries.c \
                       bitmaps.c \

BAR_OBJECTS          = $(foreach z,$(BAR_SOURCES),$(subst .c,.o,$z)) \
                       errors.o \
                       archive_format.o

DESTROYER_SOURCES    = destroyer.c \
                       global.c \
                       cmdoptions.c \
                       lists.c \
                       strings.c \

DESTROYER_OBJECTS    = $(foreach z,$(DESTROYER_SOURCES),$(subst .c,.o,$z)) \

OTHER_SOURCES        = archive_format.pl \
                       archive_format.def \
                       valgrind.supp \
                       bar.cfg \
                       bar-keygen.in \

INTERMEDIATE         = errors.c \
                       errors.h \
                       archive_format.c \
                       archive_format.h \

TARGETS              = bar \
                       bar-keygen \
                       destroyer \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean depend
all: $(TARGETS)

clean:
	$(RMF) $(BAR_OBJECTS)
	$(RMF) $(DESTROYER_OBJECTS)
	$(RMF) $(INTERMEDIATE)
	$(RMF) $(TARGETS)

distclean: clean
	$(RMF) Makefile Makefile.depend
	$(RMF) config.h

depend: Makefile.depend

# create dependencies
Makefile.depend: $(BAR_SOURCES) $(DESTROYER_SOURCES) $(INTERMEDIATE)
	$(ECHO) > Makefile.depend
	for z in $(BAR_SOURCES) $(DESTROYER_SOURCES); do \
          $(CC) -MM >> Makefile.depend $$z; \
        done;

# create BAR
bar@EXEEXT@: $(BAR_OBJECTS)

# create bar-keygen script
bar-keygen: bar-keygen.in
	$(CAT) bar-keygen.in | \
        ( \
          while IFS="" read -r line; do \
            if   test "$$line" = "@CERTTOOL/CA.TEMPL@"; then \
              $(CAT) ../ssl/certtool/ca.tmpl; \
            elif test "$$line" = "@CERTTOOL/SERVER.TEMPL@"; then \
              $(CAT) ../ssl/certtool/server.tmpl; \
            elif test "$$line" = "@OPENSSL/CA.TEMPL@"; then \
              $(CAT) ../ssl/openssl/ca.tmpl; \
            elif test "$$line" = "@OPENSSL/SERVER.TEMPL@"; then \
              $(CAT) ../ssl/openssl/server.tmpl; \
            else \
              line=`$(ECHO) "$$line"|$(SED) 's|\@DESTDIR\@|$(DESTDIR)|g'`; \
              line=`$(ECHO) "$$line"|$(SED) 's|\@TLS_DIR\@|$(TLS_DIR)|g'`; \
              $(ECHO) "$$line"; \
            fi; \
          done; \
        ) > $@
	$(CHMOD) 775 $@

# error definition
errors.h: ../errors.def ../errors.pl
	$(PERL) ../errors.pl < $^ -h $@
errors.c: ../errors.def ../errors.pl
	$(PERL) ../errors.pl < $^ -c $@

# archive format definition
archive_format.h: archive_format.def
	$(PERL) archive_format.pl < $^ -h $@
archive_format.c: archive_format.def
	$(PERL) archive_format.pl < $^ -c $@ -i archive_format.h

# create destroyer (for testing only!)
destroyer@EXEEXT@: $(DESTROYER_OBJECTS) 
	$(LD) $(LD_FLAGS) -o $@ $^ -lc -lpthread

# run server
.PHONY: barserver barserver_ssl
runserver barserver: bar
	$(INSTALL) -d jobs
	nice ./bar \
          --daemon -D \
          --server-jobs-directory jobs

runserver_ssl barserver_ssl: bar ../bar-ca.pem ../bar-server-cert.pem ../bar-server-key.pem
	$(INSTALL) -d jobs
	nice ./bar \
          --daemon -D \
          --server-jobs-directory jobs \
          --server-ca-file=../bar-ca.pem \
          --server-cert-file=../bar-server-cert.pem \
          --server-key-file=../bar-server-key.pem

# do test
.PHONY: test test1 test2 test3 test4 test_all
test:
	@$(MAKE) QUIET=1 --no-print-directory -s test1 test2 test3 test4 test5 test6 test_all

test1 test_basic: bar
	@$(ECHO_NO_LF) "Test 1: basic..."
	@$(MAKE) \
          BAR_FILE="test" \
          OPTIONS="--compress-algorithm=none --crypt-algorithm=none" \
          test_file
	@$(ECHO) "ok"

test2 test_compress: bar
	@$(ECHO_NO_LF) "Test 2: compress..."
	for compress in $(COMPRESS_NAMES); do \
          $(MAKE) \
            BAR_FILE="test" \
            OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=none" \
            test_file \
            ; \
        done
	@$(ECHO) "ok"

test3 test_crypt: bar
	@$(ECHO_NO_LF) "Test 3: crypt..."
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test-###" \
            OPTIONS="--compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD)" \
            test_file \
            ; \
        done
	@$(ECHO) "ok"

test4 test_asymmetric_crypt: bar
	@$(ECHO_NO_LF) "Test 4: asymmetric crypt..."
	@$(RM) test/key.*; $(ECHO_NO_LF) -e "$(TEST_PASSWORD)\n$(TEST_PASSWORD)\n" | SSH_ASKPASS= ./bar --generate-keys test/key
	for crypt in $(CRYPT_NAMES); do \
          $(MAKE) \
            BAR_FILE="test-###" \
            OPTIONS="--compress-algorithm=none --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) --crypt-asymmetric --crypt-public-key=test/key.public --crypt-private-key=test/key.private" \
            test_file \
            ; \
        done
	@$(ECHO) "ok"

test5 test_split: bar
	@$(ECHO_NO_LF) "Test 5: split..."
	$(MAKE) \
          BAR_FILE="test-###" \
          OPTIONS="--archive-part-size=100000 --compress-algorithm=none --crypt-algorithm=none" \
          test_file
	@$(ECHO) "ok"

test6 test_image: bar
	@$(ECHO_NO_LF) "Test 6: image..."
	for compress in none zip9; do \
          $(MAKE) \
            BAR_FILE="test" \
            OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=none" \
            test_image_raw \
            test_image_ext \
            test_image_fat \
            ; \
        done
	@$(ECHO) "ok"

test_all: bar
	@$(ECHO_NO_LF) "Test all..."
	@$(RM) test/key.*; $(ECHO_NO_LF) -e "$(TEST_PASSWORD)\n$(TEST_PASSWORD)\n" | SSH_ASKPASS= ./bar --generate-keys test/key
	for compress in $(COMPRESS_NAMES); do \
          for crypt in $(CRYPT_NAMES); do \
            $(MAKE) \
              BAR_FILE=test-### \
              OPTIONS="--compress-algorithm=$$compress --crypt-algorithm=$$crypt --crypt-password=$(TEST_PASSWORD) --crypt-asymmetric --crypt-public-key=test/key.public --crypt-private-key=test/key.private --archive-part-size=100000" \
              test_file \
              test_image_raw \
              test_image_ext \
              test_image_fat \
              ; \
            rc=$$?; \
            if test $$rc -ne 0; then \
              exit 1; \
            fi; \
          done; \
        done
	@$(ECHO) "ok"

TEST_FILES = test/*.bar test/*.bid test/new test/restore test/*.image

.PHONY: test_file test_file_base
test_file test_file_base: bar
	$(RMRF) $(TEST_FILES)
	SSH_ASKPASS= ./bar -c test/$(BAR_FILE).bar test/data $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -l test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -t test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -d test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -x test/test*.bar $(OPTIONS) --destination test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.txt -x circular-link.dat -x fifo test/data test/restore/test/data
	#
	$(RMRF) $(TEST_FILES)
	SSH_ASKPASS= ./bar -c test/$(BAR_FILE)-full.bar --full --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	$(MKDIR) test/new; $(CP) test/data/random1024.dat test/new/random1024-new.dat
	SSH_ASKPASS= ./bar -c test/$(BAR_FILE)-incremental.bar --incremental --incremental-list-file=test/$(BAR_FILE).bid test/data test/new $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -t test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -d test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -x test/test*.bar $(OPTIONS) --destination test/restore $(if $(QUIET),1>/dev/null)

.PHONY: test_file_destroy test_file_base_destroy
test_file_destroy test_file_base_destroy: bar destroyer
	$(RMRF) $(TEST_FILES)
	SSH_ASKPASS= ./bar -c test/$(BAR_FILE).bar test/data/zero1024.dat $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	./destroyer test/test.bar m:0 > test/test.bar_destroyed
	SSH_ASKPASS= ./bar -l test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -t test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -d test/test.bar_destroyed $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -x test/test.bar_destroyed $(OPTIONS) --destination test/restore $(if $(QUIET),1>/dev/null)
	$(DIFF) -r -x unreadable.txt test/data test/restore/test/data

# helper function to create a test device
# call FunctionTestDeviceCreate,<loop device> <file> <size>
FunctionTestDeviceCreate = \
  ( \
    $(LOSETUP) -d $1 2>/dev/null; \
    $(DD) if=/dev/zero of=$2 bs=$3 count=1 2>/dev/null; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
    $(LOSETUP) $1 $2; rc=$$?; if test $$rc -ne 0; then exit $$rc; fi; \
  )

# helper function to delete a test device
# call FunctionTestDeviceDelete,<loop device> <file>
FunctionTestDeviceDelete = \
  ( \
    $(LOSETUP) -d $1; \
    $(RMF) $2; \
  )

# helper function to zero out test device
# call FunctionTestDeviceZero,<loop device>,<size>
FunctionTestDeviceZero = \
    $(DD) if=/dev/zero of=$1 bs=$2 count=1 2>/dev/null; \

# helper function to fill test device with random data
# call FunctionTestDeviceRandom,<loop device>,<size>
FunctionTestDeviceRandom = \
    $(DD) if=/dev/urandom of=$1 bs=$2 count=1 2>/dev/null; \

# helper function to initialize file system on a test device
# call FunctionTestDeviceInitFilesystem,<loop device>,<mkfs options>,<mount point>
FunctionTestDeviceInitFilesystem = \
  ( \
    $(MKFS) $2 $1 $(if $(QUIET),1>/dev/null); \
    $(if $3,($(MKDIR) test/dev 2>/dev/null; $(MOUNT) $1 test/dev; $(CP) -r test/data test/dev $(if $(QUIET),1>/dev/null); $(UMOUNT) test/dev; $(RMDIR) test/dev;);) \
  )

.PHONY: test_image_raw
test_image_raw:
	# raw
	$(call FunctionTestDeviceCreate,/dev/loop0,test/dev0,32M); $(call FunctionTestDeviceRandom,/dev/loop0,32M)
	$(call FunctionTestDeviceCreate,/dev/loop1,test/dev1,32M)
	$(MAKE) test_image_base \
           DEVICE0=/dev/loop0 DEVICE1=/dev/loop1 \
           OPTIONS+="--raw-images"
	$(call FunctionTestDeviceDelete,/dev/loop1,test/dev1)
	$(call FunctionTestDeviceDelete,/dev/loop0,test/dev0)

.PHONY: test_image_ext test_image_ext2 test_image_ext3 test_image_ext4
test_image_ext: \
  test_image_ext2 \
  test_image_ext3 \
  test_image_ext4 

test_image_ext2 test_image_ext3:
	# ext2/ext3
	$(call FunctionTestDeviceCreate,/dev/loop0,test/dev0,32M)
	$(call FunctionTestDeviceCreate,/dev/loop1,test/dev1,32M)
	#
	$(call FunctionTestDeviceZero,/dev/loop0,32M)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t ext2,1)
	$(MAKE) test_image_base \
           DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	#
	$(call FunctionTestDeviceZero,/dev/loop0,32M)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t ext2 -b 1024,1)
	$(MAKE) test_image_base \
           DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	#
	$(call FunctionTestDeviceZero,/dev/loop0,32M)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t ext2 -b 2048,1)
	$(MAKE) test_image_base \
           DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	#
	$(call FunctionTestDeviceZero,/dev/loop0,32M)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t ext2 -b 4096,1)
	$(MAKE) test_image_base \
           DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	#
	$(call FunctionTestDeviceDelete,/dev/loop1,test/dev1)
	$(call FunctionTestDeviceDelete,/dev/loop0,test/dev0)

test_image_ext4:
	# ext4
	#

.PHONY: test_image_fat test_image_fat12 test_image_fat16 test_image_fat32
test_image_fat: \
  test_image_fat12 \
  test_image_fat16 \
  test_image_fat32

test_image_fat12:
	# FAT12
	$(call FunctionTestDeviceCreate,/dev/loop0,test/dev0,1440K)
	$(call FunctionTestDeviceCreate,/dev/loop1,test/dev1,1440K)
	$(call FunctionTestDeviceZero,/dev/loop0,1440K)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t msdos -F 12,1)
	$(MAKE) test_image_base \
          DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	$(call FunctionTestDeviceDelete,/dev/loop1,test/dev1)
	$(call FunctionTestDeviceDelete,/dev/loop0,test/dev0)

test_image_fat16:
	# FAT16
	$(call FunctionTestDeviceCreate,/dev/loop0,test/dev0,20M)
	$(call FunctionTestDeviceCreate,/dev/loop1,test/dev1,20M)
	$(call FunctionTestDeviceZero,/dev/loop0,20M)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t msdos -F 16,1)
	$(MAKE) test_image_base \
          DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	$(call FunctionDeleteTestDevice,/dev/loop1,test/dev1)
	$(call FunctionDeleteTestDevice,/dev/loop0,test/dev0)

test_image_fat32:
	# FAT32
	$(call FunctionTestDeviceCreate,/dev/loop0,test/dev0,40M)
	$(call FunctionTestDeviceCreate,/dev/loop1,test/dev1,40M)
	$(call FunctionTestDeviceZero,/dev/loop0,40M)
	$(call FunctionTestDeviceInitFilesystem,/dev/loop0,-t msdos -F 32,1)
	$(MAKE) test_image_base \
          DEVICE0=/dev/loop0 DEVICE1=/dev/loop1
	$(call FunctionTestDeviceDelete,/dev/loop1,test/dev1)
	$(call FunctionTestDeviceDelete,/dev/loop0,test/dev0)

.PHONY: test_image_base
test_image_base: bar
	$(RMRF) $(TEST_FILES)
	SSH_ASKPASS= ./bar -m test/$(BAR_FILE).bar $(DEVICE0) $(OPTIONS) --overwrite-archive-files $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -t test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -d test/test*.bar $(OPTIONS) $(if $(QUIET),1>/dev/null)
	SSH_ASKPASS= ./bar -x test/test*.bar $(OPTIONS) --destination $(DEVICE1) $(if $(QUIET),1>/dev/null)
	$(DD) if=$(DEVICE0) of=test/dev0.image 1>/dev/null 2>/dev/null
	$(DD) if=$(DEVICE1) of=test/dev1.image 1>/dev/null 2>/dev/null
	$(DIFF) test/dev0.image test/dev1.image

# valgrind checks
.PHONY: memcheck memcheck1
memcheck: bar
	$(MAKE) VALGRIND_OPTIONS="--leak-check=summary" $(if $(CHECK),memcheck$(CHECK),memcheck1 memcheck2 memcheck3 memcheck4 memcheck5 memcheck6 memcheck7)

.PHONY: memcheck_extended
memcheck_extended: bar
	$(MAKE) VALGRIND_OPTIONS="--leak-check=full" $(if $(CHECK),memcheck$(CHECK),memcheck1 memcheck2 memcheck3 memcheck4 memcheck5 memcheck6 memcheck7)

.PHONY: memcheck1 memcheck2 memcheck3 memcheck4 memcheck5 memcheck6 memcheck7
memcheck1: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar --help > /dev/null
memcheck2: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -c test/test.bar test/data/zero1024.dat $(OPTIONS) --overwrite-archive-files > /dev/null
memcheck3: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -l test/test*.bar $(OPTIONS) > /dev/null
memcheck4: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -t test/test*.bar $(OPTIONS) > /dev/null
memcheck5: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -d test/test*.bar $(OPTIONS) > /dev/null
memcheck6: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar -x test/test*.bar $(OPTIONS) --destination test/restore > /dev/null
memcheck7: bar
	valgrind \
          --leak-resolution=high \
          --track-fds=yes \
          --suppressions=valgrind.supp \
          $(VALGRIND_OPTIONS) \
          ./bar \
            --daemon \
            --server-jobs-directory jobs \
            --server-ca-file=bar-ca.pem \
            --server-cert-file=bar-server-cert.pem \
            --server-key-file=bar-server-key.pem

# copy distribution files
.PHONY: dist
dist:
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/bar
	$(INSTALL) -m 664 \
                   $(sort $(BAR_SOURCES) \
                          $(patsubst %.c,%.h,$(BAR_SOURCES)) \
                          $(DESTROYER_SOURCES) \
                          $(patsubst %.c,%.h,$(DESTROYER_SOURCES)) \
                          $(OTHER_SOURCES) \
                          Makefile.in \
                          config.h.in \
                          bar.cfg \
                   ) \
                   $(DIRECTORY)/bar
	$(INSTALL) -d $(DIRECTORY)/bar/test
	$(INSTALL) -d $(DIRECTORY)/bar/test/data
	$(INSTALL) -m 664 test/data/zero.dat \
                          test/data/zero512k.dat \
                          test/data/zero1024.dat \
                          test/data/random512k.dat \
                          test/data/random1024.dat \
                          test/data/smallfile.dat \
                          $(DIRECTORY)/bar/test/data
else
	@$(ECHO) Please call 'make dist' from top-level directory to create a distribution.
endif

-include Makefile.depend

# end of file
