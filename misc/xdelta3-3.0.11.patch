diff -Naur xdelta3-3.0.11.org/testing/delta.h xdelta3-3.0.11/testing/delta.h
--- xdelta3-3.0.11.org/testing/delta.h	2015-03-24 06:38:06.000000000 +0100
+++ xdelta3-3.0.11/testing/delta.h	2019-11-06 15:01:40.567396407 +0100
@@ -53,13 +53,13 @@
       xd3_winst &winst = stream_.whole_target.inst[i];
       switch (winst.type) {
       case XD3_RUN: 
-	DP(RINT "%"Q"u run %u\n", winst.position, winst.size);
+	DP(RINT "%"XD3_Q"u run %u\n", winst.position, winst.size);
 	break;
       case XD3_ADD: 
-	DP(RINT "%"Q"u add %u\n", winst.position, winst.size);
+	DP(RINT "%"XD3_Q"u add %u\n", winst.position, winst.size);
 	break;
       default:
-	DP(RINT "%"Q"u copy %u @ %"Q"u (mode %u)\n", 
+	DP(RINT "%"XD3_Q"u copy %u @ %"Q"u (mode %u)\n", 
 	   winst.position, winst.size, winst.addr, winst.mode);
 	break;
       }
diff -Naur xdelta3-3.0.11.org/testing/file.h xdelta3-3.0.11/testing/file.h
--- xdelta3-3.0.11.org/testing/file.h	2016-01-08 07:45:07.000000000 +0100
+++ xdelta3-3.0.11/testing/file.h	2019-11-06 15:01:40.567396407 +0100
@@ -66,7 +66,7 @@
     xoff_t pos = 0;
     for (size_t i = 0; i < Size(); i++) {
       if (pos % 16 == 0) {
-	DP(RINT "%5"Q"x: ", pos);
+	DP(RINT "%5"XD3_Q"x: ", pos);
       }
       DP(RINT "%02x ", (*this)[i]);
       if (pos % 16 == 15) {
@@ -314,7 +314,7 @@
     pid_t pid = getpid();
     char buf[64];
     xoff_t xpid = pid;
-    snprintf(buf, 64, "/tmp/regtest.%" Q "u.%d", xpid, static_counter++);
+    snprintf(buf, 64, "/tmp/regtest.%" XD3_Q "u.%d", xpid, static_counter++);
     filename_.append(buf);
     unlink(filename_.c_str());
   }
diff -Naur xdelta3-3.0.11.org/testing/regtest.cc xdelta3-3.0.11/testing/regtest.cc
--- xdelta3-3.0.11.org/testing/regtest.cc	2015-11-19 04:55:20.000000000 +0100
+++ xdelta3-3.0.11/testing/regtest.cc	2019-11-06 15:01:40.567396407 +0100
@@ -92,7 +92,7 @@
     bool done = false;
     bool done_after_input = false;
 
-    IF_DEBUG1 (XPR(NTR "source %"Q"u[%"Q"u] target %"Q"u winsize %"Z"u\n",
+    IF_DEBUG1 (XPR(NTR "source %"XD3_Q"u[%"XD3_Q"u] target %"XD3_Q"u winsize %"Z"u\n",
 		  source_file.Size(), options.block_size,
 		  target_file.Size(),
 		  Constants::WINDOW_SIZE));
@@ -102,8 +102,8 @@
 
       xoff_t blks = target_iterator.Blocks();
 
-      IF_DEBUG2(XPR(NTR "target in %s: %"Q"u..%"Q"u %"Q"u(%"Q"u) "
-		    "verified %"Q"u\n",
+      IF_DEBUG2(XPR(NTR "target in %s: %"XD3_Q"u..%"XD3_Q"u %"XD3_Q"u(%"XD3_Q"u) "
+		    "verified %"XD3_Q"u\n",
 		   encoding ? "encoding" : "decoding",
 		   target_iterator.Offset(),
 		   target_iterator.Offset() + target_block.Size(),
@@ -153,8 +153,8 @@
 	xd3_source *src = (encoding ? &encode_source : &decode_source);
 	Block *block = (encoding ? &encode_source_block : &decode_source_block);
 	if (encoding) {
-	  IF_DEBUG2(XPR(NTR "[srcblock] %"Q"u last srcpos %"Q"u "
-			"encodepos %"Q"u\n",
+	  IF_DEBUG2(XPR(NTR "[srcblock] %"XD3_Q"u last srcpos %"XD3_Q"u "
+			"encodepos %"XD3_Q"u\n",
 			encode_source.getblkno,
 			encode_stream.match_last_srcpos,
 			encode_stream.input_position + encode_stream.total_in));
@@ -231,7 +231,7 @@
 			const Options &options) {
     vector<const char*> ecmd;
     char bbuf[16];
-    snprintf(bbuf, sizeof(bbuf), "-B%"Q"u", options.encode_srcwin_maxsz);
+    snprintf(bbuf, sizeof(bbuf), "-B%"XD3_Q"u", options.encode_srcwin_maxsz);
     ecmd.push_back("xdelta3");
     ecmd.push_back(bbuf);
     ecmd.push_back("-s");
@@ -371,7 +371,7 @@
 void TestPrintf() {
   char buf[64];
   xoff_t x = XOFF_T_MAX;
-  snprintf_func (buf, sizeof(buf), "%"Q"u", x);
+  snprintf_func (buf, sizeof(buf), "%"XD3_Q"u", x);
   const char *expect = XD3_USE_LARGEFILE64 ?
     "18446744073709551615" : "4294967295";
   XD3_ASSERT(strcmp (buf, expect) == 0);
@@ -813,7 +813,7 @@
     InMemoryEncodeDecode(spec0, spec1, &block, options);
     Delta delta(block);
 
-    IF_DEBUG1(DP(RINT "[stride=%d] changes=%u adds=%"Q"u\n",
+    IF_DEBUG1(DP(RINT "[stride=%d] changes=%u adds=%"XD3_Q"u\n",
 		 s, changes, delta.AddedBytes()));
     double allowance = Constants::BLOCK_SIZE < 8192 || s < 30 ? 3.0 : 1.1;
     CHECK_GE(allowance * changes, (double)delta.AddedBytes());
@@ -1259,7 +1259,7 @@
 // These are Xdelta tests.
 template <class T>
 void MainTest() {
-  XPR(NT "Blocksize %"Q"u windowsize %"Z"u\n",
+  XPR(NT "Blocksize %"XD3_Q"u windowsize %"XD3_Z"u\n",
       T::BLOCK_SIZE, T::WINDOW_SIZE);
   Regtest<T> regtest;
   TEST(TestEmptyInMemory);
diff -Naur xdelta3-3.0.11.org/xdelta3-blkcache.h xdelta3-3.0.11/xdelta3-blkcache.h
--- xdelta3-3.0.11.org/xdelta3-blkcache.h	2015-12-18 07:51:52.000000000 +0100
+++ xdelta3-3.0.11/xdelta3-blkcache.h	2019-11-06 15:01:40.567396407 +0100
@@ -245,7 +245,7 @@
 
       if (sfile->size_known)
 	{
-	  short_sprintf (srcszbuf, "source size %s [%"Q"u]",
+	  short_sprintf (srcszbuf, "source size %s [%"XD3_Q"u]",
 			 main_format_bcnt (source_size, &srccntbuf),
 			 source_size);
 	}
@@ -309,12 +309,12 @@
 	      main_blklru_list_remove (blru);
 	      main_blklru_list_push_back (& lru_list, blru);
 	      (*blrup) = blru;
-	      IF_DEBUG1 (DP(RINT "[getblk_lru] HIT blkno = %"Z"u lru_size=%d\n",
+	      IF_DEBUG1 (DP(RINT "[getblk_lru] HIT blkno = %"XD3_Z"u lru_size=%d\n",
 		    blkno, lru_size));
 	      return 0;
 	    }
 	}
-      IF_DEBUG1 (DP(RINT "[getblk_lru] MISS blkno = %"Z"u lru_size=%d\n",
+      IF_DEBUG1 (DP(RINT "[getblk_lru] MISS blkno = %"XD3_Z"u lru_size=%d\n",
 		    blkno, lru_size));
     }
 
@@ -369,7 +369,7 @@
 	  if (!option_quiet)
 	    {
 	      XPR(NT "source can't seek backwards; requested block offset "
-		  "%"Q"u source position is %"Q"u\n",
+		  "%"XD3_Q"u source position is %"XD3_Q"u\n",
 		  pos, sfile->source_position);
 	    }
 
@@ -389,7 +389,7 @@
 
 	  if (option_verbose > 1)
 	    {
-	      XPR(NT "seek error at offset %"Q"u: %s\n",
+	      XPR(NT "seek error at offset %"XD3_Q"u: %s\n",
 		  pos, xd3_mainerror (ret));
 	    }
 	}
@@ -398,7 +398,7 @@
 
       if (option_verbose > 1 && pos != sfile->source_position)
 	{
-	  XPR(NT "non-seekable source skipping %"Q"u bytes @ %"Q"u\n",
+	  XPR(NT "non-seekable source skipping %"XD3_Q"u bytes @ %"XD3_Q"u\n",
 	      pos - sfile->source_position,
 	      sfile->source_position);
 	}
@@ -434,7 +434,7 @@
 
 	  if (nread != source->blksize)
 	    {
-	      IF_DEBUG1 (DP(RINT "[getblk] short skip block nread = %"Z"u\n",
+	      IF_DEBUG1 (DP(RINT "[getblk] short skip block nread = %"XD3_Z"u\n",
 			    nread));
 	      stream->msg = "non-seekable input is short";
 	      return XD3_INVALID_INPUT;
@@ -443,7 +443,7 @@
 	  sfile->source_position += nread;
 	  blru->size = nread;
 
-	  IF_DEBUG1 (DP(RINT "[getblk] skip blkno %"Q"u size %u\n",
+	  IF_DEBUG1 (DP(RINT "[getblk] skip blkno %"XD3_Q"u size %u\n",
 			skip_blkno, blru->size));
 
 	  XD3_ASSERT (sfile->source_position <= pos);
@@ -528,20 +528,20 @@
 	{
 	  if (blru->blkno != blkno)
 	    {
-	      XPR(NT "source block %"Q"u read %"Z"u ejects %"Q"u (lru_hits=%u, "
+	      XPR(NT "source block %"XD3_Q"u read %"Z"u ejects %"Q"u (lru_hits=%u, "
 		  "lru_misses=%u, lru_filled=%u)\n",
 		  blkno, nread, blru->blkno, lru_hits, lru_misses, lru_filled);
 	    }
 	  else
 	    {
-	      XPR(NT "source block %"Q"u read %"Z"u (lru_hits=%u, "
+	      XPR(NT "source block %"XD3_Q"u read %"Z"u (lru_hits=%u, "
 		  "lru_misses=%u, lru_filled=%u)\n",
 		  blkno, nread, lru_hits, lru_misses, lru_filled);
 	    }
 	}
       else
 	{
-	  XPR(NT "source block %"Q"u read %"Z"u (lru_hits=%u, lru_misses=%u, "
+	  XPR(NT "source block %"XD3_Q"u read %"Z"u (lru_hits=%u, lru_misses=%u, "
 	      "lru_filled=%u)\n", blkno, nread, 
 	      lru_hits, lru_misses, lru_filled);
 	}
@@ -553,8 +553,8 @@
   blru->size       = nread;
   blru->blkno      = blkno;
 
-  IF_DEBUG1 (DP(RINT "[main_getblk] blkno %"Q"u onblk %"Z"u pos %"Q"u "
-		"srcpos %"Q"u\n",
+  IF_DEBUG1 (DP(RINT "[main_getblk] blkno %"XD3_Q"u onblk %"XD3_Z"u pos %"XD3_Q"u "
+		"srcpos %"XD3_Q"u\n",
 		blkno, nread, pos, sfile->source_position));
 
   return 0;
diff -Naur xdelta3-3.0.11.org/xdelta3-decode.h xdelta3-3.0.11/xdelta3-decode.h
--- xdelta3-3.0.11.org/xdelta3-decode.h	2015-12-09 05:45:56.000000000 +0100
+++ xdelta3-3.0.11/xdelta3-decode.h	2019-11-06 15:01:40.567396407 +0100
@@ -626,6 +626,8 @@
       return ret;
     }
 #undef DECODE_SECONDARY_SECTION
+#else
+  (void)secondary_stream;
 #endif
   return 0;
 }
@@ -793,7 +795,7 @@
   if ((stream->dec_win_ind & VCD_ADLER32) != 0 &&
       (stream->flags & XD3_ADLER32_NOVER) == 0)
     {
-      uint32_t a32 = adler32 (1L, stream->next_out, stream->avail_out);
+      uint32_t a32 = xd3_adler32 (1L, stream->next_out, stream->avail_out);
 
       if (a32 != stream->dec_adler32)
 	{
diff -Naur xdelta3-3.0.11.org/xdelta3-hash.h xdelta3-3.0.11/xdelta3-hash.h
--- xdelta3-3.0.11.org/xdelta3-hash.h	2015-03-24 06:38:06.000000000 +0100
+++ xdelta3-3.0.11/xdelta3-hash.h	2019-11-06 15:01:40.567396407 +0100
@@ -51,7 +51,7 @@
 
 /* Update the checksum state. */
 #if ADLER_LARGE_CKSUM
-inline uint32_t
+static inline uint32_t
 xd3_large_cksum_update (uint32_t cksum,
 			const uint8_t *base,
 			usize_t look) {
@@ -77,6 +77,7 @@
             const uint8_t *base,
             const usize_t look)
 {
+  (void)look;
   UNALIGNED_READ32(state, base);
   return (*state) * hash_multiplier;
 }
@@ -85,6 +86,7 @@
 			const uint8_t *base,
 			usize_t look)
 {
+  (void)look;
   UNALIGNED_READ32(state, base+1);
   return (*state) * hash_multiplier;
 }
diff -Naur xdelta3-3.0.11.org/xdelta3-internal.h xdelta3-3.0.11/xdelta3-internal.h
--- xdelta3-3.0.11.org/xdelta3-internal.h	2015-11-03 06:28:17.000000000 +0100
+++ xdelta3-3.0.11/xdelta3-internal.h	2019-11-06 15:01:40.567396407 +0100
@@ -43,9 +43,6 @@
 int test_compare_files (const char* f0, const char* f1);
 usize_t xd3_bytes_on_srcblk (xd3_source *src, xoff_t blkno);
 xoff_t xd3_source_eof(const xd3_source *src);
-uint32_t xd3_large_cksum_update (uint32_t cksum,
-				 const uint8_t *base,
-				 usize_t look);
 int xd3_emit_byte (xd3_stream  *stream,
 		   xd3_output **outputp,
 		   uint8_t      code);
diff -Naur xdelta3-3.0.11.org/xdelta3-main.h xdelta3-3.0.11/xdelta3-main.h
--- xdelta3-3.0.11.org/xdelta3-main.h	2015-12-27 06:49:53.000000000 +0100
+++ xdelta3-3.0.11/xdelta3-main.h	2019-11-06 15:01:40.567396407 +0100
@@ -593,7 +593,7 @@
 
       if (r >= 100 && r < 1000)
 	{
-	  short_sprintf (*buf, "%"Q"u %s", r, fmts[i]);
+	  short_sprintf (*buf, "%"XD3_Q"u %s", r, fmts[i]);
 	  return buf->buf;
 	}
 
@@ -693,12 +693,12 @@
 
   if (x < low)
     {
-      XPR(NT "-%c: minimum value: %"Q"u\n", which, low);
+      XPR(NT "-%c: minimum value: %"XD3_Q"u\n", which, low);
       return EXIT_FAILURE;
     }
   if (high != 0 && x > high)
     {
-      XPR(NT "-%c: maximum value: %"Q"u\n", which, high);
+      XPR(NT "-%c: maximum value: %"XD3_Q"u\n", which, high);
       return EXIT_FAILURE;
     }
   (*xo) = x;
@@ -1029,7 +1029,7 @@
 		const char *msg)
 {
   int ret = 0;
-  IF_DEBUG1(DP(RINT "[main] read %s up to %"Z"u\n", ifile->filename, size));
+  IF_DEBUG1(DP(RINT "[main] read %s up to %"XD3_Z"u\n", ifile->filename, size));
 
 #if XD3_STDIO
   size_t result;
@@ -1057,7 +1057,7 @@
     }
   else
     {
-      if (option_verbose > 4) { XPR(NT "read %s: %"Z"u bytes\n",
+      if (option_verbose > 4) { XPR(NT "read %s: %"XD3_Z"u bytes\n",
 				    ifile->filename, (*nread)); }
       ifile->nread += (*nread);
     }
@@ -1283,7 +1283,7 @@
 
       if ((ret = xd3_decode_instruction (stream)))
 	{
-	  XPR(NT "instruction decode error at %"Q"u: %s\n",
+	  XPR(NT "instruction decode error at %"XD3_Q"u: %s\n",
 	      stream->dec_winstart + size, stream->msg);
 	  return ret;
 	}
@@ -1291,7 +1291,7 @@
       addr_bytes = (usize_t)(stream->addr_sect.buf - addr_before);
       inst_bytes = (usize_t)(stream->inst_sect.buf - inst_before);
 
-      VC(UT "  %06"Q"u %03u  %s %6u", stream->dec_winstart + size,
+      VC(UT "  %06"XD3_Q"u %03u  %s %6u", stream->dec_winstart + size,
 	 option_print_cpymode ? code : 0,
 	 xd3_rtype_to_string ((xd3_rtype) stream->dec_current1.type,
 			      option_print_cpymode),
@@ -1308,7 +1308,7 @@
 		}
 	      else
 		{
-		  VC(UT " S@%-6"Q"u",
+		  VC(UT " S@%-6"XD3_Q"u",
 		     stream->dec_cpyoff + stream->dec_current1.addr)VE;
 		}
 	    }
@@ -1336,7 +1336,7 @@
 		}
 	      else
 		{
-		  VC(UT " S@%-6"Q"u",
+		  VC(UT " S@%-6"XD3_Q"u",
 		     stream->dec_cpyoff + stream->dec_current2.addr)VE;
 		}
 	    }
@@ -1351,7 +1351,7 @@
 	  (stream->dec_current1.type >= XD3_CPY ||
 	   stream->dec_current2.type >= XD3_CPY))
 	{
-	  VC(UT "  %06"Q"u (inefficiency) %u encoded as %u bytes\n",
+	  VC(UT "  %06"XD3_Q"u (inefficiency) %u encoded as %u bytes\n",
 	     stream->dec_winstart + size_before,
 	     size - size_before,
 	     addr_bytes + inst_bytes)VE;
@@ -1474,7 +1474,7 @@
       VC(UT "\n")VE;
     }
 
-  VC(UT "VCDIFF window number:         %"Q"u\n", stream->current_window)VE;
+  VC(UT "VCDIFF window number:         %"XD3_Q"u\n", stream->current_window)VE;
   VC(UT "VCDIFF window indicator:      ")VE;
   if ((stream->dec_win_ind & VCD_SOURCE) != 0) VC(UT "VCD_SOURCE ")VE;
   if ((stream->dec_win_ind & VCD_TARGET) != 0) VC(UT "VCD_TARGET ")VE;
@@ -1500,14 +1500,14 @@
 
   if (stream->dec_winstart != 0)
     {
-      VC(UT "VCDIFF window at offset:      %"Q"u\n", stream->dec_winstart)VE;
+      VC(UT "VCDIFF window at offset:      %"XD3_Q"u\n", stream->dec_winstart)VE;
     }
 
   if (SRCORTGT (stream->dec_win_ind))
     {
       VC(UT "VCDIFF copy window length:    %u\n",
 	 (usize_t)stream->dec_cpylen)VE;
-      VC(UT "VCDIFF copy window offset:    %"Q"u\n",
+      VC(UT "VCDIFF copy window offset:    %"XD3_Q"u\n",
 	 stream->dec_cpyoff)VE;
     }
 
@@ -1960,7 +1960,7 @@
 		  XD3_ASSERT (inst->addr >= window_start);
 		  addr = inst->addr - window_start;
 		}
-	      IF_DEBUG2 (XPR(NTR "[merge copy] winpos %u take %u addr %"Q"u mode %u\n",
+	      IF_DEBUG2 (XPR(NTR "[merge copy] winpos %u take %u addr %"XD3_Q"u mode %u\n",
 			    window_pos, take, addr, inst->mode));
 	      if ((ret = xd3_found_match (recode_stream, window_pos, take,
 					  addr, inst->mode != 0)))
@@ -2236,7 +2236,7 @@
 
   if (option_verbose && skipped != 0)
     {
-      XPR(NT "skipping %"Q"u bytes in %s\n",
+      XPR(NT "skipping %"XD3_Q"u bytes in %s\n",
 	  skipped, ifile->filename);
     }
   return 0;
@@ -3277,7 +3277,7 @@
 		    /* Warn when no source copies are found */
 		    if (option_verbose && ! xd3_encoder_used_source (& stream))
 		      {
-			XPR(NT "warning: input window %"Q"u..%"Q"u has "
+			XPR(NT "warning: input window %"XD3_Q"u..%"XD3_Q"u has "
 			    "no source copies\n",
 			    stream.current_window * winsize,
 			    (stream.current_window+1) * winsize);
@@ -3290,7 +3290,7 @@
 			stream.srcwin_decided_early &&
 			stream.i_slots_used > stream.iopt_size)
 		      {
-			XPR(NT "warning: input position %"Q"u overflowed "
+			XPR(NT "warning: input position %"XD3_Q"u overflowed "
 			    "instruction buffer, needed %u (vs. %u), "
 			    "consider changing -I\n",
 			    stream.current_window * winsize,
@@ -3314,7 +3314,7 @@
 
 		    if (option_verbose > 1)
 		      {
-			XPR(NT "%"Q"u: in %s (%s): out %s (%s): "
+			XPR(NT "%"XD3_Q"u: in %s (%s): out %s (%s): "
 			    "total in %s: out %s: %s: srcpos %s\n",
 			    stream.current_window,
 			    main_format_bcnt (this_read, &rdb),
@@ -3328,7 +3328,7 @@
 		      }
 		    else
 		      {
-			XPR(NT "%"Q"u: in %s: out %s: total in %s: "
+			XPR(NT "%"XD3_Q"u: in %s: out %s: total in %s: "
 			    "out %s: %s\n",
  			    stream.current_window,
 			    main_format_bcnt (this_read, &rdb),
@@ -3425,12 +3425,12 @@
 
   if (option_verbose > 2 && cmd == CMD_ENCODE)
     {
-      XPR(NT "source copies: %"Q"u (%"Q"u bytes)\n",
+      XPR(NT "source copies: %"XD3_Q"u (%"XD3_Q"u bytes)\n",
 	  stream.n_scpy, stream.l_scpy);
-      XPR(NT "target copies: %"Q"u (%"Q"u bytes)\n",
+      XPR(NT "target copies: %"XD3_Q"u (%"XD3_Q"u bytes)\n",
 	  stream.n_tcpy, stream.l_tcpy);
-      XPR(NT "adds: %"Q"u (%"Q"u bytes)\n", stream.n_add, stream.l_add);
-      XPR(NT "runs: %"Q"u (%"Q"u bytes)\n", stream.n_run, stream.l_run);
+      XPR(NT "adds: %"XD3_Q"u (%"XD3_Q"u bytes)\n", stream.n_add, stream.l_add);
+      XPR(NT "runs: %"XD3_Q"u (%"XD3_Q"u bytes)\n", stream.n_run, stream.l_run);
     }
 #endif
 
@@ -3442,7 +3442,7 @@
       long end_time = get_millisecs_now ();
       xoff_t nwrite = ofile != NULL ? ofile->nwrite : 0;
 
-      XPR(NT "finished in %s; input %"Q"u output %"Q"u bytes (%0.2f%%)\n",
+      XPR(NT "finished in %s; input %"XD3_Q"u output %"XD3_Q"u bytes (%0.2f%%)\n",
 	  main_format_millis (end_time - start_time, &tm),
 	  ifile->nread, nwrite, 100.0 * nwrite / ifile->nread);
     }
diff -Naur xdelta3-3.0.11.org/xdelta3-test.h xdelta3-3.0.11/xdelta3-test.h
--- xdelta3-3.0.11.org/xdelta3-test.h	2015-11-11 08:04:13.000000000 +0100
+++ xdelta3-3.0.11/xdelta3-test.h	2019-11-06 15:01:40.571396472 +0100
@@ -220,7 +220,7 @@
 {
   char buf[64];
   xoff_t x = XOFF_T_MAX;
-  snprintf_func (buf, sizeof(buf), "%"Q"u", x);
+  snprintf_func (buf, sizeof(buf), "%"XD3_Q"u", x);
   const char *expect = XD3_USE_LARGEFILE64 ?
     "18446744073709551615" : "4294967295";
   if (strcmp (buf, expect) == 0) {
@@ -438,7 +438,7 @@
 	{
 	  if (obuf[i] != rbuf[i])
  	    {
-	      XPR(NT "byte %u (read %u @ %"Q"u) %d != %d\n",
+	      XPR(NT "byte %u (read %u @ %"XD3_Q"u) %d != %d\n",
 		  (int)i, (int)oc, offset, obuf[i], rbuf[i]);
 	      diffs++;
 	      return XD3_INTERNAL;
@@ -1787,7 +1787,7 @@
       if (ratio >= TEST_ADD_RATIO + TEST_EPSILON)
 	{
 	  XPR(NT "test encode with size ratio %.4f, "
-	     "expected < %.4f (%"Q"u, %"Q"u)\n",
+	     "expected < %.4f (%"XD3_Q"u, %"XD3_Q"u)\n",
 	    ratio, TEST_ADD_RATIO + TEST_EPSILON, dsize, tsize);
 	  stream->msg = "strange encoding";
 	  return XD3_INTERNAL;
@@ -2721,7 +2721,7 @@
 	  if (inst->type == XD3_CPY)
 	    {
 	      *rptr++ = '@';
-	      snprintf_func (rptr, rbuf+TESTBUFSIZE-rptr, "%"Q"d", inst->addr);
+	      snprintf_func (rptr, rbuf+TESTBUFSIZE-rptr, "%"XD3_Q"d", inst->addr);
 	      rptr += strlen (rptr);
 	    }
 
diff -Naur xdelta3-3.0.11.org/xdelta3.c xdelta3-3.0.11/xdelta3.c
--- xdelta3-3.0.11.org/xdelta3.c	2015-12-27 06:58:11.000000000 +0100
+++ xdelta3-3.0.11/xdelta3.c	2019-11-06 15:05:09.986795451 +0100
@@ -1130,7 +1130,7 @@
 #define A32_DO8(buf,i)  A32_DO4(buf,i); A32_DO4(buf,i+4);
 #define A32_DO16(buf)   A32_DO8(buf,0); A32_DO8(buf,8);
 
-static unsigned long adler32 (unsigned long adler, const uint8_t *buf, 
+static unsigned long xd3_adler32 (unsigned long adler, const uint8_t *buf, 
 			      usize_t len)
 {
     unsigned long s1 = adler & 0xffff;
@@ -1451,12 +1451,14 @@
 static void*
 __xd3_alloc_func (void* opaque, size_t items, usize_t size)
 {
+  (void)opaque;
   return malloc (items * (size_t) size);
 }
 
 static void
 __xd3_free_func (void* opaque, void* address)
 {
+  (void)opaque;
   free (address);
 }
 
@@ -1919,7 +1921,7 @@
 
       if (stream->getblk == NULL)
 	{
-	  IF_DEBUG2 (DP(RINT "[getblk] XD3_GETSRCBLK %"Q"u\n", blkno));
+	  IF_DEBUG2 (DP(RINT "[getblk] XD3_GETSRCBLK %"XD3_Q"u\n", blkno));
 	  stream->msg = "getblk source input";
 	  return XD3_GETSRCBLK;
 	}
@@ -1927,13 +1929,13 @@
       ret = stream->getblk (stream, source, blkno);
       if (ret != 0)
 	{
-	  IF_DEBUG2 (DP(RINT "[getblk] app error blkno %"Q"u: %s\n",
+	  IF_DEBUG2 (DP(RINT "[getblk] app error blkno %"XD3_Q"u: %s\n",
 			blkno, xd3_strerror (ret)));
 	  return ret;
 	}
 
-      IF_DEBUG2 (DP(RINT "[getblk] read source block %"Q"u onblk "
-		    "%u blksize %u max_blkno %"Q"u\n", blkno, source->onblk,
+      IF_DEBUG2 (DP(RINT "[getblk] read source block %"XD3_Q"u onblk "
+		    "%u blksize %u max_blkno %"XD3_Q"u\n", blkno, source->onblk,
 		    source->blksize, source->max_blkno));
     }
 
@@ -1943,15 +1945,15 @@
 
       if (source->onblk == source->blksize)
 	{
-	  IF_DEBUG1 (DP(RINT "[getblk] full source blkno %"Q"u: "
-			"source length unknown %"Q"u\n",
+	  IF_DEBUG1 (DP(RINT "[getblk] full source blkno %"XD3_Q"u: "
+			"source length unknown %"XD3_Q"u\n",
 			blkno,
 			xd3_source_eof (source)));
 	}
       else if (!source->eof_known)
 	{
 	  IF_DEBUG1 (DP(RINT "[getblk] eof block has %d bytes; "
-			"source length known %"Q"u\n",
+			"source length known %"XD3_Q"u\n",
 			xd3_bytes_on_srcblk (source, blkno),
 			xd3_source_eof (source)));
 	  source->eof_known = 1;
@@ -2018,7 +2020,7 @@
 		      &stream->src->max_blkno,
 		      &stream->src->onlastblk);
 
-      IF_DEBUG1 (DP(RINT "[set source] size known %"Q"u max_blkno %"Q"u\n",
+      IF_DEBUG1 (DP(RINT "[set source] size known %"XD3_Q"u max_blkno %"XD3_Q"u\n",
 		    source_size, stream->src->max_blkno));
     }
   return ret;
@@ -2223,7 +2225,7 @@
 
 	IF_DEBUG2 ({
 	  static int cnt;
-	  DP(RINT "[iopt copy:%d] pos %"Q"u-%"Q"u addr %"Q"u-%"Q"u size %u\n",
+	  DP(RINT "[iopt copy:%d] pos %"XD3_Q"u-%"XD3_Q"u addr %"XD3_Q"u-%"XD3_Q"u size %u\n",
 		   cnt++,
 		   stream->total_in + inst->pos,
 		   stream->total_in + inst->pos + inst->size,
@@ -2240,7 +2242,7 @@
 
 	IF_DEBUG2 ({
 	  static int cnt;
-	  DP(RINT "[iopt run:%d] pos %"Q"u size %u\n", cnt++, stream->total_in + inst->pos, inst->size);
+	  DP(RINT "[iopt run:%d] pos %"XD3_Q"u size %u\n", cnt++, stream->total_in + inst->pos, inst->size);
 	});
 	break;
       }
@@ -2254,7 +2256,7 @@
 
 	IF_DEBUG2 ({
 	  static int cnt;
-	  DP(RINT "[iopt add:%d] pos %"Q"u size %u\n", cnt++, stream->total_in + inst->pos, inst->size);
+	  DP(RINT "[iopt add:%d] pos %"XD3_Q"u size %u\n", cnt++, stream->total_in + inst->pos, inst->size);
 	});
 
 	break;
@@ -2583,6 +2585,7 @@
 static void
 xd3_iopt_erase (xd3_stream *stream, usize_t pos, usize_t size)
 {
+  (void)size;
   while (! xd3_rlist_empty (& stream->iopt_used))
     {
       xd3_rinst *r = xd3_rlist_back (& stream->iopt_used);
@@ -2864,7 +2867,7 @@
 
       if (stream->flags & XD3_ADLER32)
 	{
-	  a32 = adler32 (1L, stream->next_in, stream->avail_in);
+	  a32 = xd3_adler32 (1L, stream->next_in, stream->avail_in);
 	}
       else
 	{
@@ -3156,7 +3159,7 @@
 
       stream->enc_state = ENC_SEARCH;
 
-      IF_DEBUG2 (DP(RINT "[WINSTART:%"Q"u] input bytes %u offset %"Q"u\n",
+      IF_DEBUG2 (DP(RINT "[WINSTART:%"XD3_Q"u] input bytes %u offset %"XD3_Q"u\n",
 		    stream->current_window, stream->avail_in,
 		    stream->total_in));
       return XD3_WINSTART;
@@ -3298,7 +3301,7 @@
       stream->total_in += (xoff_t) stream->avail_in;
       stream->enc_state = ENC_POSTWIN;
 
-      IF_DEBUG2 (DP(RINT "[WINFINISH:%"Q"u] in=%"Q"u\n",
+      IF_DEBUG2 (DP(RINT "[WINFINISH:%"XD3_Q"u] in=%"XD3_Q"u\n",
 		    stream->current_window,
 		    stream->total_in));
       return XD3_WINFINISH;
@@ -3344,6 +3347,7 @@
   usize_t ipos = 0;
   usize_t n = xd3_min (stream->winsize, input_size);
 
+  (void)is_encode;
   (*output_size) = 0;
 
   stream->flags |= XD3_FLUSH;
@@ -3751,7 +3755,7 @@
       stream->srcwin_cksum_pos - srcpos > src->max_winsize)
     {
       IF_DEBUG2(DP(RINT "[match_setup] rejected due to src->max_winsize "
-		   "distance eof=%"Q"u srcpos=%"Q"u max_winsz=%"Q"u\n",
+		   "distance eof=%"XD3_Q"u srcpos=%"XD3_Q"u max_winsz=%"XD3_Q"u\n",
 		   xd3_source_eof (src),
 		   srcpos, src->max_winsize));
       goto bad;
@@ -3761,8 +3765,8 @@
    * will experience XD3_TOOFARBACK at the first xd3_getblk call
    * because the input may have advanced up to one block beyond the
    * actual EOF. */
-  IF_DEBUG2(DP(RINT "[match_setup] %"Q"u srcpos %"Q"u, "
-	       "src->max_winsize %"Q"u\n",
+  IF_DEBUG2(DP(RINT "[match_setup] %"XD3_Q"u srcpos %"XD3_Q"u, "
+	       "src->max_winsize %"XD3_Q"u\n",
 	       stream->total_in + stream->input_position,
 	       srcpos, src->max_winsize));
 
@@ -3817,7 +3821,7 @@
 	}
 
       IF_DEBUG2(DP(RINT
-		   "[match_setup] srcpos %"Q"u (tgtpos %"Q"u) "
+		   "[match_setup] srcpos %"XD3_Q"u (tgtpos %"XD3_Q"u) "
 		   "unrestricted maxback %u maxfwd %u\n",
 		   srcpos,
 		   stream->total_in + stream->input_position,
@@ -3853,7 +3857,7 @@
 	}
 
       IF_DEBUG2(DP(RINT
-		   "[match_setup] srcpos %"Q"u (tgtpos %"Q"u) "
+		   "[match_setup] srcpos %"XD3_Q"u (tgtpos %"XD3_Q"u) "
 		   "restricted maxback %u maxfwd %u\n",
 		   srcpos,
 		   stream->total_in + stream->input_position,
@@ -3958,7 +3962,7 @@
 	    {
 	      if (ret == XD3_TOOFARBACK)
 		{
-		  IF_DEBUG2(DP(RINT "[maxback] %"Q"u TOOFARBACK: %u INP %"Q"u CKSUM %"Q"u\n",
+		  IF_DEBUG2(DP(RINT "[maxback] %"XD3_Q"u TOOFARBACK: %u INP %"XD3_Q"u CKSUM %"XD3_Q"u\n",
 			       tryblk, stream->match_back,
 			       stream->total_in + stream->input_position,
 			       stream->srcwin_cksum_pos));
@@ -3980,7 +3984,7 @@
 
 	  tryrem = xd3_min (tryoff, stream->match_maxback - stream->match_back);
 
-	  IF_DEBUG2(DP(RINT "[maxback] maxback %u trysrc %"Q"u/%u tgt %u tryrem %u\n",
+	  IF_DEBUG2(DP(RINT "[maxback] maxback %u trysrc %"XD3_Q"u/%u tgt %u tryrem %u\n",
 		       stream->match_maxback, tryblk, tryoff, streamoff, tryrem));
 
 	  /* TODO: This code can be optimized similar to xd3_match_forward() */
@@ -4019,7 +4023,7 @@
 	{
 	  if (ret == XD3_TOOFARBACK)
 	    {
-	      IF_DEBUG2(DP(RINT "[maxfwd] %"Q"u TOOFARBACK: %u INP %"Q"u CKSUM %"Q"u\n",
+	      IF_DEBUG2(DP(RINT "[maxfwd] %"XD3_Q"u TOOFARBACK: %u INP %"XD3_Q"u CKSUM %"XD3_Q"u\n",
 			   tryblk, stream->match_fwd,
 			   stream->total_in + stream->input_position,
 			   stream->srcwin_cksum_pos));
@@ -4058,7 +4062,7 @@
  donefwd:
   stream->match_state = MATCH_SEARCHING;
 
-  IF_DEBUG2(DP(RINT "[extend match] input %"Q"u srcpos %"Q"u len %u\n",
+  IF_DEBUG2(DP(RINT "[extend match] input %"XD3_Q"u srcpos %"XD3_Q"u len %u\n",
 	       stream->input_position + stream->total_in,
 	       stream->match_srcpos,
 	       stream->match_fwd));
@@ -4114,7 +4118,7 @@
 
       IF_DEBUG2 ({
 	static int x = 0;
-	DP(RINT "[source match:%d] length %u <inp %"Q"u %"Q"u>  <src %"Q"u %"Q"u> (%s) [ %u bytes ]\n",
+	DP(RINT "[source match:%d] length %u <inp %"XD3_Q"u %"XD3_Q"u>  <src %"XD3_Q"u %"XD3_Q"u> (%s) [ %u bytes ]\n",
 	   x++,
 	   match_length,
 	   stream->total_in + target_position,
@@ -4154,6 +4158,7 @@
 		   usize_t scksum,
 		   usize_t pos)
 {
+  (void)scksum;
   /* If we are maintaining previous duplicates. */
   if (stream->small_prev)
     {
@@ -4441,13 +4446,13 @@
 	    }
 
 	  IF_DEBUG1 (DP(RINT
-			"[srcwin_move_point] async getblk return for %"Q"u: %s\n",
+			"[srcwin_move_point] async getblk return for %"XD3_Q"u: %s\n",
 			blkno, xd3_strerror (ret)));
 	  return ret;
 	}
 
       IF_DEBUG1 (DP(RINT
-		    "[srcwin_move_point] block %"Q"u T=%"Q"u S=%"Q"u L=%"Q"u EOF=%"Q"u %s\n",
+		    "[srcwin_move_point] block %"XD3_Q"u T=%"XD3_Q"u S=%"XD3_Q"u L=%"XD3_Q"u EOF=%"XD3_Q"u %s\n",
 		    blkno,
 		    stream->total_in + stream->input_position,
 		    stream->srcwin_cksum_pos,
@@ -4460,7 +4465,7 @@
       if (blkpos < (ssize_t) stream->smatcher.large_look)
 	{
 	  stream->srcwin_cksum_pos = (blkno + 1) * stream->src->blksize;
-	  IF_DEBUG2 (DP(RINT "[srcwin_move_point] continue (end-of-block): %"Q"u\n", blkpos));
+	  IF_DEBUG2 (DP(RINT "[srcwin_move_point] continue (end-of-block): %"XD3_Q"u\n", blkpos));
 	  continue;
 	}
 
@@ -4517,8 +4522,8 @@
     ((stream->srcwin_cksum_pos - target_cksum_pos) & stream->src->maskby);
   
   IF_DEBUG2 (DP(RINT
-		"[srcwin_move_point] finished T=%"Q"u "
-		"S=%"Q"u L=%"Q"u EOF=%"Q"u %s again in %u\n",
+		"[srcwin_move_point] finished T=%"XD3_Q"u "
+		"S=%"XD3_Q"u L=%"XD3_Q"u EOF=%"XD3_Q"u %s again in %u\n",
 		stream->total_in + stream->input_position,
 		stream->srcwin_cksum_pos,
 		target_cksum_pos,
diff -Naur xdelta3-3.0.11.org/xdelta3.h xdelta3-3.0.11/xdelta3.h
--- xdelta3-3.0.11.org/xdelta3.h	2016-01-08 07:37:14.000000000 +0100
+++ xdelta3-3.0.11/xdelta3.h	2019-11-06 15:01:40.571396472 +0100
@@ -24,9 +24,15 @@
 #ifndef _XDELTA3_H_
 #define _XDELTA3_H_
 
+#ifndef _POSIX_SOURCE
 #define _POSIX_SOURCE
+#endif
+#ifndef _ISOC99_SOURCE
 #define _ISOC99_SOURCE
+#endif
+#ifndef _C99_SOURCE
 #define _C99_SOURCE
+#endif
 
 #if HAVE_CONFIG_H
 #include "config.h"
@@ -165,17 +171,17 @@
 typedef uint64_t xoff_t;
 /* Note: The following generates benign warnings in a mingw
  * cross-compiler */
-#define Q "I64"
+#define XD3_Q "I64"
 #elif SIZEOF_UNSIGNED_LONG == 8
 typedef unsigned long xoff_t;
-#define Q "l"
+#define XD3_Q "l"
 #elif SIZEOF_SIZE_T == 8
 typedef size_t xoff_t;
-#define Q "z"
+#define XD3_Q "z"
 #elif SIZEOF_UNSIGNED_LONG_LONG == 8
 typedef unsigned long long xoff_t;
-#define Q "ll"
-#endif /* #define Q */
+#define XD3_Q "ll"
+#endif /* #define XD3_Q */
 
 #define SIZEOF_XOFF_T 8
 
@@ -190,19 +196,19 @@
 #endif /* xoff_t is 32 bits */
 
 #define SIZEOF_XOFF_T 4
-#define Q
+#define XD3_Q
 #endif /* 64 vs 32 bit xoff_t */
 
 /* Note: This gets modified in the 64bithash branch. */
 #define SIZEOF_USIZE_T 4
 
 #if SIZEOF_SIZE_T == 4
-#define Z "z"
+#define XD3_Z "z"
 #elif SIZEOF_SIZE_T == 8
 #ifdef _WIN32
-#define Z "I64"
+#define XD3_Z "I64"
 #else /* !_WIN32 */
-#define Z "z"
+#define XD3_Z "z"
 #endif /* Windows or not */
 #else
 #error Bad configure script
