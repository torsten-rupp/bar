# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/barcontrol/Makefile.in,v $
# $Revision: 1.22 $
# $Author: torsten $
# Contents: Makefile for barcontrol
# Systems: all
#
# ----------------------------------------------------------------------------

#---------------------------------- settings ---------------------------------

PLATFORM           = @PLATFORM@

ENABLE_GUI         = @ENABLE_GUI@

#------------------------------------ paths ----------------------------------

SOURCE_DIR         = $(abspath @srcdir@)

SWT_DIR            = @SWT_DIR@
LAUNCH4J_DIR       = @LAUNCH4J_DIR@

ifeq ($(DESTDIR),)
INSTALL_DIR        = $(if $(prefix),$(prefix),@INSTALL_DIR@)
INSTALL_BIN_DIR    = $(if $(bindir),$(bindir),@INSTALL_BIN_DIR@)
INSTALL_LOCALE_DIR = $(if $(datadir),$(datadir)/locale,@LOCALE_DIR@)
INSTALL_ETC_DIR    = $(if $(sysconfdir),$(sysconfdir),/etc)
INSTALL_CONFIG_DIR = $(if $(sysconfdir),$(sysconfdir)/bar,@CONFIG_DIR@)
INSTALL_MAN_DIR    = $(if $(mandir),$(mandir),@MAN_DIR@)
INSTALL_TLS_DIR    = @TLS_DIR@
else
INSTALL_DIR        = @INSTALL_DIR@
INSTALL_BIN_DIR    = @INSTALL_BIN_DIR@
INSTALL_LOCALE_DIR = @LOCALE_DIR@
INSTALL_ETC_DIR    = /etc
INSTALL_CONFIG_DIR = @CONFIG_DIR@
INSTALL_MAN_DIR    = @MAN_DIR@
endif
INSTALL_TLS_DIR    = @TLS_DIR@

#--------------------------------- tool chain --------------------------------

JAVA_DATA_MODEL          = @JAVA_DATA_MODEL@

JAVA                     = @JAVA@
JAVA_FLAGS               = @JAVA_FLAGS@ -Xmx128m -enableassertions
# -Djavax.net.debug=all

JAVAC                    = @JAVAC@
JAVAC_FLAGS              = @JAVAC_FLAGS@ -source 1.6 -target 1.6
# -Xlint

JAR                      = @JAR@

XGETTEXT                 = @XGETTEXT@
XGETTEXT_FLAGS           = -L java -k -ktr -kmarktr -ktrn:1,2 -ktrc:1c,2 -ktrnc:1c,2,3
MSGMERGE                 = @MSGMERGE@
MSGFMT                   = @MSGFMT@

SWT_JAR_LINUX            = $(SOURCE_DIR)/jars/linux/swt-4.4.jar
SWT_JAR_LINUX_64         = $(SOURCE_DIR)/jars/linux/swt-4.4_64.jar
SWT_JAR_SOLARIS          = $(SOURCE_DIR)/jars/solaris/swt-4.4.jar
SWT_JAR_MACOSX           = $(SOURCE_DIR)/jars/macosx/swt-4.4.jar
SWT_JAR_MACOSX_64        = $(SOURCE_DIR)/jars/macosx/swt-4.4_64.jar
SWT_JAR_WINDOWS          = $(SOURCE_DIR)/jars/windows/swt-4.4.jar
SWT_JAR_WINDOWS_64       = $(SOURCE_DIR)/jars/windows/swt-4.4_64.jar

ifneq ($(SWT_DIR),)
SWT_JARS                 = $(SWT_DIR)/swt.jar
else
ifeq ($(PLATFORM),LINUX)
ifeq ($(JAVA_DATA_MODEL),64)
SWT_JARS                 = $(SWT_JAR_LINUX_64)
else
SWT_JARS                 = $(SWT_JAR_LINUX)
endif
endif
ifeq ($(PLATFORM),SOLARIS)
SWT_JARS                 = $(SWT_JAR_SOLARIS)
endif
ifeq ($(PLATFORM),MAC_OSX)
ifeq ($(JAVA_DATA_MODEL),64)
SWT_JARS                 = $(SWT_JAR_MACOSX_64)
else
SWT_JARS                 = $(SWT_JAR_MACOSX)
endif
endif
ifeq ($(PLATFORM),WINDOWS)
ifeq ($(JAVA_DATA_MODEL),64)
SWT_JARS                 = $(SWT_JAR_WINDOWS_64)
else
SWT_JARS                 = $(SWT_JAR_WINDOWS)
endif
endif
endif

# Note: 3.9.0 require Java 1.8
#JLINE_JARS               = $(SOURCE_DIR)/jars/jline-terminal-3.9.0.jar
JLINE_JARS               = $(SOURCE_DIR)/jars/jline-2.14.6.jar
GETTEXT_JARS             = $(SOURCE_DIR)/jars/gettext-commons-0.9.6.jar
BOUNCY_CASTLE_JARS       = $(SOURCE_DIR)/jars/bcprov-jdk15on-155.jar \
                           $(SOURCE_DIR)/jars/bcpkix-jdk15on-155.jar

CLASSPATH                = $(subst $() $(),:,classes $(SWT_JARS) $(JLINE_JARS) $(GETTEXT_JARS) $(BOUNCY_CASTLE_JARS))

ENVIRONMENT              = SWT_GTK3=0

BARCONTROL_OPTIONS       = --config=/tmp/barcontrol.cfg --ca-file=../bar-ca.pem --role=expert
BARCONTROL_SLAVE_OPTIONS = --config=/tmp/barcontrol.cfg --ca-file=../bar-ca.pem --role=expert

#---------------------------------- commands----------------------------------

CAT        = cat
CD         = cd
CHMOD      = chmod
CP         = cp
DIFF       = diff
ECHO       = echo
ECHO_NO_LF = echo -n
GREP       = grep
FIND       = find
INSTALL    = @INSTALL@
MKDIR      = mkdir
PERL       = @PERL@
RMDIR      = rmdir
RMF        = rm -f
RMRF       = rm -rf
SED        = sed
TAR        = tar
TOUCH      = touch
UNZIP      = unzip
XARGS      = xargs

#------------------------ specific variables/settings ------------------------

VERSION_MAJOR := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) MAJOR|$(SED) 's/MAJOR=//g')
VERSION_MINOR := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) MINOR|$(SED) 's/MINOR=//g')
VERSION_PATCH := $(shell $(CAT) $(SOURCE_DIR)/../version|$(GREP) PATCH|$(SED) 's/PATCH=//g')
VERSION       := $(VERSION_MAJOR).$(VERSION_MINOR)$(VERSION_PATCH)

# languages
LANGUAGES = de jp

# ----------------------------------------------------------------------------

TEST_SERVER_PORT                 = 39909
TEST_SERVER_SSL_PORT             = 39910

# ----------------------------------------------------------------------------

COLUMNS = $(shell tput cols)
COLUMNS ?= 80

# log redirection
LOG = $(if $(QUIET),</dev/null 1>/dev/null)

# helper function to output info lines
functionInfoBegin = $(ECHO_NO_LF) >&2 "$1..."; $(ECHO) "$1" $(if $(QUIET),1>/dev/null)
functionInfoEnd = $(ECHO) >&2 "$1"
functionInfoHeader = $(ECHO) `$(ECHO) "--- $1 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" | $(HEAD) -c $(COLUMNS)` $(if $(QUIET),1>/dev/null)
functionInfoFooter = $(ECHO) `$(ECHO) "---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" | $(HEAD) -c $(COLUMNS)` $(if $(QUIET),1>/dev/null)

# helper function for test names
functionTestNames = $(foreach name,$1,$(name) $(addprefix $(name),-debug -gcov -gprof -valgrind))

# helper function to quote and join strings
functionJoin = $(subst $() $(),$3,$(foreach i,$1,$2$(i)$2))

# helper function to execute binary
functionExec = \
  $(EXE_PREFIX)$1

# helper function to check valid exitcode
# call functionTestCheckExitcode,<min. valid exitcode>,<max. valid exitcode>,<command>
functionTestCheckExitcode = \
  $3; rc=$$?; if test $$rc -lt $1 -o $$rc -gt $2; then \
    $(ECHO) >&2 "ERROR: wrong exit code. Expected $1..$2, got $$rc"; \
    exit 1; \
  fi

#---------------------------------- rules ------------------------------------

# source search paths
vpath %.java $(SOURCE_DIR)

# compile Java sources
.NOTPARALLEL: classes/%.class
classes/%.class: $(SOURCE_DIR)/src/%.java src/BARException.java
	$(INSTALL) -d classes
ifneq ($(JAVAC),)
	$(JAVAC) $(JAVAC_FLAGS) \
          -d classes \
          -classpath $(CLASSPATH) \
          $(SOURCE_DIR)/src/*.java \
          $(SOURCE_DIR)/src/utils/*.java \
          $(SOURCE_DIR)/src/widgets/*.java
else
	@$(ECHO) "ERROR: no 'javac' command - cannot compile Java sources";
endif
classes/%.class: $(SOURCE_DIR)/src/utils/%.java
	$(INSTALL) -d classes
ifneq ($(JAVAC),)
	$(JAVAC) $(JAVAC_FLAGS) \
          -d classes \
          -classpath $(CLASSPATH) \
          $(SOURCE_DIR)/src/*.java \
          $(SOURCE_DIR)/src/utils/*.java \
          $(SOURCE_DIR)/src/widgets/*.java
else
	@$(ECHO) "ERROR: no 'javac' command - cannot compile Java sources";
endif
classes/%.class: $(SOURCE_DIR)/src/widgets/%.java
	$(INSTALL) -d classes
ifneq ($(JAVAC),)
	$(JAVAC) $(JAVAC_FLAGS) \
          -d classes \
          -classpath $(CLASSPATH) \
          $(SOURCE_DIR)/src/*.java \
          $(SOURCE_DIR)/src/utils/*.java \
          $(SOURCE_DIR)/src/widgets/*.java
else
	@$(ECHO) "ERROR: no 'javac' command - cannot compile Java sources";
endif

#--------------------------------- objects -----------------------------------

SOURCES        = src/BARControl.java \
                 src/BARWidgets.java \
                 src/TabStatus.java \
                 src/TabJobs.java \
                 src/TabRestore.java \
                 src/ServerSettings.java \
                 src/BARServer.java \
                 src/Settings.java \
                 src/Background.java \
                 src/ExitCodes.java \
                 \
                 src/utils/ArrayListCache.java \
                 src/utils/Dprintf.java \
                 src/utils/Option.java \
                 src/utils/OptionEnumeration.java \
                 src/utils/OptionSpecial.java \
                 src/utils/Options.java \
                 src/utils/SettingUtils.java \
                 src/utils/StringParser.java \
                 src/utils/StringUtils.java \
                 src/widgets/BusyDialog.java \
                 src/widgets/Dialogs.java \
                 src/widgets/Pane.java \
                 src/widgets/ProgressBar.java \
                 src/widgets/Separator.java \
                 src/widgets/TableLayout.java \
                 src/widgets/TableLayoutData.java \
                 src/widgets/Widgets.java \
                 \
                 src/DataModel.java \

OTHER_SOURCES  = barcontrol.in \
                 barcontrol.cmd.in \
                 barcontrol.xml \
                 jar.txt \

OBJECTS        = $(foreach z,$(SOURCES),$(addprefix classes/,$(basename $(notdir $z)).class)) \
                 classes/BARException.class \
                 classes/Config.class \
                 \
                 $(foreach z,$(LANGUAGES),classes/app/i18n/Messages_$z.class) \

INTERMEDIATE   = src/BARException.java \
                 barcontrol.jar \
                 barcontrol-linux.jar \
                 barcontrol-linux_64.jar \
                 barcontrol-solaris.jar \
                 barcontrol-macos.jar \
                 barcontrol-macos_64.jar \
                 barcontrol-windows.jar \
                 barcontrol-windows_64.jar \

TARGETS        = barcontrol \
                 $(if $(LAUNCH4J),barcontrol@EXEEXT@,barcontrol.cmd) \

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean help
all: $(TARGETS)

clean: \
  clean_jars
	$(RMF) $(OBJECTS)
	$(RMF) $(INTERMEDIATE)
	$(RMRF) classes
	$(RMF) $(TARGETS)
	$(RMRF) tmp

distclean: \
  clean
	$(RMF) Makefile
	$(RMF) $(SOURCE_DIR)/src/Config.java
	$(RMF) barcontrol
	$(RMF) barcontrol@EXEEXT@ barcontrol@SHELLEXT@

help:
	@$(ECHO) "Help:"
	@$(ECHO) ""
	@$(ECHO) "  all"
	@$(ECHO) "  clean"
	@$(ECHO) "  distclean"
	@$(ECHO) "  help"
	@$(ECHO) ""
	@$(ECHO) "  jars"
	@$(ECHO) "  clean_jars"
	@$(ECHO) ""
	@$(ECHO) "  compile"
	@$(ECHO) ""
	@$(ECHO) "  test"
	@$(ECHO) ""
	@$(ECHO) "  poeditde"
	@$(ECHO) "  poeditjp"
	@$(ECHO) ""
	@$(ECHO) "  run [O|OPTIONS=<options>]"
	@$(ECHO) "  runde [O|OPTIONS=<options>]"
	@$(ECHO) "  runjp [O|OPTIONS=<options>]"
	@$(ECHO) "  rundebug [O|OPTIONS=<options>]"
	@$(ECHO) "  runxdebug [O|OPTIONS=<options>]"
	@$(ECHO) "  runxxdebug [O|OPTIONS=<options>]"
	@$(ECHO) ""
	@$(ECHO) "  rundev[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) "  rundevdebug[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) "  rundevxdebug[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) "  rundevxxdebug[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) ""
	@$(ECHO) "  rundev_slave[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) "  rundevdebug_slave[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) "  rundevxdebug_slave[-basic|normal|expert] [O|OPTIONS=<options>]"
	@$(ECHO) "  rundev_slave_pairing [O|OPTIONS=<options>]"
	@$(ECHO) ""
	@$(ECHO) "  runjar  [O|OPTIONS=<options>]"
	@$(ECHO) ""
	@$(ECHO) "  dist"

# create dependencies
.PHONY: depend
depend:

# error definition
src/BARException.java: $(SOURCE_DIR)/../errors.def $(SOURCE_DIR)/../errors.pl Makefile
	$(INSTALL) -d $(@D)
	$(PERL) $(SOURCE_DIR)/../errors.pl < $^ -j $@ --java-class-name BARException --tr BARControl.tr

.PHONY: compile c
compile c: $(OBJECTS)

# ----------------------------------------------------------------------------

# i18n
.PHONY: i18n po
i18n po: \
  $(SOURCE_DIR)/po/german.po \
  $(SOURCE_DIR)/po/japanese.po

$(SOURCE_DIR)/po/barcontrol.pot: $(SOURCE_DIR)/src/*.java
	$(INSTALL) -d $(@D)
	$(XGETTEXT) $(XGETTEXT_FLAGS) -o $@ src/*.java

$(SOURCE_DIR)/po/german.po: $(SOURCE_DIR)/po/barcontrol.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ po/barcontrol.pot
	$(TOUCH) $@

$(SOURCE_DIR)/po/japanese.po: $(SOURCE_DIR)/po/barcontrol.pot
	$(INSTALL) -d $(@D)
	$(MSGMERGE) -U $@ po/barcontrol.pot
	$(TOUCH) $@

classes/app/i18n/Messages_de.class: $(SOURCE_DIR)/po/german.po
	$(INSTALL) -d classes
	$(MSGFMT) --java2 -d classes -r app.i18n.Messages -l de $(SOURCE_DIR)/po/german.po

classes/app/i18n/Messages_jp.class: $(SOURCE_DIR)/po/japanese.po
	$(INSTALL) -d classes
	$(MSGFMT) --java2 -d classes -r app.i18n.Messages -l jp $(SOURCE_DIR)/po/japanese.po

.PHONE: poeditde
poeditde:
	GTK_IM_MODULE= poedit $(SOURCE_DIR)/po/german.po

.PHONE: poeditjp
poeditjp:
	poedit $(SOURCE_DIR)/po/japanese.po

# ----------------------------------------------------------------------------

# tests
.PHONY: test
.PHONY: test
test: compile
	@$(ECHO_NO_LF) "Test 1: basic..."
	@$(MAKE) \
          BARCONTROL_OPTIONS="$(TEST_OPTIONS) localhost --port=$(TEST_SERVER_PORT) --tls-port=0" \
	  test_basic \
          ;

test_basic:
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --help $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --version $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --ping $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --list $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --index-database-info $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --index-database-entities-list $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --index-database-entities-list home $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -n home $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --index-database-storages-list home $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -a home $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --index-database-entries-list home $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --suspend $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --continue $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -s $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -c $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --pause=60h $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --pause=60m $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --pause=60s $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -t=60h $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -t=60m $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 -t=60s $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --maintenance=60h $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --maintenance=60m $(LOG)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --maintenance=60s $(LOG)
	$(call functionTestCheckExitcode,1,1,$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --not-existing-option) $(LOG)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif

# ----------------------------------------------------------------------------

# jars
.PHONY: jars clean_jars
jars: \
  barcontrol.jar \
  barcontrol-linux.jar \
  barcontrol-linux_64.jar \
  barcontrol-solaris.jar \
  barcontrol-macosx.jar \
  barcontrol-macosx_64.jar \
  barcontrol-windows.jar \
  barcontrol-windows_64.jar

clean_jars:
	$(RMF) barcontrol.jar
	$(RMF) barcontrol-linux.jar
	$(RMF) barcontrol-linux_64.jar
	$(RMF) barcontrol-solaris.jar
	$(RMF) barcontrol-macosx.jar
	$(RMF) barcontrol-macosx_64.jar
	$(RMF) barcontrol-windows.jar
	$(RMF) barcontrol-windows_64.jar

# create jars
barcontrol.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-linux.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_LINUX) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_LINUX) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-linux_64.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_LINUX_64) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_LINUX_64) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-solaris.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_LINUX) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_SOLARIS) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-macosx.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_MACOSX) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_MACOSX) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-macosx_64.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_MACOSX_64) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_MACOSX_64) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-windows.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_WINDOWS) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_WINDOWS) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

barcontrol-windows_64.jar: \
  $(SOURCE_DIR)/jar.txt \
  $(OBJECTS) \
  $(SWT_JAR_WINDOWS_64) \
  $(JLINE_JARS) \
  $(GETTEXT_JARS) \
  $(BOUNCY_CASTLE_JARS) \
  $(SOURCE_DIR)/images/*.png
ifneq ($(JAR),)
	$(INSTALL) -d tmp/$@
	($(CD) tmp/$@; $(UNZIP) $(SWT_JAR_WINDOWS_64) 1>/dev/null; $(RMRF) META-INF)
	($(CD) tmp/$@; $(foreach i,$(JLINE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(GETTEXT_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) tmp/$@; $(foreach i,$(BOUNCY_CASTLE_JARS),$(UNZIP) $i 1>/dev/null; $(RMRF) META-INF;))
	($(CD) classes; $(FIND) . -type f -name '*.class')|$(TAR) cf - -C classes -T -|($(CD) tmp/$@; $(TAR) xf -)
	$(INSTALL) -d tmp/$@/images
	$(CP) $(SOURCE_DIR)/images/*.png tmp/$@/images
	($(CD) tmp/$@; $(JAR) cmf $(SOURCE_DIR)/jar.txt ../../$@ *)
	$(RMRF) tmp/$@
else
	@$(ECHO) "ERROR: no 'jar' command - cannot create $@"
endif

# create Unix start script
barcontrol: $(SOURCE_DIR)/barcontrol.in barcontrol-linux.jar barcontrol-linux_64.jar
	$(CAT) $(SOURCE_DIR)/barcontrol.in | \
        ( \
          while IFS="" read line; do \
            line=`$(ECHO) "$$line"|$(SED) 's|\@JAVA\@|$(JAVA)|g'`; \
            line=`$(ECHO) "$$line"|$(SED) 's|\@JAVA_FLAGS\@|$(JAVA_FLAGS)|g'`; \
            $(ECHO) "$$line"; \
          done; \
        ) > $@
	$(CHMOD) 775 $@

ifneq ($(LAUNCH4J),)
# create Windows executable
barcontrol@EXEEXT@: barcontrol-windows.jar
	$(LAUNCH4J) barcontrol.xml
else
# create Windows start script
barcontrol.cmd: $(SOURCE_DIR)/barcontrol.cmd.in barcontrol-windows.jar
	$(CAT) $(SOURCE_DIR)/barcontrol.cmd.in | \
        ( \
          while IFS="" read line; do \
            line=`$(ECHO) "$$line"|$(SED) 's|\@JAVA\@|$(JAVA)|g'`; \
            line=`$(ECHO) "$$line"|$(SED) 's|\@JAVA_FLAGS\@|$(JAVA_FLAGS)|g'`; \
            $(ECHO) "$$line"; \
          done; \
        ) > $@
	$(CHMOD) 775 $@
endif

# ----------------------------------------------------------------------------

# run
.PHONY: run runde runjp rundebug runxdebug runxxdebug
run: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
runde: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -Duser.language=de -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevde: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -Duser.language=de -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) $(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
runjp: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -Duser.language=jp -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevjp: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -Duser.language=jp -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) $(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundebug: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --debug=1 $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
runxdebug: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --debug=2 $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
runxxdebug: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --debug=3 $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif

.PHONY: rundev rundevd rundevdebug rundevxdebug rundevxxdebug rundev_slave rundevdebug_slave rundevxdebug_slave rundev_slave_pairing
.PHONY: rundev-basic rundevdebug-basic rundevxdebug-basic rundevxxdebug-basic rundev_slave-basic rundevdebug_slave-basic rundevxdebug_slave-basic rundevxxdebug_slave-basic
.PHONY: rundev-normal rundevdebug-normal rundevxdebug-normal rundevxxdebug-normal rundev_slave-normal rundevdebug_slave-normal rundevxdebug_slave-normal rundevxxdebug_slave-normal
.PHONY: rundev-expert rundevdebug-expert rundevxdebug-expert rundevxxdebug-expert rundev_slave-expert rundevdebug_slave-expert rundevxdebug_slave-expert rundevxxdebug_slave-expert
rundev: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) $(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundev-basic:
	$(MAKE) rundev OPTIONS="$(OPTIONS) --role=basic"
rundev-normal:
	$(MAKE) rundev OPTIONS="$(OPTIONS) --role=normal"
rundev-expert:
	$(MAKE) rundev OPTIONS="$(OPTIONS) --role=expert"

rundevdebug rundevd: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --debug=1 $(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevdebug-basic rundevd-basic:
	$(MAKE) rundevdebug OPTIONS="$(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --role=basic"
rundevdebug-normal rundevd-normal:
	$(MAKE) rundevdebug OPTIONS="$(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --role=normal"
rundevdebug-expert rundevd-expert:
	$(MAKE) rundevdebug OPTIONS="$(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --role=expert"

rundevxdebug: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --debug=2 $(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevxdebug-basic:
	$(MAKE) rundevxdebug OPTIONS="$(OPTIONS) --role=basic"
rundevxdebug-normal:
	$(MAKE) rundevxdebug OPTIONS="$(OPTIONS) --role=normal"
rundevxdebug-expert:
	$(MAKE) rundevxdebug OPTIONS="$(OPTIONS) --role=expert"

rundevxxdebug: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_OPTIONS) --debug=3 $(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevxxdebug-basic:
	$(MAKE) rundevxxdebug OPTIONS="$(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --role=basic"
rundevxxdebug-normal:
	$(MAKE) rundevxxdebug OPTIONS="$(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --role=normal"
rundevxxdebug-expert:
	$(MAKE) rundevxxdebug OPTIONS="$(OPTIONS) --port=$(TEST_SERVER_PORT) --tls-port=0 --role=expert"

rundev_slave: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_SLAVE_OPTIONS) $(OPTIONS) --port=39911 --tls-port=0 $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundev_slave-basic:
	$(MAKE) rundev OPTIONS="$(OPTIONS) --role=basic"
rundev_slave-normal:
	$(MAKE) rundev OPTIONS="$(OPTIONS) --role=normal"
rundev_slave-expert:
	$(MAKE) rundev OPTIONS="$(OPTIONS) --role=expert"

rundevdebug_slave rundevd_slave: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_SLAVE_OPTIONS) --port=39911 --tls-port=0 --debug=1 $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevdebug_slave-basic rundevd_slave-basic:
	$(MAKE) rundevdebug OPTIONS="$(OPTIONS) --role=basic"
rundevdebug_slave-normal rundevd_slave-normal:
	$(MAKE) rundevdebug OPTIONS="$(OPTIONS) --role=normal"
rundevdebug_slave-expert rundevd_slave-expert:
	$(MAKE) rundevdebug OPTIONS="$(OPTIONS) --role=expert"

rundevxdebug_slave: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_SLAVE_OPTIONS) --port=39911 --tls-port=0 --debug=2 $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevxdebug_slave-basic:
	$(MAKE) rundevxdebug OPTIONS="$(OPTIONS) --role=basic"
rundevxdebug_slave-normal:
	$(MAKE) rundevxdebug OPTIONS="$(OPTIONS) --role=normal"
rundevxdebug_slave-expert:
	$(MAKE) rundevxdebug OPTIONS="$(OPTIONS) --role=expert"

rundevxxdebug_slave: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_SLAVE_OPTIONS) --port=39911 --tls-port=0 --debug=3 $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif
rundevxxdebug_slave-basic:
	$(MAKE) rundevxxdebug OPTIONS="$(OPTIONS) --role=basic"
rundevxxdebug_slave-normal:
	$(MAKE) rundevxxdebug OPTIONS="$(OPTIONS) --role=normal"
rundevxxdebug_slave-expert:
	$(MAKE) rundevxxdebug OPTIONS="$(OPTIONS) --role=expert"

rundev_slave_pairing: $(OBJECTS)
ifneq ($(JAVA),)
	$(ENVIRONMENT) $(JAVA) $(JAVA_FLAGS) -classpath $(CLASSPATH) BARControl $(BARCONTROL_SLAVE_OPTIONS) $(OPTIONS) --port=39911 --tls-port=0 --pair-master $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif

# run with jar file
ifneq ($(JAVA),)
runjar: barcontrol
	./barcontrol $(OPTIONS) $(O)
else
	@$(ECHO) "ERROR: no 'java' command - cannot execute BARControl"
endif

# ----------------------------------------------------------------------------
# install/uninstall
# Note: prefix is used for temporary installations

.PHONY: install uninstall

install: \
  $(TARGETS) \
  $(if $(findstring $(ENABLE_GUI),yes),$(if $(findstring $(PLATFORM),LINUX),barcontrol-linux.jar barcontrol-linux_64.jar) \
                                       $(if $(findstring $(PLATFORM),WINDOWS),$(if $(LAUNCH4J),barcontrol.exe) barcontrol-windows.jar barcontrol-windows_64.jar) \
                                       $(if $(findstring $(PLATFORM),SOLARIS),barcontrol-solaris.jar) \
                                       $(if $(findstring $(PLATFORM),MAC_OSX),barcontrol-macosx.jar barcontrol-macosx_64.jar) \
  )
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_BIN_DIR)"
ifeq ($(ENABLE_GUI),yes)
ifeq ($(PLATFORM),LINUX)
	$(INSTALL) barcontrol \
                   barcontrol-linux.jar \
                   barcontrol-linux_64.jar \
                   "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
ifeq ($(PLATFORM),WINDOWS)
	$(INSTALL) $(if $(LAUNCH4J),barcontrol.exe, \
                                    barcontrol.cmd barcontrol-windows.jar barcontrol-windows_64.jar \
                    ) \
                   "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
ifeq ($(PLATFORM),SOLARIS)
	$(INSTALL) barcontrol \
                   barcontrol-solaris.jar \
                   "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
ifeq ($(PLATFORM),MAC_OSX)
	$(INSTALL) barcontrol \
                   barcontrol-macosx.jar \
                   barcontrol-macosx_64.jar \
                   "$(DESTDIR)$(INSTALL_BIN_DIR)"
endif
endif

# uninstall all
uninstall:
	$(if $(findstring $(ENABLE_GUI),yes),$(RMF) "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.jar" \
                                                    "$(DESTDIR)$(INSTALL_BIN_DIR)/barcontrol.exe"; \
        ) \

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist:
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/barcontrol
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol \
                   Makefile.in \
                   barcontrol.cfg
	#
	$(INSTALL) -d $(DIRECTORY)/barcontrol
	$(CP) --parents \
              $(sort $(SOURCES)) \
              $(sort $(OTHER_SOURCES)) \
              src/Config.java.in \
              $(DIRECTORY)/barcontrol
	#
	$(INSTALL) -d $(DIRECTORY)/barcontrol/images
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/images \
                   images/*.png
	#
	$(INSTALL) -d $(DIRECTORY)/barcontrol/po
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/po \
                   $(sort po/*.pot \
                          po/*.po \
                   )
	#
	$(INSTALL) -d $(DIRECTORY)/barcontrol/jars
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/jars \
                   jars/*.jar
	$(INSTALL) -d $(DIRECTORY)/barcontrol/jars/linux
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/jars/linux \
                   jars/linux/*.jar
	$(INSTALL) -d $(DIRECTORY)/barcontrol/jars/solaris
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/jars/solaris \
                   jars/solaris/*.jar
	$(INSTALL) -d $(DIRECTORY)/barcontrol/jars/macosx
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/jars/macosx \
                   jars/macosx/*.jar
	$(INSTALL) -d $(DIRECTORY)/barcontrol/jars/windows
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/barcontrol/jars/windows \
                   jars/windows/*.jar
else
	@$(ECHO) "Please call 'make dist' from top-level directory to create a distribution."
endif

# end of file
