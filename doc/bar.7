.\" Text automatically generated by txt2man
.TH bar 7 "21 December 2021" "." "Linux User's Manual"
.SH NAME
\fBbar \fP- backup archiver program
\fB
.SH SYNOPSIS
.nf
.fam C
\fBbar\fP [<options>] [--] <archive name> [<file>|<device>\.\.\.]
\fBbar\fP [<options>] [--] <key \fIfile\fP name>

\fBArchive\fP name:  \fIfile://<\fIfile\fP\fP name>
               ftp:// [<login name>[:<password>]@]<host name>]/<\fIfile\fP name>
               scp:// [<login name>[:<password>]@]<host name>[:<port>]/<\fIfile\fP name>
               sftp:// [<login name>[:<password>]@]<host name>[:<port>]/<\fIfile\fP name>
               webdav:// [<login name>[:<password>]@]<host name>/<\fIfile\fP name>
               webdavs:// [<login name>[:<password>]@]<host name>/<\fIfile\fP name>
               cd:// [<device name>:]<\fIfile\fP name>
               dvd:// [<device name>:]<\fIfile\fP name>
               bd:// [<device name>:]<\fIfile\fP name>
               device:// [<device name>:]<\fIfile\fP name>

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
BAR is a backup archiver program for files and disk images to create compressed,
encrypted and split archive files which can be stored on a local hard disk,
via network on a server or (with additional external tools) an optical medium
like a CD, DVD, or BD. It can create full and incremental/differential archives.
.PP
\fBArchive\fP files can be created, the content can be listed, tested, compared and
extracted. Individual archive files can be read independent. Listing the contents of
an archive is fast, even when the content is compressed and encrypted. The content
can be compressed with either \fBzip\fP(1), \fBbzip2\fP(1), \fBlzma\fP(1), \fBlzo\fP(1), \fBlz4\fP(1), and
additionally \fBxdelta\fP(1). For encryption several encryption algorithms from the
libcrypt project like AES or TWOFISH can be used. Public key encryption (RSA) is
also supported.
.PP
CDs, DVDs, BDs with archive files can be created when the external tools
\fBgrowisofs\fP(1) and \fBmkisofs\fP(1) are installed. If the tool \fBdvdisaster\fP(1) is
available CDs and DVDs with additional error correction codes can be created.
.PP
BAR can be executed as a daemon and can created backups in the background via
the integrated scheduler. The BAR daemon can be controlled via a network
connection (either plain or SSL encrypted) with the graphical front end
\fBbarcontrol\fP(3).
.SH OPTIONS

.TP
.B
\fB-c\fP|\fB--create\fP
create new files archive
.TP
.B
\fB-m\fP|\fB--image\fP
create new images archive
.TP
.B
\fB-l\fP|\fB--list\fP
list contents of archive
.TP
.B
\fB-t\fP|\fB--test\fP
test contents of archive
.TP
.B
\fB-d\fP|\fB--compare\fP
compare contents of archive with files and images
.TP
.B
\fB-x\fP|\fB--extract\fP
restore archive
.TP
.B
\fB--convert\fP
convert archives
.TP
.B
\fB--generate-keys\fP
generate new public/private key pair
.TP
.B
\fB--generate-signature-keys\fP
generate new public/private key pair for signature
.TP
.B
\fB--generate-keys-bits\fP=<n>[K]
key bits (default: 1K)
.TP
.B
\fB--generate-keys-mode\fP=<name>
select generate key mode mode
.RS
.TP
.B
secure
: secure keys (default)
transient: transient keys (less secure)
.RE
.TP
.B
\fB--job\fP=<name or UUID>
execute job
.TP
.B
\fB--normal\fP
create normal archive (no incremental list \fIfile\fP)
.TP
.B
\fB-f\fP|\fB--full\fP
create full archive and incremental list \fIfile\fP
.TP
.B
\fB-i\fP|\fB--incremental\fP
create incremental archive
.TP
.B
\fB-I\fP|\fB--incremental-list\fP-\fIfile\fP=<\fIfile\fP name>
incremental list \fIfile\fP name (default: <archive name>.bid)
.TP
.B
\fB--differential\fP
create differential archive
.TP
.B
\fB--pattern-type\fP=<name>
select pattern type
.RS
.TP
.B
glob
glob patterns: * and ? (default)
.TP
.B
regex
regular expression pattern matching
.TP
.B
extended
extended regular expression pattern matching
.RE
.TP
.B
\fB-T\fP|\fB--storage-list-stdin\fP
read storage name list from stdin
.TP
.B
\fB--storage-list\fP=<\fIfile\fP name>
storage name list \fIfile\fP name
.TP
.B
\fB--storage-command\fP=<command>
storage name command
.TP
.B
-#|\fB--include\fP=<pattern>
include pattern
.TP
.B
\fB--include\fP-\fIfile\fP-command=<command>
include \fIfile\fP pattern command
.TP
.B
\fB--include\fP-\fIfile\fP-command=<command>
include \fIfile\fP pattern command
.TP
.B
\fB--include-image-command\fP=<command>
include image pattern command
.TP
.B
\fB--include-image-command\fP=<command>
include image pattern command
.TP
.B
-!|\fB--exclude\fP=<pattern>
exclude pattern
.TP
.B
\fB--exclude-list\fP=<\fIfile\fP name>
exclude pattern list \fIfile\fP name
.TP
.B
\fB--exclude-command\fP=<command>
exclude pattern command
.TP
.B
\fB--mount\fP=<name[,[device][,yes]>
mount device
.TP
.B
\fB--mount-command\fP=<command>
mount command (default: mount \fB-p\fP 0 %directory)
.TP
.B
\fB--mount-device-command\fP=<command>
mount device command (default: mount \fB-p\fP 0 %device %directory)
.TP
.B
\fB--unmount-command\fP=<command>
unmount command (default: umount %directory)
.TP
.B
\fB--delta-source\fP=<pattern>
source pattern
.TP
.B
\fB--config\fP=<\fIfile\fP name>
configuration \fIfile\fP
.TP
.B
\fB--tmp-directory\fP=<path>
temporary directory (default: /tmp)
.TP
.B
\fB--max-tmp-size\fP=<n>[T|G|M|K]
max. size of temporary files
.TP
.B
\fB-s\fP|\fB--archive-part-size\fP=<n>[T|G|M|K]
approximated archive part size
.TP
.B
\fB-p\fP|\fB--directory-strip\fP=<n>
number of directories to strip on extract
.TP
.B
\fB--destination\fP=<path>
destination to restore entries (default: )
.TP
.B
\fB--owner\fP=<user:group>
user and group of restored files
.TP
.B
\fB--permissions\fP=<<owner>:<group>:<world>|<number>>
permissions of restored files
.TP
.B
\fB--comment\fP=<text>
comment
.TP
.B
\fB-C\fP|\fB--directory\fP=<path>
change to directory
.TP
.B
\fB-z\fP|\fB--compress-algorithm\fP=<algorithm|xdelta+algorithm>
select compress algorithms to use
.RS
.TP
.B
none
no compression (default)
.TP
.B
zip0..zip9
ZIP compression level 0..9
.TP
.B
bzip1..bzip9
BZIP2 compression level 1..9
.TP
.B
lzma1..lzma9
LZMA compression level 1..9
.TP
.B
lzo1..lzo5
LZO compression level 1..5
.TP
.B
lz4-0..lz4-16
LZ4 compression level 0..16
zstd0..zstd19: ZStd compression level 0..19
additional select with '+':
xdelta1..xdelta9: XDELTA compression level 1..9
.RE
.TP
.B
\fB--compress-min-size\fP=<n>[T|G|M|K]
minimal size of \fIfile\fP for compression (default: 32)
.TP
.B
\fB--compress-exclude\fP=<pattern>
exclude compression pattern
.TP
.B
\fB-y\fP|\fB--crypt-algorithm\fP=<name>
select crypt algorithm to use
.RS
.TP
.B
none
no encryption (default)
.TP
.B
3DES
3DES cipher
.TP
.B
CAST5
CAST5 cipher
.TP
.B
BLOWFISH
Blowfish cipher
.TP
.B
AES128
AES cipher 128bit
.TP
.B
AES192
AES cipher 192bit
.TP
.B
AES256
AES cipher 256bit
.TP
.B
TWOFISH128
Twofish cipher 128bit
.TP
.B
TWOFISH256
Twofish cipher 256bit
.TP
.B
SERPENT128
Serpent cipher 128bit
.TP
.B
SERPENT192
Serpent cipher 192bit
.TP
.B
SERPENT256
Serpent cipher 256bit
.TP
.B
CAMELLIA128
Camellia cipher 128bit
.TP
.B
CAMELLIA192
Camellia cipher 192bit
.TP
.B
CAMELLIA256
Camellia cipher 256bit
.RE
.TP
.B
\fB--crypt-type\fP=<name>
select crypt type
.RS
.TP
.B
symmetric
symmetric (default)
.TP
.B
asymmetric
asymmetric
.RE
.TP
.B
\fB--crypt-password\fP=<password>
crypt password (use with care!)
.TP
.B
\fB--crypt-public-key\fP=<\fIfile\fP name>
public key for encryption
.TP
.B
\fB--crypt-private-key\fP=<\fIfile\fP name>
private key for decryption
.TP
.B
\fB--signature-public-key\fP=<\fIfile\fP name|data>
public key for signature check
.TP
.B
\fB--signature-private-key\fP=<\fIfile\fP name|data>
private key for signature generation
.TP
.B
\fB--ftp-login-name\fP=<name>
ftp login name
.TP
.B
\fB--ftp-password\fP=<password>
ftp password (use with care!)
.TP
.B
\fB--ftp-max-connections\fP=<n>
max. number of concurrent ftp connections
.TP
.B
\fB--ssh-port\fP=<n>
ssh port (default: 22)
.TP
.B
\fB--ssh-login-name\fP=<name>
ssh login name
.TP
.B
\fB--ssh-password\fP=<password>
ssh password (use with care!)
.TP
.B
\fB--ssh-public-key\fP=<\fIfile\fP name>
ssh public key \fIfile\fP name
.TP
.B
\fB--ssh-private-key\fP=<\fIfile\fP name>
ssh private key \fIfile\fP name
.TP
.B
\fB--ssh-max-connections\fP=<n>
max. number of concurrent ssh connections
.TP
.B
\fB--webdav-login-name\fP=<name>
WebDAV login name
.TP
.B
\fB--webdav-password\fP=<password>
WebDAV password (use with care!)
.TP
.B
\fB--webdav-max-connections\fP=<n>
max. number of concurrent WebDAV connections
.TP
.B
\fB--daemon\fP
run in daemon mode
.TP
.B
\fB-D\fP|\fB--no-detach\fP
do not detach in daemon mode
.TP
.B
\fB--server-mode\fP=<name>
select server mode
master: master (default)
slave : slave
.TP
.B
\fB--server-port\fP=<n>
server port (default: 38523)
.TP
.B
\fB--server-tls-port\fP=<n>
TLS (SSL) server port (default: 38524)
.TP
.B
\fB--server-ca\fP-\fIfile\fP=<\fIfile\fP name>
TLS (SSL) server certificate authority \fIfile\fP (CA \fIfile\fP)
.TP
.B
\fB--server-cert\fP-\fIfile\fP=<\fIfile\fP name>
TLS (SSL) server certificate \fIfile\fP
.TP
.B
\fB--server-key\fP-\fIfile\fP=<\fIfile\fP name>
TLS (SSL) server key \fIfile\fP
.TP
.B
\fB--server-password\fP=<password>
server password (use with care!)
.TP
.B
\fB--server-max-connections\fP=<n>
max. concurrent connections to server (default: 8)
.TP
.B
\fB--server-jobs-directory\fP=<path name>
server job directory (default: /etc/\fBbar\fP/jobs)
.TP
.B
\fB--nice-level\fP=<n>
general nice level of processes/threads
.TP
.B
\fB--max-threads\fP=<n>
max. number of concurrent compress/encryption threads
.TP
.B
\fB--max-band-width\fP=<number or \fIfile\fP name>
max. network band width to use [bits/s]
.TP
.B
\fB--remote\fP-\fBbar\fP-executable=<\fIfile\fP name>
remote BAR executable
.TP
.B
\fB--pre-command\fP=<command>
pre-process command
.TP
.B
\fB--post-command\fP=<command>
post-process command
.TP
.B
--\fIfile\fP-write-pre-command=<command>
write \fIfile\fP pre-process command
.TP
.B
--\fIfile\fP-write-post-command=<command>
write \fIfile\fP post-process command
.TP
.B
\fB--ftp-write-pre-command\fP=<command>
write FTP pre-process command
.TP
.B
\fB--ftp-write-post-command\fP=<command>
write FTP post-process command
.TP
.B
\fB--scp-write-pre-command\fP=<command>
write SCP pre-process command
.TP
.B
\fB--scp-write-post-command\fP=<command>
write SCP post-process command
.TP
.B
\fB--sftp-write-pre-command\fP=<command>
write SFTP pre-process command
.TP
.B
\fB--sftp-write-post-command\fP=<command>
write SFTP post-process command
.TP
.B
\fB--webdav-write-pre-command\fP=<command>
write WebDAV pre-process command
.TP
.B
\fB--webdav-write-post-command\fP=<command>
write WebDAV post-process command
.TP
.B
\fB--cd-device\fP=<device name>
default CD device (default: /dev/cdrw)
.TP
.B
\fB--cd-request-volume-command\fP=<command>
request new CD volume command
.TP
.B
\fB--cd-unload-volume-command\fP=<command>
unload CD volume command (default: eject %device)
.TP
.B
\fB--cd-load-volume-command\fP=<command>
load CD volume command (default: eject \fB-t\fP %device)
.TP
.B
\fB--cd-volume-size\fP=<n>[T|G|M|K]
CD volume size
.TP
.B
\fB--cd-image-pre-command\fP=<command>
make CD image pre-process command
.TP
.B
\fB--cd-image-post-command\fP=<command>
make CD image post-process command
.TP
.B
\fB--cd-image-command\fP=<command>
make CD image command (default: nice mkisofs \fB-V\fP Backup \fB-volset\fP %number \fB-r\fP \fB-o\fP %image %directory)
.TP
.B
\fB--cd-ecc-pre-command\fP=<command>
make CD error-correction codes pre-process command
.TP
.B
\fB--cd-ecc-post-command\fP=<command>
make CD error-correction codes post-process command
.TP
.B
\fB--cd-ecc-command\fP=<command>
make CD error-correction codes command (default: nice dvdisaster \fB-mRS02\fP \fB-n\fP cd \fB-c\fP \fB-i\fP %image \fB-v\fP)
.TP
.B
\fB--cd-blank-command\fP=<command>
blank CD medium command (default: nice dvd+rw-format \fB-blank\fP %device)
.TP
.B
\fB--cd-write-pre-command\fP=<command>
write CD pre-process command
.TP
.B
\fB--cd-write-post-command\fP=<command>
write CD post-process command
.TP
.B
\fB--cd-write-command\fP=<command>
write CD command (default: nice sh \fB-c\fP 'mkisofs \fB-V\fP Backup \fB-volset\fP %number \fB-r\fP \fB-o\fP %image %directory && cdrecord dev=%device %image')
.TP
.B
\fB--cd-write-image-command\fP=<command>
write CD image command (default: nice cdrecord dev=%device %image)
.TP
.B
\fB--dvd-device\fP=<device name>
default DVD device (default: /dev/dvd)
.TP
.B
\fB--dvd-request-volume-command\fP=<command>
request new DVD volume command
.TP
.B
\fB--dvd-unload-volume-command\fP=<command>
unload DVD volume command (default: eject %device)
.TP
.B
\fB--dvd-load-volume-command\fP=<command>
load DVD volume command (default: eject \fB-t\fP %device)
.TP
.B
\fB--dvd-volume-size\fP=<n>[T|G|M|K]
DVD volume size
.TP
.B
\fB--dvd-image-pre-command\fP=<command>
make DVD image pre-process command
.TP
.B
\fB--dvd-image-post-command\fP=<command>
make DVD image post-process command
.TP
.B
\fB--dvd-image-command\fP=<command>
make DVD image command (default: nice mkisofs \fB-V\fP Backup \fB-volset\fP %number \fB-r\fP \fB-o\fP %image %directory)
.TP
.B
\fB--dvd-ecc-pre-command\fP=<command>
make DVD error-correction codes pre-process command
.TP
.B
\fB--dvd-ecc-post-command\fP=<command>
make DVD error-correction codes post-process command
.TP
.B
\fB--dvd-ecc-command\fP=<command>
make DVD error-correction codes command (default: nice dvdisaster \fB-mRS02\fP \fB-n\fP dvd \fB-c\fP \fB-i\fP %image \fB-v\fP)
.TP
.B
\fB--dvd-blank-command\fP=<command>
blank DVD mediumcommand (default: nice dvd+rw-format \fB-blank\fP %device)
.TP
.B
\fB--dvd-write-pre-command\fP=<command>
write DVD pre-process command
.TP
.B
\fB--dvd-write-post-command\fP=<command>
write DVD post-process command
.TP
.B
\fB--dvd-write-command\fP=<command>
write DVD command (default: nice growisofs \fB-Z\fP %device \fB-A\fP BAR \fB-V\fP Backup \fB-volset\fP %number \fB-r\fP %directory)
.TP
.B
\fB--dvd-write-image-command\fP=<command>
write DVD image command (default: nice growisofs \fB-Z\fP %device=%image \fB-use-the-force-luke\fP=dao \fB-dvd-compat\fP \fB-use-the-force-luke\fP=noload)
.TP
.B
\fB--bd-device\fP=<device name>
default BD device (default: /dev/bd)
.TP
.B
\fB--bd-request-volume-command\fP=<command>
request new BD volume command
.TP
.B
\fB--bd-unload-volume-command\fP=<command>
unload BD volume command (default: eject %device)
.TP
.B
\fB--bd-load-volume-command\fP=<command>
load BD volume command (default: eject \fB-t\fP %device)
.TP
.B
\fB--bd-volume-size\fP=<n>[T|G|M|K]
BD volume size
.TP
.B
\fB--bd-image-pre-command\fP=<command>
make BD image pre-process command
.TP
.B
\fB--bd-image-post-command\fP=<command>
make BD image post-process command
.TP
.B
\fB--bd-image-command\fP=<command>
make BD image command (default: nice mkisofs \fB-V\fP Backup \fB-volset\fP %number \fB-r\fP \fB-o\fP %image %directory)
.TP
.B
\fB--bd-ecc-pre-command\fP=<command>
make BD error-correction codes pre-process command
.TP
.B
\fB--bd-ecc-post-command\fP=<command>
make BD error-correction codes post-process command
.TP
.B
\fB--bd-ecc-command\fP=<command>
make BD error-correction codes command (default: nice dvdisaster \fB-mRS02\fP \fB-n\fP bd \fB-c\fP \fB-i\fP %image \fB-v\fP)
.TP
.B
\fB--bd-blank-command\fP=<command>
blank BD medium command (default: nice dvd+rw-format \fB-blank\fP %device)
.TP
.B
\fB--bd-write-pre-command\fP=<command>
write BD pre-process command
.TP
.B
\fB--bd-write-post-command\fP=<command>
write BD post-process command
.TP
.B
\fB--bd-write-command\fP=<command>
write BD command (default: nice growisofs \fB-Z\fP %device \fB-A\fP BAR \fB-V\fP Backup \fB-volset\fP %number \fB-r\fP %directory)
.TP
.B
\fB--bd-write-image-command\fP=<command>
write BD image command (default: nice growisofs \fB-Z\fP %device=%image \fB-use-the-force-luke\fP=dao \fB-dvd-compat\fP \fB-use-the-force-luke\fP=noload)
.TP
.B
\fB--device\fP=<device name>
default device
.TP
.B
\fB--device-request-volume-command\fP=<command>
request new volume command
.TP
.B
\fB--device-load-volume-command\fP=<command>
load volume command
.TP
.B
\fB--device-unload-volume-command\fP=<command>
unload volume command
.TP
.B
\fB--device-volume-size\fP=<n>[T|G|M|K]
volume size
.TP
.B
\fB--device-image-pre-command\fP=<command>
make image pre-process command
.TP
.B
\fB--device-image-post-command\fP=<command>
make image post-process command
.TP
.B
\fB--device-image-command\fP=<command>
make image command
.TP
.B
\fB--device-ecc-pre-command\fP=<command>
make error-correction codes pre-process command
.TP
.B
\fB--device-ecc-post-command\fP=<command>
make error-correction codes post-process command
.TP
.B
\fB--device-ecc-command\fP=<command>
make error-correction codes command
.TP
.B
\fB--device-blank-command\fP=<command>
blank device medium command
.TP
.B
\fB--device-write-pre-command\fP=<command>
write device pre-process command
.TP
.B
\fB--device-write-post-command\fP=<command>
write device post-process command
.TP
.B
\fB--device-write-command\fP=<command>
write device command
.TP
.B
\fB--max-storage-size\fP=<n>[T|G|M|K]
max. storage size
.TP
.B
\fB--volume-size\fP=<n>[T|G|M|K]
volume size
.TP
.B
\fB--ecc\fP
add error-correction codes with 'dvdisaster' tool
.TP
.B
\fB--always-create-image\fP
always create image for CD/DVD/BD/device
.TP
.B
\fB--blank\fP
blank medium before writing
.TP
.B
\fB--jobs-directory\fP=<path name>
server job directory (default: /etc/\fBbar\fP/jobs)
.TP
.B
\fB--incremental-data-directory\fP=<path name>
server incremental data directory (default: /var/lib/\fBbar\fP)
.TP
.B
\fB--index-database\fP=<\fIfile\fP name>
index database \fIfile\fP name
.TP
.B
\fB--index-database-auto-update\fP
enabled automatic update index database
.TP
.B
\fB--index-database-max-band-width\fP=<number or \fIfile\fP name>
max. band width to use for index updates [bis/s]
.TP
.B
\fB--index-database-keep-time\fP=<n>[weeks|week|days|day|h|m|s]
time to keep index data of not existing storages (default: 86400)
.TP
.B
\fB--continuous-max-size\fP=<n>[T|G|M|K]
max. continuous size
\fB--continuous-min-time-delta\fP=<n>[weeks|week|days|day|h|m|s] min. time between continuous backup of an entry
.TP
.B
\fB--log\fP=<name>[,<name>\.\.\.]
log types
.RS
.TP
.B
none
no logging (default)
.TP
.B
errors
log errors
.TP
.B
warnings
log warnings
.TP
.B
ok
log stored/restored files
.TP
.B
unknown
log unknown files
.TP
.B
skipped
log skipped files
.TP
.B
missing
log missing files
.TP
.B
incomplete
log incomplete files
.TP
.B
excluded
log excluded files
.TP
.B
storage
log storage
.TP
.B
index
index database
.TP
.B
continuous
continuous backup
.TP
.B
all
log everything
.RE
.TP
.B
\fB--log\fP-\fIfile\fP=<\fIfile\fP name>
log \fIfile\fP name
.TP
.B
\fB--log-format\fP=<format>
log format (default: %Y-%m-%d %H:%M:%S)
.TP
.B
\fB--log-post-command\fP=<command>
log \fIfile\fP post-process command
.TP
.B
\fB--pid\fP-\fIfile\fP=<\fIfile\fP name>
process id \fIfile\fP name
.TP
.B
\fB--pairing-master\fP-\fIfile\fP=<\fIfile\fP name>
pairing master enable \fIfile\fP name (default: /var/lib/\fBbar\fP/pairing)
.TP
.B
\fB--info\fP
show meta info
.TP
.B
\fB-g\fP|\fB--group\fP
group files in list
.TP
.B
\fB--all\fP
show all files
.TP
.B
\fB-L\fP|\fB--long-format\fP
list in long format
.TP
.B
\fB-H\fP|\fB--human-format\fP
list in human readable format
.TP
.B
\fB--numeric-uid-gid\fP
print numeric user/group ids
.TP
.B
\fB--numeric-permission\fP
print numeric \fIfile\fP/directory permissions
.TP
.B
\fB--no-header-footer\fP
output no header/footer in list
.TP
.B
\fB--delete-old-archive-files\fP
delete old archive files after creating new files
.TP
.B
\fB--ignore-no-backup\fP-\fIfile\fP
ignore .nobackup/.NOBACKUP \fIfile\fP
.TP
.B
\fB--ignore-no-dump\fP
ignore 'no dump' attribute of files
.TP
.B
\fB--skip-unreadable\fP
skip unreadable files
.TP
.B
\fB--force-delta-compression\fP
force delta compression of files. Stop on error
.TP
.B
\fB--raw-images\fP
store raw images (store all image blocks)
.TP
.B
\fB--no-fragments-check\fP
do not check completeness of \fIfile\fP fragments
.TP
.B
\fB--no-index-database\fP
do not store index database for archives
.TP
.B
\fB--archive\fP-\fIfile\fP-mode=<name>
select archive files write mode
.RS
.TP
.B
stop
stop if archive \fIfile\fP exists (default)
.TP
.B
append
append to existing archive files
.TP
.B
overwrite
overwrite existing archive files
.RE
.TP
.B
\fB-o\fP|\fB--overwrite-archive-files\fP
overwrite existing archive files
.TP
.B
\fB--restore-entry-mode\fP=<name>
restore entry mode
.RS
.TP
.B
stop
: stop if entry exists (default)
.TP
.B
append
: rename entries
overwrite: overwrite entries
.RE
.TP
.B
\fB--overwrite-files\fP
overwrite existing entries
.TP
.B
\fB--wait-first-volume\fP
wait for first volume
.TP
.B
\fB--no-signature\fP
do not create signatures
.TP
.B
\fB--skip-verify-signatures\fP
do not verify signatures of archives
.TP
.B
\fB--force-verify-signatures\fP
force verify signatures of archives. Stop on error
.TP
.B
\fB--no\fP-\fBbar\fP-on-medium
do not store a copy of BAR on medium
.TP
.B
\fB--no-stop-on-error\fP
do not immediately stop on error
.TP
.B
\fB--no-stop-on-attribute-error\fP
do not immediately stop on attribute error
.TP
.B
\fB--no-storage\fP
do not store archives (skip storage, index database)
.TP
.B
\fB--dry-run\fP
do dry-run (skip storage/restore, incremental data, index database)
.TP
.B
\fB--no-default-config\fP
do not read configuration files /etc/\fBbar\fP/bar.cfg and ~/.bar/bar.cfg
.TP
.B
\fB--quiet\fP
suppress any output
.TP
.B
\fB--version\fP
output version
.TP
.B
\fB-h\fP|\fB--help\fP
output this help
.TP
.B
\fB--xhelp\fP
output help to extended options
.TP
.B
\fB--help-internal\fP
output help to internal options
.SH EXAMPLES
Create an archive:
.PP
.nf
.fam C
  bar -c home.bar /home
  bar -c home.bar /home --compress-algorithm=lzma9
  bar -c file://home.bar /home --compress-algorithm=xdelta9+lzma9 --delta-source=home-previous.bar

.fam T
.fi
List contents of an archive:
.PP
.nf
.fam C
  bar *.bar
  bar -l home*.bar
  bar -L home*.bar

.fam T
.fi
Test archive:
.PP
.nf
.fam C
  bar -t home*.bar

.fam T
.fi
Compare contents of an archive with files:
.PP
.nf
.fam C
  bar -d home*.bar

.fam T
.fi
Convert contents of an archive:
.PP
.nf
.fam C
  bar --convert --compress-algorithm=zstd4 home*.bar

.fam T
.fi
Find most recent \fIfile\fP in all archives:
.PP
.nf
.fam C
  bar -g -# '*/foo' home*.bar

.fam T
.fi
Verify signature:
.PP
.nf
.fam C
  bar --info --force-verify-signatures home*.bar

.fam T
.fi
Restore contents of an archive:
.PP
.nf
.fam C
  bar -x home*.bar

.fam T
.fi
.SH DIAGNOSTICS
Exit code is zero if no error occurred. Errors result in a non-zero exit
code and a error message on standard error.
.SH FILES
/etc/\fBbar\fP/bar.cfg
.PP
.nf
.fam C
  system wide bar configuration

.fam T
.fi
/etc/\fBbar\fP/jobs
.PP
.nf
.fam C
  jobs directory

.fam T
.fi
$HOME/.bar/bar.cfg
.PP
.nf
.fam C
  user specific configuration

.fam T
.fi
/etc/ssl/certs/\fBbar\fP-ca.pem, /etc/ssl/certs/\fBbar\fP-server-cert.pem
.PP
.nf
.fam C
  BAR TLS/SSL certificates and public keys

.fam T
.fi
/etc/ssl/private/\fBbar\fP-server-key.pem
.PP
.nf
.fam C
  BAR TLS/SSL server private key

.fam T
.fi
/etc/logrotate.d/\fBbar\fP
.PP
.nf
.fam C
  BAR logfile rotation settings

.fam T
.fi
.SH NOTES
See manual \fIfile\fP bar.pdf for further information and details.
.SH BUGS
Please report bugs to torsten.rupp@gmx.net. If possible use \fBbar\fP-debug or
compile BAR with debugging enabled (configure option \fB--enable-debug\fP) and
include a C stack trace in the bug report.
