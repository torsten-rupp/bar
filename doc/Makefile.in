# ----------------------------------------------------------------------------
#
# $Source: /home/torsten/cvs/bar/Makefile.in,v $
# $Revision: 10654 $
# $Author: torsten $
# Contents: Makefile for bar documentation
# Systems: all
#
# ----------------------------------------------------------------------------

#----------------------------- external variables ----------------------------


#---------------------------------- settings ---------------------------------

PLATFORM = @PLATFORM@

#------------------------------------ paths ----------------------------------

ROOT_DIR   = $(abspath @srcdir@/..)
SOURCE_DIR = $(abspath @srcdir@)
BUILD_DIR  = $(CURDIR)/..

ifeq ($(DESTDIR),)
INSTALL_MAN_DIR        = $(if $(mandir),$(mandir),@MAN_DIR@)
else
INSTALL_MAN_DIR        = @MAN_DIR@
endif

#--------------------------------- tool chain --------------------------------

TXT2MAN = @TXT2MAN@
UNOCONV = @UNOCONV@

#---------------------------------- commands----------------------------------

CAT          = cat
CD           = cd
CHMOD        = chmod
CONVERT      = @CONVERT@
CP           = cp
DIFF         = diff
DOCKER       = @DOCKER@
ECHO         = echo
ECHO_NO_LF   = echo -n
EPM          = @EPM@
GREP         = grep
INSTALL      = @INSTALL@
LN           = ln
MD5SUM       = @MD5SUM@
MKDIR        = mkdir
MV           = mv
NROFF        = nroff
PERL         = @PERL@
PRINTF       = printf
RMDIR        = rmdir
RMF          = rm -f
RMRF         = rm -rf
SED          = sed
TAR          = tar
WINE         = @WINE@
WINE_C_DRIVE = @WINE_C_DRIVE@
ZIP          = zip

#------------------------ specific variables/settings ------------------------

SHELL = bash

#-------------------------------- functions ----------------------------------

# print info line
# $(call functionPrintInfo,text)
functionPrintInfo = \
  $(if $(QUIET), \
    $(ECHO_NO_LF) "$1...",\
    $(PRINTF) -vl "%$${COLUMNS:-`tput cols 2>&-||$(ECHO) 80`}s\n" && $(PRINTF) -vl -- "--- $1 $${l// /-}\n" && $(ECHO) $${l:0:`tput cols 2>&-||$(ECHO) 80`}\
   )

# print result
# $(call functionPrintResult,text)
functionPrintResult = \
  $(if $(QUIET), \
    $(ECHO) "$1",\
    $(PRINTF) -vl "%$${COLUMNS:-`tput cols 2>&-||$(ECHO) 80`}s\n" && $(PRINTF) -vl -- "--- $1 $${l// /-}\n" && $(ECHO) $${l:0:`tput cols 2>&-||$(ECHO) 80`}\
   )

#---------------------------------- rules ------------------------------------

# convert images
images/%.png: $(SOURCE_DIR)/images/%.xcf
ifneq ($(CONVERT),)
	$(INSTALL) -d $(@D)
	$(CONVERT) $^ -layers flatten $@
else
	@$(ECHO) "ERROR: no 'convert' command - cannot generate documentation"; false
endif

images/%-small.png: $(SOURCE_DIR)/images/%.xcf
ifneq ($(CONVERT),)
	$(INSTALL) -d $(@D)
	$(CONVERT) $^ -delete 1--1 -resize 200x200 $@
else
	@$(ECHO) "ERROR: no 'convert' command - cannot generate documentation"; false
endif

images/%-large.png: $(SOURCE_DIR)/images/%.xcf
ifneq ($(CONVERT),)
	$(INSTALL) -d $(@D)
	$(CONVERT) $^ -delete 1--1 $@
else
	@$(ECHO) "ERROR: no 'convert' command - cannot generate documentation"; false
endif

#--------------------------------- objects -----------------------------------

DOC_MAN          = bar.7 \

DOC_PDF          = backup-archiver.pdf \

DOC              = $(DOC_MAN) $(DOC_PDF)

DOC_IMAGES       = images/archivename-editor.png \
                   images/entries.png \
                   images/images.png \
                   images/filters+mounts.png \
                   images/restore-dialog.png \
                   images/restore.png \
                   images/schedule.png \
                   images/persistence.png \
                   images/scripts.png \
                   images/server-commands.png \
                   images/server-general.png \
                   images/server-servers.png \
                   images/server-verbosity+log.png \
                   images/status.png \
                   images/storage.png \

DOC_IMAGES_SMALL = $(foreach z,$(patsubst %.png,%,$(DOC_IMAGES)),$z-small.png)
DOC_IMAGES_LARGE = $(foreach z,$(patsubst %.png,%,$(DOC_IMAGES)),$z-large.png)

#------------------------------ dependencies ---------------------------------

.PHONY: all clean distclean
all: \
  $(DOC) \
  $(DOC_IMAGES) \
  $(DOC_IMAGES_SMALL) \
  $(DOC_IMAGES_LARGE) \

clean:
	$(RMF) $(DOC_IMAGES)
	$(RMF) $(DOC_IMAGES_SMALL)
	$(RMF) $(DOC_IMAGES_LARGE)

distclean: clean

# help
.PHONY: help
help:
	@$(ECHO) "Help targets:"
	@$(ECHO) ""
	@$(ECHO) "  all "
	@$(ECHO) "  clean "
	@$(ECHO) "  distclean"
	@$(ECHO) ""
	@$(ECHO) "  images"
	@$(ECHO) "  doc"
	@$(ECHO) "  man"
	@$(ECHO) "  showman"

.PHONY: images image_small images_large
images: $(DOC_IMAGES)

.PHONY: print_images
print_images:
	$(ECHO) $(DOC_IMAGES)

image_small: $(DOC_IMAGES_SMALL)

.PHONY: print_images_small
print_images_small:
	$(ECHO) $(DOC_IMAGES_SMALL)

images_large: $(DOC_IMAGES_LARGE)

.PHONY: print_images_large
print_images_large:
	$(ECHO) $(DOC_IMAGES_LARGE)

# create man-page
.PHONY: man clean_man showman
man: \
  bar.7

bar.7: \
  $(SOURCE_DIR)/bar.txt
ifneq ($(TXT2MAN),)
	$(INSTALL) -d $(@D)
	$(CAT) $(SOURCE_DIR)/bar.txt | $(TXT2MAN) -t bar -r $(VERSION_MAJOR).$(VERSION_MINOR) -s 7 -v "Linux User's Manual" > $@
else
	@$(ECHO) "ERROR: no 'txt2man' tool available! Cannot create man page."; false
endif

.PHONY: print_man
print_man:
	$(ECHO) $(DOC_MAN)

showman: bar.7
	$(NROFF) -man bar.7

# create manual
backup-archiver.pdf: \
  $(SOURCE_DIR)/backup-archiver.odt \
  $(DOC_IMAGES)
ifneq ($(UNOCONV),)
	$(INSTALL) -d $(@D)
	($(UNOCONV) -f pdf --stdout $(SOURCE_DIR)/backup-archiver.odt > $@.new; \
         if test $$? -eq 0; then \
           $(MV) $@.new $@; \
         else \
           $(ECHO) "ERROR: fail to  create PDF manual."; \
           $(RMF) $@.new; \
         fi; \
        )
else
	@$(ECHO) "ERROR: no 'unoconv' tool available! Cannot create PDF manual."; false
endif

.PHONY: pdf
pdf: backup-archiver.pdf

# ----------------------------------------------------------------------------

.PHONY: install install_man
install install_man: \
  $(DOC_MAN)
	$(INSTALL) -d "$(DESTDIR)$(INSTALL_MAN_DIR)/man7"
	$(INSTALL) -m 644 -t "$(DESTDIR)$(INSTALL_MAN_DIR)/man7" $(DOC_MAN)

# ----------------------------------------------------------------------------

# copy distribution files
.PHONY: dist
dist: \
  $(DOC_IMAGES)
ifneq ($(DIRECTORY),)
	$(INSTALL) -d $(DIRECTORY)/doc
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/doc \
                   $(SOURCE_DIR)/Makefile.in \
                   $(SOURCE_DIR)/README \
                   $(SOURCE_DIR)/COPYING \
                   $(SOURCE_DIR)/backup-archiver.odt \
                   $(SOURCE_DIR)/backup-archiver.pdf \
                   $(SOURCE_DIR)/*.txt \
                   $(SOURCE_DIR)/$(DOC_MAN)
	$(INSTALL) -d $(DIRECTORY)/doc/images
	$(INSTALL) -m 664 \
                   -t $(DIRECTORY)/doc/images \
                   $(DOC_IMAGES)
else
	@$(ECHO) "Please call 'make dist' from top-level directory to create a distribution."; false
endif

# end of file
